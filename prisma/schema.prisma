generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  NURSE
  DOCTOR
  PHARMACY
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ServiceStatus {
  REQUESTED
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id              String       @id @default(cuid())
  email           String    @unique
  firstname       String
  lastname        String
  password        String
  role            Role
  telephoneNumber String?
  dateOfBirth     DateTime?
  googleId        String? 
  gender          String?
  address         String?
  profilePhoto    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isEmailVerified Boolean   @default(false)
  emailVerificationToken    String?   @unique
  emailVerificationExpires  DateTime?
  patient         Patient?
  nurse           Nurse?
  doctor          Doctor?
  pharmacy        Pharmacy?
  admin           Admin?
  notifications   Notification[]
  notificationReads NotificationRead?
  @@index([email])
  @@index([role])
}

model Patient {
  id            String             @id @default(cuid())
  user          User            @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId        String              @unique
  allergies     String?
  emergencyContactName String?
  emergencyContactPhone String?
  emergencyContactRelationship String?
  insuranceInfo String?
  preferredPharmacy String?
  medicalRecord MedicalRecord[]
  prescriptions Prescription[]  @relation("PatientPrescriptions")
  nurseVisits   NurseVisit[]
  doctorRequests DoctorPatientRequest[] @relation("PatientRequests")
  doctors       DoctorPatient[]         @relation("PatientDoctors")
  nurseServiceRequests NurseServiceRequest[] @relation("PatientNurseRequests")
  chatRooms     ChatRoom[]     @relation("PatientChats")
  scheduledTasks  Schedule[] 
  ChatRoomDoctorNursePatient  ChatRoomDoctorNursePatient[]
  chatRoomPatients ChatRoomPatientNurse[] @relation("PatientChats")
}

model Nurse {
  id            String         @id @default(cuid())
  availability  Boolean     @default(true)
  rating        Float       @default(0)
  professionalLicenseNumber String?
  nursingCertification String?
  hospitalAffiliation String?
  yearsOfExperience Int?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @unique
  nurseVisits   NurseVisit[]
  medicalRecords MedicalRecord[] @relation("NurseUpdates")
  serviceRequests NurseServiceRequest[] @relation("NurseServiceRequests")
  nurseChats ChatRoomPatientNurse[] @relation("nurseChats")
  ChatRoomDoctorNursePatient  ChatRoomDoctorNursePatient[]
  doctors     Doctor[]    @relation("DoctorNurses") 
  doctorNurses    DoctorNurse[]
  scheduledTasks  Schedule[] 
  tasks       Task[]
}

model Doctor {
  id              String           @id @default(cuid())
  specialization  String?
  availability    Boolean       @default(true)
  rating          Float         @default(0)
  professionalLicenseNumber String?
  medicalDiploma String?
  hospitalAffiliation String?
  experience      String?
  user            User          @relation(fields: [userId], references: [id])
  userId          String           @unique
  deletedAt       DateTime?
  isDeleted Boolean @default(false)
  patients        DoctorPatient[]        @relation("DoctorPatients")
  patientRequests DoctorPatientRequest[] @relation("DoctorRequests")
  medicalRecords  MedicalRecord[]        @relation("DoctorViews")
  prescriptions   Prescription[]         @relation("DoctorPrescriptions")
  chatRooms       ChatRoom[]     @relation("DoctorChats")
  ChatRoomDoctorNursePatient  ChatRoomDoctorNursePatient[] 
  nurses          Nurse[]     @relation("DoctorNurses") 
  doctorNurses    DoctorNurse[]
  tasks           Task[]  
  scheduledTasks  Schedule[]     
}

model DoctorNurse {
  id        String   @id @default(cuid())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
  nurse     Nurse    @relation(fields: [nurseId], references: [id])
  nurseId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([doctorId, nurseId])
}

model Task {
  id          String       @id @default(cuid())
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  doctorId    String
  nurse       Nurse       @relation(fields: [nurseId], references: [id])
  nurseId     String
  details     String
  status      TaskStatus  @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  completedAt DateTime?
  scheduledTasks  Schedule[] 
}

model Schedule {
  id          String       @id @default(cuid())
  doctor      Doctor?      @relation(fields: [doctorId], references: [id])
  doctorId    String?
  nurse       Nurse?       @relation(fields: [nurseId], references: [id])
  nurseId     String?
  patient     Patient?     @relation(fields: [patientId], references: [id])
  patientId   String?
  task        Task?        @relation(fields: [taskId], references: [id])
  taskId      String?
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String       @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  location    String?
  isRecurring Boolean      @default(false)
  recurrencePattern String? // e.g., "DAILY", "WEEKLY", "MONTHLY"
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model NurseServiceRequest {
  id          String           @id @default(cuid())
  patient     Patient       @relation("PatientNurseRequests", fields: [patientId], references: [id])
  patientId   String
  nurse       Nurse?        @relation("NurseServiceRequests", fields: [nurseId], references: [id])
  nurseId     String?
  status      ServiceStatus @default(REQUESTED)
  serviceType String        //"Blood Pressure Check", "Wound Care", etc.
  description String
  preferredDate DateTime
  urgency     String        //"Low", "Medium", "High"
  location    String        // Patient's preferred location for service
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  completedAt DateTime?
  notes       String?       // Nurse's notes after service
  rating      Int?         // Patient's rating of the service (1-5)
  feedback    String?      // Patient's feedback
}

model DoctorPatientRequest {
  id          String           @id @default(cuid())
  patient     Patient       @relation("PatientRequests", fields: [patientId], references: [id])
  patientId   String
  doctor      Doctor        @relation("DoctorRequests", fields: [doctorId], references: [id])
  doctorId    String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  message     String?
  @@unique([patientId, doctorId])
}

model DoctorPatient {
  id          String           @id @default(cuid())
  patient     Patient       @relation("PatientDoctors", fields: [patientId], references: [id])
  patientId   String
  doctor      Doctor        @relation("DoctorPatients", fields: [doctorId], references: [id])
  doctorId    String
  startDate   DateTime      @default(now())
  endDate     DateTime?
  active      Boolean       @default(true)
  @@unique([patientId, doctorId])
}

model Pharmacy {
  id              String           @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String            @unique
  pharmacyName    String?
  pharmacyLicenseNumber String?
  pharmacyAddress String?
  contactName     String?
  openingHours    String?
  deliveryOptions String?
  prescriptions   Prescription[] @relation("PharmacyPrescriptions")
}

model Admin {
  id        String       @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String      @unique
  reports   Report[]
}

model Prescription {
  id          String       @id @default(cuid())
  date        DateTime  @default(now())
  details     String
  approved    Boolean   @default(false)
  patient     Patient   @relation("PatientPrescriptions", fields: [patientId], references: [id])
  patientId   String
  doctor      Doctor    @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  doctorId    String
  pharmacy    Pharmacy? @relation("PharmacyPrescriptions", fields: [pharmacyId], references: [id])
  pharmacyId  String?
  @@index([patientId])
  @@index([doctorId])
  @@index([pharmacyId])
}

model Notification {
  id        String       @id @default(cuid())
  userId    String        
  type      String
  title     String
  message   String
  read      Boolean   @default(false)
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  readBy    NotificationRead[]
  @@index([userId])
}

model NotificationRead {
  id             String          @id @default(cuid())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String           @unique
  readAt         DateTime     @default(now())
  @@unique([notificationId, userId])
}

model MedicalRecord {
  id          String       @id @default(cuid())
  patient     Patient   @relation(fields: [patientId], references: [id])
  patientId   String       
  diagnosis   String
  treatment   String
  notes       String?
  recordDate  DateTime  @default(now())  // Date of the medical encounter
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  nurses      Nurse[]   @relation("NurseUpdates")
  doctors     Doctor[]  @relation("DoctorViews")
}

model Report {
  id            String      @id @default(cuid())
  details       String
  dateGenerated DateTime @default(now())
  admin         Admin    @relation(fields: [adminId], references: [id])
  adminId       String
}

model NurseVisit {
  id          String      @id @default(cuid())
  date        DateTime @default(now())
  notes       String?
  nurse       Nurse    @relation(fields: [nurseId], references: [id])
  nurseId     String
  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String
}

model ChatRoom {
  id        String       @id @default(cuid())
  status    String    // ACTIVE, ARCHIVED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  patient   Patient   @relation("PatientChats", fields: [patientId], references: [id])
  patientId String
  doctor    Doctor    @relation("DoctorChats", fields: [doctorId], references: [id])
  doctorId  String
  messages  Message[]

  @@unique([patientId, doctorId])
}

model ChatRoomPatientNurse {
  id        String       @id @default(cuid())
  status    String    // ACTIVE, ARCHIVED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  nurse   Nurse   @relation("nurseChats", fields: [nurseId], references: [id])
  nurseId String
  patient   Patient   @relation("PatientChats", fields: [patientId], references: [id])
  patientId String
  messages  Message[]

  @@unique([patientId, nurseId])
}

model ChatRoomDoctorNursePatient {
  id        String       @id @default(cuid())
  status    String    // ACTIVE, ARCHIVED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  doctor    Doctor?   @relation(fields: [doctorId], references: [id])
  doctorId  String?
  nurse     Nurse?    @relation(fields: [nurseId], references: [id])
  nurseId   String?
  patient   Patient?  @relation(fields: [patientId], references: [id])
  patientId String?
  messages  Message[]

  @@unique([doctorId, nurseId, patientId])
}

model Message {
  id          String       @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  senderId    String
  isRead      Boolean   @default(false)
  readAt      DateTime?
  senderRole  Role
  // Polymorphic relationship: Message can belong to different chat rooms
  chatRoomId                     String?  
  chatRoom                       ChatRoom?  @relation(fields: [chatRoomId], references: [id])
  chatRoomPatientNurseId         String?  
  chatRoomPatientNurse           ChatRoomPatientNurse? @relation(fields: [chatRoomPatientNurseId], references: [id])
  chatRoomDoctorNursePatientId   String?  
  chatRoomDoctorNursePatient     ChatRoomDoctorNursePatient? @relation(fields: [chatRoomDoctorNursePatientId], references: [id])
  @@index([chatRoomId])
  @@index([senderId])
  // Ensure that a message belongs to only one chat type
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE
  entity    String   // Model name
  entityId  String
  userId    String   // Who performed the action
  oldData   Json?
  newData   Json?
  createdAt DateTime @default(now())
  
  @@index([entity, entityId])
  @@index([userId])
}