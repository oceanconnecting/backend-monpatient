
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Nurse
 * 
 */
export type Nurse = $Result.DefaultSelection<Prisma.$NursePayload>
/**
 * Model Doctor
 * 
 */
export type Doctor = $Result.DefaultSelection<Prisma.$DoctorPayload>
/**
 * Model DoctorNurse
 * 
 */
export type DoctorNurse = $Result.DefaultSelection<Prisma.$DoctorNursePayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model NurseServiceRequest
 * 
 */
export type NurseServiceRequest = $Result.DefaultSelection<Prisma.$NurseServiceRequestPayload>
/**
 * Model DoctorPatientRequest
 * 
 */
export type DoctorPatientRequest = $Result.DefaultSelection<Prisma.$DoctorPatientRequestPayload>
/**
 * Model DoctorPatient
 * 
 */
export type DoctorPatient = $Result.DefaultSelection<Prisma.$DoctorPatientPayload>
/**
 * Model Pharmacy
 * 
 */
export type Pharmacy = $Result.DefaultSelection<Prisma.$PharmacyPayload>
/**
 * Model Medicine
 * 
 */
export type Medicine = $Result.DefaultSelection<Prisma.$MedicinePayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Prescription
 * 
 */
export type Prescription = $Result.DefaultSelection<Prisma.$PrescriptionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model NotificationRead
 * 
 */
export type NotificationRead = $Result.DefaultSelection<Prisma.$NotificationReadPayload>
/**
 * Model MedicalRecord
 * 
 */
export type MedicalRecord = $Result.DefaultSelection<Prisma.$MedicalRecordPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model NurseVisit
 * 
 */
export type NurseVisit = $Result.DefaultSelection<Prisma.$NurseVisitPayload>
/**
 * Model ChatRoom
 * 
 */
export type ChatRoom = $Result.DefaultSelection<Prisma.$ChatRoomPayload>
/**
 * Model ChatRoomPatientNurse
 * 
 */
export type ChatRoomPatientNurse = $Result.DefaultSelection<Prisma.$ChatRoomPatientNursePayload>
/**
 * Model ChatRoomDoctorNursePatient
 * 
 */
export type ChatRoomDoctorNursePatient = $Result.DefaultSelection<Prisma.$ChatRoomDoctorNursePatientPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  PATIENT: 'PATIENT',
  NURSE: 'NURSE',
  DOCTOR: 'DOCTOR',
  PHARMACY: 'PHARMACY',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const TaskStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const ServiceStatus: {
  REQUESTED: 'REQUESTED',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type ServiceStatus = (typeof ServiceStatus)[keyof typeof ServiceStatus]


export const RequestStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

export type RequestStatus = (typeof RequestStatus)[keyof typeof RequestStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type ServiceStatus = $Enums.ServiceStatus

export const ServiceStatus: typeof $Enums.ServiceStatus

export type RequestStatus = $Enums.RequestStatus

export const RequestStatus: typeof $Enums.RequestStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs>;

  /**
   * `prisma.nurse`: Exposes CRUD operations for the **Nurse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nurses
    * const nurses = await prisma.nurse.findMany()
    * ```
    */
  get nurse(): Prisma.NurseDelegate<ExtArgs>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<ExtArgs>;

  /**
   * `prisma.doctorNurse`: Exposes CRUD operations for the **DoctorNurse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorNurses
    * const doctorNurses = await prisma.doctorNurse.findMany()
    * ```
    */
  get doctorNurse(): Prisma.DoctorNurseDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs>;

  /**
   * `prisma.nurseServiceRequest`: Exposes CRUD operations for the **NurseServiceRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NurseServiceRequests
    * const nurseServiceRequests = await prisma.nurseServiceRequest.findMany()
    * ```
    */
  get nurseServiceRequest(): Prisma.NurseServiceRequestDelegate<ExtArgs>;

  /**
   * `prisma.doctorPatientRequest`: Exposes CRUD operations for the **DoctorPatientRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorPatientRequests
    * const doctorPatientRequests = await prisma.doctorPatientRequest.findMany()
    * ```
    */
  get doctorPatientRequest(): Prisma.DoctorPatientRequestDelegate<ExtArgs>;

  /**
   * `prisma.doctorPatient`: Exposes CRUD operations for the **DoctorPatient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorPatients
    * const doctorPatients = await prisma.doctorPatient.findMany()
    * ```
    */
  get doctorPatient(): Prisma.DoctorPatientDelegate<ExtArgs>;

  /**
   * `prisma.pharmacy`: Exposes CRUD operations for the **Pharmacy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pharmacies
    * const pharmacies = await prisma.pharmacy.findMany()
    * ```
    */
  get pharmacy(): Prisma.PharmacyDelegate<ExtArgs>;

  /**
   * `prisma.medicine`: Exposes CRUD operations for the **Medicine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medicines
    * const medicines = await prisma.medicine.findMany()
    * ```
    */
  get medicine(): Prisma.MedicineDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.prescription`: Exposes CRUD operations for the **Prescription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prescriptions
    * const prescriptions = await prisma.prescription.findMany()
    * ```
    */
  get prescription(): Prisma.PrescriptionDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.notificationRead`: Exposes CRUD operations for the **NotificationRead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationReads
    * const notificationReads = await prisma.notificationRead.findMany()
    * ```
    */
  get notificationRead(): Prisma.NotificationReadDelegate<ExtArgs>;

  /**
   * `prisma.medicalRecord`: Exposes CRUD operations for the **MedicalRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalRecords
    * const medicalRecords = await prisma.medicalRecord.findMany()
    * ```
    */
  get medicalRecord(): Prisma.MedicalRecordDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs>;

  /**
   * `prisma.nurseVisit`: Exposes CRUD operations for the **NurseVisit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NurseVisits
    * const nurseVisits = await prisma.nurseVisit.findMany()
    * ```
    */
  get nurseVisit(): Prisma.NurseVisitDelegate<ExtArgs>;

  /**
   * `prisma.chatRoom`: Exposes CRUD operations for the **ChatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRooms
    * const chatRooms = await prisma.chatRoom.findMany()
    * ```
    */
  get chatRoom(): Prisma.ChatRoomDelegate<ExtArgs>;

  /**
   * `prisma.chatRoomPatientNurse`: Exposes CRUD operations for the **ChatRoomPatientNurse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRoomPatientNurses
    * const chatRoomPatientNurses = await prisma.chatRoomPatientNurse.findMany()
    * ```
    */
  get chatRoomPatientNurse(): Prisma.ChatRoomPatientNurseDelegate<ExtArgs>;

  /**
   * `prisma.chatRoomDoctorNursePatient`: Exposes CRUD operations for the **ChatRoomDoctorNursePatient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRoomDoctorNursePatients
    * const chatRoomDoctorNursePatients = await prisma.chatRoomDoctorNursePatient.findMany()
    * ```
    */
  get chatRoomDoctorNursePatient(): Prisma.ChatRoomDoctorNursePatientDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Patient: 'Patient',
    Nurse: 'Nurse',
    Doctor: 'Doctor',
    DoctorNurse: 'DoctorNurse',
    Task: 'Task',
    Schedule: 'Schedule',
    NurseServiceRequest: 'NurseServiceRequest',
    DoctorPatientRequest: 'DoctorPatientRequest',
    DoctorPatient: 'DoctorPatient',
    Pharmacy: 'Pharmacy',
    Medicine: 'Medicine',
    Admin: 'Admin',
    Prescription: 'Prescription',
    Notification: 'Notification',
    NotificationRead: 'NotificationRead',
    MedicalRecord: 'MedicalRecord',
    Report: 'Report',
    NurseVisit: 'NurseVisit',
    ChatRoom: 'ChatRoom',
    ChatRoomPatientNurse: 'ChatRoomPatientNurse',
    ChatRoomDoctorNursePatient: 'ChatRoomDoctorNursePatient',
    Message: 'Message',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "patient" | "nurse" | "doctor" | "doctorNurse" | "task" | "schedule" | "nurseServiceRequest" | "doctorPatientRequest" | "doctorPatient" | "pharmacy" | "medicine" | "admin" | "prescription" | "notification" | "notificationRead" | "medicalRecord" | "report" | "nurseVisit" | "chatRoom" | "chatRoomPatientNurse" | "chatRoomDoctorNursePatient" | "message" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Nurse: {
        payload: Prisma.$NursePayload<ExtArgs>
        fields: Prisma.NurseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NurseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NurseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload>
          }
          findFirst: {
            args: Prisma.NurseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NurseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload>
          }
          findMany: {
            args: Prisma.NurseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload>[]
          }
          create: {
            args: Prisma.NurseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload>
          }
          createMany: {
            args: Prisma.NurseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NurseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload>[]
          }
          delete: {
            args: Prisma.NurseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload>
          }
          update: {
            args: Prisma.NurseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload>
          }
          deleteMany: {
            args: Prisma.NurseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NurseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NurseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NursePayload>
          }
          aggregate: {
            args: Prisma.NurseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNurse>
          }
          groupBy: {
            args: Prisma.NurseGroupByArgs<ExtArgs>
            result: $Utils.Optional<NurseGroupByOutputType>[]
          }
          count: {
            args: Prisma.NurseCountArgs<ExtArgs>
            result: $Utils.Optional<NurseCountAggregateOutputType> | number
          }
        }
      }
      Doctor: {
        payload: Prisma.$DoctorPayload<ExtArgs>
        fields: Prisma.DoctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findFirst: {
            args: Prisma.DoctorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findMany: {
            args: Prisma.DoctorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          create: {
            args: Prisma.DoctorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          createMany: {
            args: Prisma.DoctorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          delete: {
            args: Prisma.DoctorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          update: {
            args: Prisma.DoctorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DoctorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.DoctorGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
      DoctorNurse: {
        payload: Prisma.$DoctorNursePayload<ExtArgs>
        fields: Prisma.DoctorNurseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorNurseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorNurseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload>
          }
          findFirst: {
            args: Prisma.DoctorNurseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorNurseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload>
          }
          findMany: {
            args: Prisma.DoctorNurseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload>[]
          }
          create: {
            args: Prisma.DoctorNurseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload>
          }
          createMany: {
            args: Prisma.DoctorNurseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorNurseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload>[]
          }
          delete: {
            args: Prisma.DoctorNurseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload>
          }
          update: {
            args: Prisma.DoctorNurseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload>
          }
          deleteMany: {
            args: Prisma.DoctorNurseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorNurseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DoctorNurseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorNursePayload>
          }
          aggregate: {
            args: Prisma.DoctorNurseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorNurse>
          }
          groupBy: {
            args: Prisma.DoctorNurseGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorNurseGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorNurseCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorNurseCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      NurseServiceRequest: {
        payload: Prisma.$NurseServiceRequestPayload<ExtArgs>
        fields: Prisma.NurseServiceRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NurseServiceRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NurseServiceRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload>
          }
          findFirst: {
            args: Prisma.NurseServiceRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NurseServiceRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload>
          }
          findMany: {
            args: Prisma.NurseServiceRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload>[]
          }
          create: {
            args: Prisma.NurseServiceRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload>
          }
          createMany: {
            args: Prisma.NurseServiceRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NurseServiceRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload>[]
          }
          delete: {
            args: Prisma.NurseServiceRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload>
          }
          update: {
            args: Prisma.NurseServiceRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload>
          }
          deleteMany: {
            args: Prisma.NurseServiceRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NurseServiceRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NurseServiceRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseServiceRequestPayload>
          }
          aggregate: {
            args: Prisma.NurseServiceRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNurseServiceRequest>
          }
          groupBy: {
            args: Prisma.NurseServiceRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<NurseServiceRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.NurseServiceRequestCountArgs<ExtArgs>
            result: $Utils.Optional<NurseServiceRequestCountAggregateOutputType> | number
          }
        }
      }
      DoctorPatientRequest: {
        payload: Prisma.$DoctorPatientRequestPayload<ExtArgs>
        fields: Prisma.DoctorPatientRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorPatientRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorPatientRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload>
          }
          findFirst: {
            args: Prisma.DoctorPatientRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorPatientRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload>
          }
          findMany: {
            args: Prisma.DoctorPatientRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload>[]
          }
          create: {
            args: Prisma.DoctorPatientRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload>
          }
          createMany: {
            args: Prisma.DoctorPatientRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorPatientRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload>[]
          }
          delete: {
            args: Prisma.DoctorPatientRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload>
          }
          update: {
            args: Prisma.DoctorPatientRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload>
          }
          deleteMany: {
            args: Prisma.DoctorPatientRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorPatientRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DoctorPatientRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientRequestPayload>
          }
          aggregate: {
            args: Prisma.DoctorPatientRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorPatientRequest>
          }
          groupBy: {
            args: Prisma.DoctorPatientRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorPatientRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorPatientRequestCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorPatientRequestCountAggregateOutputType> | number
          }
        }
      }
      DoctorPatient: {
        payload: Prisma.$DoctorPatientPayload<ExtArgs>
        fields: Prisma.DoctorPatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorPatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorPatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload>
          }
          findFirst: {
            args: Prisma.DoctorPatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorPatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload>
          }
          findMany: {
            args: Prisma.DoctorPatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload>[]
          }
          create: {
            args: Prisma.DoctorPatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload>
          }
          createMany: {
            args: Prisma.DoctorPatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorPatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload>[]
          }
          delete: {
            args: Prisma.DoctorPatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload>
          }
          update: {
            args: Prisma.DoctorPatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload>
          }
          deleteMany: {
            args: Prisma.DoctorPatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorPatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DoctorPatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPatientPayload>
          }
          aggregate: {
            args: Prisma.DoctorPatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorPatient>
          }
          groupBy: {
            args: Prisma.DoctorPatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorPatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorPatientCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorPatientCountAggregateOutputType> | number
          }
        }
      }
      Pharmacy: {
        payload: Prisma.$PharmacyPayload<ExtArgs>
        fields: Prisma.PharmacyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PharmacyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PharmacyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload>
          }
          findFirst: {
            args: Prisma.PharmacyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PharmacyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload>
          }
          findMany: {
            args: Prisma.PharmacyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload>[]
          }
          create: {
            args: Prisma.PharmacyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload>
          }
          createMany: {
            args: Prisma.PharmacyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PharmacyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload>[]
          }
          delete: {
            args: Prisma.PharmacyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload>
          }
          update: {
            args: Prisma.PharmacyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload>
          }
          deleteMany: {
            args: Prisma.PharmacyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PharmacyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PharmacyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyPayload>
          }
          aggregate: {
            args: Prisma.PharmacyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePharmacy>
          }
          groupBy: {
            args: Prisma.PharmacyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PharmacyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PharmacyCountArgs<ExtArgs>
            result: $Utils.Optional<PharmacyCountAggregateOutputType> | number
          }
        }
      }
      Medicine: {
        payload: Prisma.$MedicinePayload<ExtArgs>
        fields: Prisma.MedicineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          findFirst: {
            args: Prisma.MedicineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          findMany: {
            args: Prisma.MedicineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>[]
          }
          create: {
            args: Prisma.MedicineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          createMany: {
            args: Prisma.MedicineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>[]
          }
          delete: {
            args: Prisma.MedicineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          update: {
            args: Prisma.MedicineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          deleteMany: {
            args: Prisma.MedicineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MedicineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          aggregate: {
            args: Prisma.MedicineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicine>
          }
          groupBy: {
            args: Prisma.MedicineGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicineGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicineCountArgs<ExtArgs>
            result: $Utils.Optional<MedicineCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Prescription: {
        payload: Prisma.$PrescriptionPayload<ExtArgs>
        fields: Prisma.PrescriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrescriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrescriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          findFirst: {
            args: Prisma.PrescriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrescriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          findMany: {
            args: Prisma.PrescriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>[]
          }
          create: {
            args: Prisma.PrescriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          createMany: {
            args: Prisma.PrescriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrescriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>[]
          }
          delete: {
            args: Prisma.PrescriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          update: {
            args: Prisma.PrescriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          deleteMany: {
            args: Prisma.PrescriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrescriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PrescriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          aggregate: {
            args: Prisma.PrescriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrescription>
          }
          groupBy: {
            args: Prisma.PrescriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrescriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrescriptionCountArgs<ExtArgs>
            result: $Utils.Optional<PrescriptionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      NotificationRead: {
        payload: Prisma.$NotificationReadPayload<ExtArgs>
        fields: Prisma.NotificationReadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationReadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationReadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload>
          }
          findFirst: {
            args: Prisma.NotificationReadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationReadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload>
          }
          findMany: {
            args: Prisma.NotificationReadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload>[]
          }
          create: {
            args: Prisma.NotificationReadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload>
          }
          createMany: {
            args: Prisma.NotificationReadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationReadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload>[]
          }
          delete: {
            args: Prisma.NotificationReadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload>
          }
          update: {
            args: Prisma.NotificationReadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload>
          }
          deleteMany: {
            args: Prisma.NotificationReadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationReadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationReadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationReadPayload>
          }
          aggregate: {
            args: Prisma.NotificationReadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationRead>
          }
          groupBy: {
            args: Prisma.NotificationReadGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationReadGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationReadCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationReadCountAggregateOutputType> | number
          }
        }
      }
      MedicalRecord: {
        payload: Prisma.$MedicalRecordPayload<ExtArgs>
        fields: Prisma.MedicalRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          findFirst: {
            args: Prisma.MedicalRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          findMany: {
            args: Prisma.MedicalRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>[]
          }
          create: {
            args: Prisma.MedicalRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          createMany: {
            args: Prisma.MedicalRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicalRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>[]
          }
          delete: {
            args: Prisma.MedicalRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          update: {
            args: Prisma.MedicalRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          deleteMany: {
            args: Prisma.MedicalRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MedicalRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          aggregate: {
            args: Prisma.MedicalRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicalRecord>
          }
          groupBy: {
            args: Prisma.MedicalRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicalRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalRecordCountArgs<ExtArgs>
            result: $Utils.Optional<MedicalRecordCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      NurseVisit: {
        payload: Prisma.$NurseVisitPayload<ExtArgs>
        fields: Prisma.NurseVisitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NurseVisitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NurseVisitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload>
          }
          findFirst: {
            args: Prisma.NurseVisitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NurseVisitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload>
          }
          findMany: {
            args: Prisma.NurseVisitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload>[]
          }
          create: {
            args: Prisma.NurseVisitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload>
          }
          createMany: {
            args: Prisma.NurseVisitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NurseVisitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload>[]
          }
          delete: {
            args: Prisma.NurseVisitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload>
          }
          update: {
            args: Prisma.NurseVisitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload>
          }
          deleteMany: {
            args: Prisma.NurseVisitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NurseVisitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NurseVisitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NurseVisitPayload>
          }
          aggregate: {
            args: Prisma.NurseVisitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNurseVisit>
          }
          groupBy: {
            args: Prisma.NurseVisitGroupByArgs<ExtArgs>
            result: $Utils.Optional<NurseVisitGroupByOutputType>[]
          }
          count: {
            args: Prisma.NurseVisitCountArgs<ExtArgs>
            result: $Utils.Optional<NurseVisitCountAggregateOutputType> | number
          }
        }
      }
      ChatRoom: {
        payload: Prisma.$ChatRoomPayload<ExtArgs>
        fields: Prisma.ChatRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findFirst: {
            args: Prisma.ChatRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findMany: {
            args: Prisma.ChatRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          create: {
            args: Prisma.ChatRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          createMany: {
            args: Prisma.ChatRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatRoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          delete: {
            args: Prisma.ChatRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          update: {
            args: Prisma.ChatRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          deleteMany: {
            args: Prisma.ChatRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          aggregate: {
            args: Prisma.ChatRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatRoom>
          }
          groupBy: {
            args: Prisma.ChatRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatRoomCountArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomCountAggregateOutputType> | number
          }
        }
      }
      ChatRoomPatientNurse: {
        payload: Prisma.$ChatRoomPatientNursePayload<ExtArgs>
        fields: Prisma.ChatRoomPatientNurseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatRoomPatientNurseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatRoomPatientNurseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload>
          }
          findFirst: {
            args: Prisma.ChatRoomPatientNurseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatRoomPatientNurseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload>
          }
          findMany: {
            args: Prisma.ChatRoomPatientNurseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload>[]
          }
          create: {
            args: Prisma.ChatRoomPatientNurseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload>
          }
          createMany: {
            args: Prisma.ChatRoomPatientNurseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatRoomPatientNurseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload>[]
          }
          delete: {
            args: Prisma.ChatRoomPatientNurseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload>
          }
          update: {
            args: Prisma.ChatRoomPatientNurseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload>
          }
          deleteMany: {
            args: Prisma.ChatRoomPatientNurseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatRoomPatientNurseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatRoomPatientNurseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPatientNursePayload>
          }
          aggregate: {
            args: Prisma.ChatRoomPatientNurseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatRoomPatientNurse>
          }
          groupBy: {
            args: Prisma.ChatRoomPatientNurseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomPatientNurseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatRoomPatientNurseCountArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomPatientNurseCountAggregateOutputType> | number
          }
        }
      }
      ChatRoomDoctorNursePatient: {
        payload: Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>
        fields: Prisma.ChatRoomDoctorNursePatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatRoomDoctorNursePatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatRoomDoctorNursePatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload>
          }
          findFirst: {
            args: Prisma.ChatRoomDoctorNursePatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatRoomDoctorNursePatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload>
          }
          findMany: {
            args: Prisma.ChatRoomDoctorNursePatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload>[]
          }
          create: {
            args: Prisma.ChatRoomDoctorNursePatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload>
          }
          createMany: {
            args: Prisma.ChatRoomDoctorNursePatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatRoomDoctorNursePatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload>[]
          }
          delete: {
            args: Prisma.ChatRoomDoctorNursePatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload>
          }
          update: {
            args: Prisma.ChatRoomDoctorNursePatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload>
          }
          deleteMany: {
            args: Prisma.ChatRoomDoctorNursePatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatRoomDoctorNursePatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatRoomDoctorNursePatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomDoctorNursePatientPayload>
          }
          aggregate: {
            args: Prisma.ChatRoomDoctorNursePatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatRoomDoctorNursePatient>
          }
          groupBy: {
            args: Prisma.ChatRoomDoctorNursePatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomDoctorNursePatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatRoomDoctorNursePatientCountArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomDoctorNursePatientCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    medicalRecord: number
    prescriptions: number
    nurseVisits: number
    doctorRequests: number
    doctors: number
    nurseServiceRequests: number
    chatRooms: number
    scheduledTasks: number
    ChatRoomDoctorNursePatient: number
    chatRoomPatients: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicalRecord?: boolean | PatientCountOutputTypeCountMedicalRecordArgs
    prescriptions?: boolean | PatientCountOutputTypeCountPrescriptionsArgs
    nurseVisits?: boolean | PatientCountOutputTypeCountNurseVisitsArgs
    doctorRequests?: boolean | PatientCountOutputTypeCountDoctorRequestsArgs
    doctors?: boolean | PatientCountOutputTypeCountDoctorsArgs
    nurseServiceRequests?: boolean | PatientCountOutputTypeCountNurseServiceRequestsArgs
    chatRooms?: boolean | PatientCountOutputTypeCountChatRoomsArgs
    scheduledTasks?: boolean | PatientCountOutputTypeCountScheduledTasksArgs
    ChatRoomDoctorNursePatient?: boolean | PatientCountOutputTypeCountChatRoomDoctorNursePatientArgs
    chatRoomPatients?: boolean | PatientCountOutputTypeCountChatRoomPatientsArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMedicalRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPrescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescriptionWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountNurseVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NurseVisitWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountDoctorRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorPatientRequestWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountDoctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorPatientWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountNurseServiceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NurseServiceRequestWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountChatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountScheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountChatRoomDoctorNursePatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomDoctorNursePatientWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountChatRoomPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomPatientNurseWhereInput
  }


  /**
   * Count Type NurseCountOutputType
   */

  export type NurseCountOutputType = {
    nurseVisits: number
    medicalRecords: number
    serviceRequests: number
    nurseChats: number
    ChatRoomDoctorNursePatient: number
    doctors: number
    doctorNurses: number
    scheduledTasks: number
    tasks: number
  }

  export type NurseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nurseVisits?: boolean | NurseCountOutputTypeCountNurseVisitsArgs
    medicalRecords?: boolean | NurseCountOutputTypeCountMedicalRecordsArgs
    serviceRequests?: boolean | NurseCountOutputTypeCountServiceRequestsArgs
    nurseChats?: boolean | NurseCountOutputTypeCountNurseChatsArgs
    ChatRoomDoctorNursePatient?: boolean | NurseCountOutputTypeCountChatRoomDoctorNursePatientArgs
    doctors?: boolean | NurseCountOutputTypeCountDoctorsArgs
    doctorNurses?: boolean | NurseCountOutputTypeCountDoctorNursesArgs
    scheduledTasks?: boolean | NurseCountOutputTypeCountScheduledTasksArgs
    tasks?: boolean | NurseCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseCountOutputType
     */
    select?: NurseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeCountNurseVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NurseVisitWhereInput
  }

  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeCountMedicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }

  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeCountServiceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NurseServiceRequestWhereInput
  }

  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeCountNurseChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomPatientNurseWhereInput
  }

  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeCountChatRoomDoctorNursePatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomDoctorNursePatientWhereInput
  }

  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeCountDoctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
  }

  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeCountDoctorNursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorNurseWhereInput
  }

  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeCountScheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * NurseCountOutputType without action
   */
  export type NurseCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type DoctorCountOutputType
   */

  export type DoctorCountOutputType = {
    patients: number
    patientRequests: number
    medicalRecords: number
    prescriptions: number
    chatRooms: number
    ChatRoomDoctorNursePatient: number
    nurses: number
    doctorNurses: number
    tasks: number
    scheduledTasks: number
  }

  export type DoctorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patients?: boolean | DoctorCountOutputTypeCountPatientsArgs
    patientRequests?: boolean | DoctorCountOutputTypeCountPatientRequestsArgs
    medicalRecords?: boolean | DoctorCountOutputTypeCountMedicalRecordsArgs
    prescriptions?: boolean | DoctorCountOutputTypeCountPrescriptionsArgs
    chatRooms?: boolean | DoctorCountOutputTypeCountChatRoomsArgs
    ChatRoomDoctorNursePatient?: boolean | DoctorCountOutputTypeCountChatRoomDoctorNursePatientArgs
    nurses?: boolean | DoctorCountOutputTypeCountNursesArgs
    doctorNurses?: boolean | DoctorCountOutputTypeCountDoctorNursesArgs
    tasks?: boolean | DoctorCountOutputTypeCountTasksArgs
    scheduledTasks?: boolean | DoctorCountOutputTypeCountScheduledTasksArgs
  }

  // Custom InputTypes
  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     */
    select?: DoctorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorPatientWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountPatientRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorPatientRequestWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountMedicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountPrescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescriptionWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountChatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountChatRoomDoctorNursePatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomDoctorNursePatientWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountNursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NurseWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountDoctorNursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorNurseWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountScheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    scheduledTasks: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scheduledTasks?: boolean | TaskCountOutputTypeCountScheduledTasksArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountScheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }


  /**
   * Count Type PharmacyCountOutputType
   */

  export type PharmacyCountOutputType = {
    prescriptions: number
    medicines: number
  }

  export type PharmacyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescriptions?: boolean | PharmacyCountOutputTypeCountPrescriptionsArgs
    medicines?: boolean | PharmacyCountOutputTypeCountMedicinesArgs
  }

  // Custom InputTypes
  /**
   * PharmacyCountOutputType without action
   */
  export type PharmacyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyCountOutputType
     */
    select?: PharmacyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PharmacyCountOutputType without action
   */
  export type PharmacyCountOutputTypeCountPrescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescriptionWhereInput
  }

  /**
   * PharmacyCountOutputType without action
   */
  export type PharmacyCountOutputTypeCountMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicineWhereInput
  }


  /**
   * Count Type MedicineCountOutputType
   */

  export type MedicineCountOutputType = {
    prescriptions: number
    pharmacies: number
  }

  export type MedicineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescriptions?: boolean | MedicineCountOutputTypeCountPrescriptionsArgs
    pharmacies?: boolean | MedicineCountOutputTypeCountPharmaciesArgs
  }

  // Custom InputTypes
  /**
   * MedicineCountOutputType without action
   */
  export type MedicineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicineCountOutputType
     */
    select?: MedicineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicineCountOutputType without action
   */
  export type MedicineCountOutputTypeCountPrescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescriptionWhereInput
  }

  /**
   * MedicineCountOutputType without action
   */
  export type MedicineCountOutputTypeCountPharmaciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PharmacyWhereInput
  }


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    reports: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | AdminCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type NotificationCountOutputType
   */

  export type NotificationCountOutputType = {
    readBy: number
  }

  export type NotificationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    readBy?: boolean | NotificationCountOutputTypeCountReadByArgs
  }

  // Custom InputTypes
  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCountOutputType
     */
    select?: NotificationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeCountReadByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationReadWhereInput
  }


  /**
   * Count Type MedicalRecordCountOutputType
   */

  export type MedicalRecordCountOutputType = {
    nurses: number
    doctors: number
  }

  export type MedicalRecordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nurses?: boolean | MedicalRecordCountOutputTypeCountNursesArgs
    doctors?: boolean | MedicalRecordCountOutputTypeCountDoctorsArgs
  }

  // Custom InputTypes
  /**
   * MedicalRecordCountOutputType without action
   */
  export type MedicalRecordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordCountOutputType
     */
    select?: MedicalRecordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicalRecordCountOutputType without action
   */
  export type MedicalRecordCountOutputTypeCountNursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NurseWhereInput
  }

  /**
   * MedicalRecordCountOutputType without action
   */
  export type MedicalRecordCountOutputTypeCountDoctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
  }


  /**
   * Count Type ChatRoomCountOutputType
   */

  export type ChatRoomCountOutputType = {
    messages: number
  }

  export type ChatRoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatRoomCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomCountOutputType
     */
    select?: ChatRoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type ChatRoomPatientNurseCountOutputType
   */

  export type ChatRoomPatientNurseCountOutputType = {
    messages: number
  }

  export type ChatRoomPatientNurseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatRoomPatientNurseCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatRoomPatientNurseCountOutputType without action
   */
  export type ChatRoomPatientNurseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurseCountOutputType
     */
    select?: ChatRoomPatientNurseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatRoomPatientNurseCountOutputType without action
   */
  export type ChatRoomPatientNurseCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type ChatRoomDoctorNursePatientCountOutputType
   */

  export type ChatRoomDoctorNursePatientCountOutputType = {
    messages: number
  }

  export type ChatRoomDoctorNursePatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatRoomDoctorNursePatientCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatRoomDoctorNursePatientCountOutputType without action
   */
  export type ChatRoomDoctorNursePatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatientCountOutputType
     */
    select?: ChatRoomDoctorNursePatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatRoomDoctorNursePatientCountOutputType without action
   */
  export type ChatRoomDoctorNursePatientCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstname: string | null
    lastname: string | null
    password: string | null
    role: $Enums.Role | null
    telephoneNumber: string | null
    dateOfBirth: Date | null
    gender: string | null
    address: string | null
    profilePhoto: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isEmailVerified: boolean | null
    emailVerificationToken: string | null
    emailVerificationExpires: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstname: string | null
    lastname: string | null
    password: string | null
    role: $Enums.Role | null
    telephoneNumber: string | null
    dateOfBirth: Date | null
    gender: string | null
    address: string | null
    profilePhoto: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isEmailVerified: boolean | null
    emailVerificationToken: string | null
    emailVerificationExpires: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstname: number
    lastname: number
    password: number
    role: number
    telephoneNumber: number
    dateOfBirth: number
    gender: number
    address: number
    profilePhoto: number
    createdAt: number
    updatedAt: number
    isEmailVerified: number
    emailVerificationToken: number
    emailVerificationExpires: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstname?: true
    lastname?: true
    password?: true
    role?: true
    telephoneNumber?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    profilePhoto?: true
    createdAt?: true
    updatedAt?: true
    isEmailVerified?: true
    emailVerificationToken?: true
    emailVerificationExpires?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstname?: true
    lastname?: true
    password?: true
    role?: true
    telephoneNumber?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    profilePhoto?: true
    createdAt?: true
    updatedAt?: true
    isEmailVerified?: true
    emailVerificationToken?: true
    emailVerificationExpires?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstname?: true
    lastname?: true
    password?: true
    role?: true
    telephoneNumber?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    profilePhoto?: true
    createdAt?: true
    updatedAt?: true
    isEmailVerified?: true
    emailVerificationToken?: true
    emailVerificationExpires?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber: string | null
    dateOfBirth: Date | null
    gender: string | null
    address: string | null
    profilePhoto: string | null
    createdAt: Date
    updatedAt: Date
    isEmailVerified: boolean
    emailVerificationToken: string | null
    emailVerificationExpires: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstname?: boolean
    lastname?: boolean
    password?: boolean
    role?: boolean
    telephoneNumber?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    profilePhoto?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isEmailVerified?: boolean
    emailVerificationToken?: boolean
    emailVerificationExpires?: boolean
    patient?: boolean | User$patientArgs<ExtArgs>
    nurse?: boolean | User$nurseArgs<ExtArgs>
    doctor?: boolean | User$doctorArgs<ExtArgs>
    pharmacy?: boolean | User$pharmacyArgs<ExtArgs>
    admin?: boolean | User$adminArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    notificationReads?: boolean | User$notificationReadsArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstname?: boolean
    lastname?: boolean
    password?: boolean
    role?: boolean
    telephoneNumber?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    profilePhoto?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isEmailVerified?: boolean
    emailVerificationToken?: boolean
    emailVerificationExpires?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstname?: boolean
    lastname?: boolean
    password?: boolean
    role?: boolean
    telephoneNumber?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    profilePhoto?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isEmailVerified?: boolean
    emailVerificationToken?: boolean
    emailVerificationExpires?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | User$patientArgs<ExtArgs>
    nurse?: boolean | User$nurseArgs<ExtArgs>
    doctor?: boolean | User$doctorArgs<ExtArgs>
    pharmacy?: boolean | User$pharmacyArgs<ExtArgs>
    admin?: boolean | User$adminArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    notificationReads?: boolean | User$notificationReadsArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs> | null
      nurse: Prisma.$NursePayload<ExtArgs> | null
      doctor: Prisma.$DoctorPayload<ExtArgs> | null
      pharmacy: Prisma.$PharmacyPayload<ExtArgs> | null
      admin: Prisma.$AdminPayload<ExtArgs> | null
      notifications: Prisma.$NotificationPayload<ExtArgs> | null
      notificationReads: Prisma.$NotificationReadPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstname: string
      lastname: string
      password: string
      role: $Enums.Role
      telephoneNumber: string | null
      dateOfBirth: Date | null
      gender: string | null
      address: string | null
      profilePhoto: string | null
      createdAt: Date
      updatedAt: Date
      isEmailVerified: boolean
      emailVerificationToken: string | null
      emailVerificationExpires: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends User$patientArgs<ExtArgs> = {}>(args?: Subset<T, User$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    nurse<T extends User$nurseArgs<ExtArgs> = {}>(args?: Subset<T, User$nurseArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    doctor<T extends User$doctorArgs<ExtArgs> = {}>(args?: Subset<T, User$doctorArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    pharmacy<T extends User$pharmacyArgs<ExtArgs> = {}>(args?: Subset<T, User$pharmacyArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    admin<T extends User$adminArgs<ExtArgs> = {}>(args?: Subset<T, User$adminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    notificationReads<T extends User$notificationReadsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationReadsArgs<ExtArgs>>): Prisma__NotificationReadClient<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly telephoneNumber: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly gender: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly profilePhoto: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isEmailVerified: FieldRef<"User", 'Boolean'>
    readonly emailVerificationToken: FieldRef<"User", 'String'>
    readonly emailVerificationExpires: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.patient
   */
  export type User$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * User.nurse
   */
  export type User$nurseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    where?: NurseWhereInput
  }

  /**
   * User.doctor
   */
  export type User$doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
  }

  /**
   * User.pharmacy
   */
  export type User$pharmacyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    where?: PharmacyWhereInput
  }

  /**
   * User.admin
   */
  export type User$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
  }

  /**
   * User.notificationReads
   */
  export type User$notificationReadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    where?: NotificationReadWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    userId: string | null
    allergies: string | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    emergencyContactRelationship: string | null
    insuranceInfo: string | null
    preferredPharmacy: string | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    allergies: string | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    emergencyContactRelationship: string | null
    insuranceInfo: string | null
    preferredPharmacy: string | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    userId: number
    allergies: number
    emergencyContactName: number
    emergencyContactPhone: number
    emergencyContactRelationship: number
    insuranceInfo: number
    preferredPharmacy: number
    _all: number
  }


  export type PatientMinAggregateInputType = {
    id?: true
    userId?: true
    allergies?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    emergencyContactRelationship?: true
    insuranceInfo?: true
    preferredPharmacy?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    userId?: true
    allergies?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    emergencyContactRelationship?: true
    insuranceInfo?: true
    preferredPharmacy?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    userId?: true
    allergies?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    emergencyContactRelationship?: true
    insuranceInfo?: true
    preferredPharmacy?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    userId: string
    allergies: string | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    emergencyContactRelationship: string | null
    insuranceInfo: string | null
    preferredPharmacy: string | null
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    allergies?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactRelationship?: boolean
    insuranceInfo?: boolean
    preferredPharmacy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    medicalRecord?: boolean | Patient$medicalRecordArgs<ExtArgs>
    prescriptions?: boolean | Patient$prescriptionsArgs<ExtArgs>
    nurseVisits?: boolean | Patient$nurseVisitsArgs<ExtArgs>
    doctorRequests?: boolean | Patient$doctorRequestsArgs<ExtArgs>
    doctors?: boolean | Patient$doctorsArgs<ExtArgs>
    nurseServiceRequests?: boolean | Patient$nurseServiceRequestsArgs<ExtArgs>
    chatRooms?: boolean | Patient$chatRoomsArgs<ExtArgs>
    scheduledTasks?: boolean | Patient$scheduledTasksArgs<ExtArgs>
    ChatRoomDoctorNursePatient?: boolean | Patient$ChatRoomDoctorNursePatientArgs<ExtArgs>
    chatRoomPatients?: boolean | Patient$chatRoomPatientsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    allergies?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactRelationship?: boolean
    insuranceInfo?: boolean
    preferredPharmacy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    userId?: boolean
    allergies?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactRelationship?: boolean
    insuranceInfo?: boolean
    preferredPharmacy?: boolean
  }

  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    medicalRecord?: boolean | Patient$medicalRecordArgs<ExtArgs>
    prescriptions?: boolean | Patient$prescriptionsArgs<ExtArgs>
    nurseVisits?: boolean | Patient$nurseVisitsArgs<ExtArgs>
    doctorRequests?: boolean | Patient$doctorRequestsArgs<ExtArgs>
    doctors?: boolean | Patient$doctorsArgs<ExtArgs>
    nurseServiceRequests?: boolean | Patient$nurseServiceRequestsArgs<ExtArgs>
    chatRooms?: boolean | Patient$chatRoomsArgs<ExtArgs>
    scheduledTasks?: boolean | Patient$scheduledTasksArgs<ExtArgs>
    ChatRoomDoctorNursePatient?: boolean | Patient$ChatRoomDoctorNursePatientArgs<ExtArgs>
    chatRoomPatients?: boolean | Patient$chatRoomPatientsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      medicalRecord: Prisma.$MedicalRecordPayload<ExtArgs>[]
      prescriptions: Prisma.$PrescriptionPayload<ExtArgs>[]
      nurseVisits: Prisma.$NurseVisitPayload<ExtArgs>[]
      doctorRequests: Prisma.$DoctorPatientRequestPayload<ExtArgs>[]
      doctors: Prisma.$DoctorPatientPayload<ExtArgs>[]
      nurseServiceRequests: Prisma.$NurseServiceRequestPayload<ExtArgs>[]
      chatRooms: Prisma.$ChatRoomPayload<ExtArgs>[]
      scheduledTasks: Prisma.$SchedulePayload<ExtArgs>[]
      ChatRoomDoctorNursePatient: Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>[]
      chatRoomPatients: Prisma.$ChatRoomPatientNursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      allergies: string | null
      emergencyContactName: string | null
      emergencyContactPhone: string | null
      emergencyContactRelationship: string | null
      insuranceInfo: string | null
      preferredPharmacy: string | null
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    medicalRecord<T extends Patient$medicalRecordArgs<ExtArgs> = {}>(args?: Subset<T, Patient$medicalRecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany"> | Null>
    prescriptions<T extends Patient$prescriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$prescriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findMany"> | Null>
    nurseVisits<T extends Patient$nurseVisitsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$nurseVisitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "findMany"> | Null>
    doctorRequests<T extends Patient$doctorRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$doctorRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "findMany"> | Null>
    doctors<T extends Patient$doctorsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$doctorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "findMany"> | Null>
    nurseServiceRequests<T extends Patient$nurseServiceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$nurseServiceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "findMany"> | Null>
    chatRooms<T extends Patient$chatRoomsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$chatRoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany"> | Null>
    scheduledTasks<T extends Patient$scheduledTasksArgs<ExtArgs> = {}>(args?: Subset<T, Patient$scheduledTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    ChatRoomDoctorNursePatient<T extends Patient$ChatRoomDoctorNursePatientArgs<ExtArgs> = {}>(args?: Subset<T, Patient$ChatRoomDoctorNursePatientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "findMany"> | Null>
    chatRoomPatients<T extends Patient$chatRoomPatientsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$chatRoomPatientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */ 
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly userId: FieldRef<"Patient", 'String'>
    readonly allergies: FieldRef<"Patient", 'String'>
    readonly emergencyContactName: FieldRef<"Patient", 'String'>
    readonly emergencyContactPhone: FieldRef<"Patient", 'String'>
    readonly emergencyContactRelationship: FieldRef<"Patient", 'String'>
    readonly insuranceInfo: FieldRef<"Patient", 'String'>
    readonly preferredPharmacy: FieldRef<"Patient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
  }

  /**
   * Patient.medicalRecord
   */
  export type Patient$medicalRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * Patient.prescriptions
   */
  export type Patient$prescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    where?: PrescriptionWhereInput
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    cursor?: PrescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Patient.nurseVisits
   */
  export type Patient$nurseVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    where?: NurseVisitWhereInput
    orderBy?: NurseVisitOrderByWithRelationInput | NurseVisitOrderByWithRelationInput[]
    cursor?: NurseVisitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NurseVisitScalarFieldEnum | NurseVisitScalarFieldEnum[]
  }

  /**
   * Patient.doctorRequests
   */
  export type Patient$doctorRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    where?: DoctorPatientRequestWhereInput
    orderBy?: DoctorPatientRequestOrderByWithRelationInput | DoctorPatientRequestOrderByWithRelationInput[]
    cursor?: DoctorPatientRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorPatientRequestScalarFieldEnum | DoctorPatientRequestScalarFieldEnum[]
  }

  /**
   * Patient.doctors
   */
  export type Patient$doctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    where?: DoctorPatientWhereInput
    orderBy?: DoctorPatientOrderByWithRelationInput | DoctorPatientOrderByWithRelationInput[]
    cursor?: DoctorPatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorPatientScalarFieldEnum | DoctorPatientScalarFieldEnum[]
  }

  /**
   * Patient.nurseServiceRequests
   */
  export type Patient$nurseServiceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    where?: NurseServiceRequestWhereInput
    orderBy?: NurseServiceRequestOrderByWithRelationInput | NurseServiceRequestOrderByWithRelationInput[]
    cursor?: NurseServiceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NurseServiceRequestScalarFieldEnum | NurseServiceRequestScalarFieldEnum[]
  }

  /**
   * Patient.chatRooms
   */
  export type Patient$chatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    cursor?: ChatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * Patient.scheduledTasks
   */
  export type Patient$scheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Patient.ChatRoomDoctorNursePatient
   */
  export type Patient$ChatRoomDoctorNursePatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    where?: ChatRoomDoctorNursePatientWhereInput
    orderBy?: ChatRoomDoctorNursePatientOrderByWithRelationInput | ChatRoomDoctorNursePatientOrderByWithRelationInput[]
    cursor?: ChatRoomDoctorNursePatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomDoctorNursePatientScalarFieldEnum | ChatRoomDoctorNursePatientScalarFieldEnum[]
  }

  /**
   * Patient.chatRoomPatients
   */
  export type Patient$chatRoomPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    where?: ChatRoomPatientNurseWhereInput
    orderBy?: ChatRoomPatientNurseOrderByWithRelationInput | ChatRoomPatientNurseOrderByWithRelationInput[]
    cursor?: ChatRoomPatientNurseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomPatientNurseScalarFieldEnum | ChatRoomPatientNurseScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model Nurse
   */

  export type AggregateNurse = {
    _count: NurseCountAggregateOutputType | null
    _avg: NurseAvgAggregateOutputType | null
    _sum: NurseSumAggregateOutputType | null
    _min: NurseMinAggregateOutputType | null
    _max: NurseMaxAggregateOutputType | null
  }

  export type NurseAvgAggregateOutputType = {
    rating: number | null
    yearsOfExperience: number | null
  }

  export type NurseSumAggregateOutputType = {
    rating: number | null
    yearsOfExperience: number | null
  }

  export type NurseMinAggregateOutputType = {
    id: string | null
    availability: boolean | null
    rating: number | null
    professionalLicenseNumber: string | null
    nursingCertification: string | null
    hospitalAffiliation: string | null
    yearsOfExperience: number | null
    userId: string | null
  }

  export type NurseMaxAggregateOutputType = {
    id: string | null
    availability: boolean | null
    rating: number | null
    professionalLicenseNumber: string | null
    nursingCertification: string | null
    hospitalAffiliation: string | null
    yearsOfExperience: number | null
    userId: string | null
  }

  export type NurseCountAggregateOutputType = {
    id: number
    availability: number
    rating: number
    professionalLicenseNumber: number
    nursingCertification: number
    hospitalAffiliation: number
    yearsOfExperience: number
    userId: number
    _all: number
  }


  export type NurseAvgAggregateInputType = {
    rating?: true
    yearsOfExperience?: true
  }

  export type NurseSumAggregateInputType = {
    rating?: true
    yearsOfExperience?: true
  }

  export type NurseMinAggregateInputType = {
    id?: true
    availability?: true
    rating?: true
    professionalLicenseNumber?: true
    nursingCertification?: true
    hospitalAffiliation?: true
    yearsOfExperience?: true
    userId?: true
  }

  export type NurseMaxAggregateInputType = {
    id?: true
    availability?: true
    rating?: true
    professionalLicenseNumber?: true
    nursingCertification?: true
    hospitalAffiliation?: true
    yearsOfExperience?: true
    userId?: true
  }

  export type NurseCountAggregateInputType = {
    id?: true
    availability?: true
    rating?: true
    professionalLicenseNumber?: true
    nursingCertification?: true
    hospitalAffiliation?: true
    yearsOfExperience?: true
    userId?: true
    _all?: true
  }

  export type NurseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nurse to aggregate.
     */
    where?: NurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nurses to fetch.
     */
    orderBy?: NurseOrderByWithRelationInput | NurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nurses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nurses
    **/
    _count?: true | NurseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NurseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NurseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NurseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NurseMaxAggregateInputType
  }

  export type GetNurseAggregateType<T extends NurseAggregateArgs> = {
        [P in keyof T & keyof AggregateNurse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNurse[P]>
      : GetScalarType<T[P], AggregateNurse[P]>
  }




  export type NurseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NurseWhereInput
    orderBy?: NurseOrderByWithAggregationInput | NurseOrderByWithAggregationInput[]
    by: NurseScalarFieldEnum[] | NurseScalarFieldEnum
    having?: NurseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NurseCountAggregateInputType | true
    _avg?: NurseAvgAggregateInputType
    _sum?: NurseSumAggregateInputType
    _min?: NurseMinAggregateInputType
    _max?: NurseMaxAggregateInputType
  }

  export type NurseGroupByOutputType = {
    id: string
    availability: boolean
    rating: number
    professionalLicenseNumber: string | null
    nursingCertification: string | null
    hospitalAffiliation: string | null
    yearsOfExperience: number | null
    userId: string
    _count: NurseCountAggregateOutputType | null
    _avg: NurseAvgAggregateOutputType | null
    _sum: NurseSumAggregateOutputType | null
    _min: NurseMinAggregateOutputType | null
    _max: NurseMaxAggregateOutputType | null
  }

  type GetNurseGroupByPayload<T extends NurseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NurseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NurseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NurseGroupByOutputType[P]>
            : GetScalarType<T[P], NurseGroupByOutputType[P]>
        }
      >
    >


  export type NurseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    availability?: boolean
    rating?: boolean
    professionalLicenseNumber?: boolean
    nursingCertification?: boolean
    hospitalAffiliation?: boolean
    yearsOfExperience?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    nurseVisits?: boolean | Nurse$nurseVisitsArgs<ExtArgs>
    medicalRecords?: boolean | Nurse$medicalRecordsArgs<ExtArgs>
    serviceRequests?: boolean | Nurse$serviceRequestsArgs<ExtArgs>
    nurseChats?: boolean | Nurse$nurseChatsArgs<ExtArgs>
    ChatRoomDoctorNursePatient?: boolean | Nurse$ChatRoomDoctorNursePatientArgs<ExtArgs>
    doctors?: boolean | Nurse$doctorsArgs<ExtArgs>
    doctorNurses?: boolean | Nurse$doctorNursesArgs<ExtArgs>
    scheduledTasks?: boolean | Nurse$scheduledTasksArgs<ExtArgs>
    tasks?: boolean | Nurse$tasksArgs<ExtArgs>
    _count?: boolean | NurseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nurse"]>

  export type NurseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    availability?: boolean
    rating?: boolean
    professionalLicenseNumber?: boolean
    nursingCertification?: boolean
    hospitalAffiliation?: boolean
    yearsOfExperience?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nurse"]>

  export type NurseSelectScalar = {
    id?: boolean
    availability?: boolean
    rating?: boolean
    professionalLicenseNumber?: boolean
    nursingCertification?: boolean
    hospitalAffiliation?: boolean
    yearsOfExperience?: boolean
    userId?: boolean
  }

  export type NurseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    nurseVisits?: boolean | Nurse$nurseVisitsArgs<ExtArgs>
    medicalRecords?: boolean | Nurse$medicalRecordsArgs<ExtArgs>
    serviceRequests?: boolean | Nurse$serviceRequestsArgs<ExtArgs>
    nurseChats?: boolean | Nurse$nurseChatsArgs<ExtArgs>
    ChatRoomDoctorNursePatient?: boolean | Nurse$ChatRoomDoctorNursePatientArgs<ExtArgs>
    doctors?: boolean | Nurse$doctorsArgs<ExtArgs>
    doctorNurses?: boolean | Nurse$doctorNursesArgs<ExtArgs>
    scheduledTasks?: boolean | Nurse$scheduledTasksArgs<ExtArgs>
    tasks?: boolean | Nurse$tasksArgs<ExtArgs>
    _count?: boolean | NurseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NurseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nurse"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      nurseVisits: Prisma.$NurseVisitPayload<ExtArgs>[]
      medicalRecords: Prisma.$MedicalRecordPayload<ExtArgs>[]
      serviceRequests: Prisma.$NurseServiceRequestPayload<ExtArgs>[]
      nurseChats: Prisma.$ChatRoomPatientNursePayload<ExtArgs>[]
      ChatRoomDoctorNursePatient: Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>[]
      doctors: Prisma.$DoctorPayload<ExtArgs>[]
      doctorNurses: Prisma.$DoctorNursePayload<ExtArgs>[]
      scheduledTasks: Prisma.$SchedulePayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      availability: boolean
      rating: number
      professionalLicenseNumber: string | null
      nursingCertification: string | null
      hospitalAffiliation: string | null
      yearsOfExperience: number | null
      userId: string
    }, ExtArgs["result"]["nurse"]>
    composites: {}
  }

  type NurseGetPayload<S extends boolean | null | undefined | NurseDefaultArgs> = $Result.GetResult<Prisma.$NursePayload, S>

  type NurseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NurseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NurseCountAggregateInputType | true
    }

  export interface NurseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nurse'], meta: { name: 'Nurse' } }
    /**
     * Find zero or one Nurse that matches the filter.
     * @param {NurseFindUniqueArgs} args - Arguments to find a Nurse
     * @example
     * // Get one Nurse
     * const nurse = await prisma.nurse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NurseFindUniqueArgs>(args: SelectSubset<T, NurseFindUniqueArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Nurse that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NurseFindUniqueOrThrowArgs} args - Arguments to find a Nurse
     * @example
     * // Get one Nurse
     * const nurse = await prisma.nurse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NurseFindUniqueOrThrowArgs>(args: SelectSubset<T, NurseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Nurse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseFindFirstArgs} args - Arguments to find a Nurse
     * @example
     * // Get one Nurse
     * const nurse = await prisma.nurse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NurseFindFirstArgs>(args?: SelectSubset<T, NurseFindFirstArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Nurse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseFindFirstOrThrowArgs} args - Arguments to find a Nurse
     * @example
     * // Get one Nurse
     * const nurse = await prisma.nurse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NurseFindFirstOrThrowArgs>(args?: SelectSubset<T, NurseFindFirstOrThrowArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Nurses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nurses
     * const nurses = await prisma.nurse.findMany()
     * 
     * // Get first 10 Nurses
     * const nurses = await prisma.nurse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nurseWithIdOnly = await prisma.nurse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NurseFindManyArgs>(args?: SelectSubset<T, NurseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Nurse.
     * @param {NurseCreateArgs} args - Arguments to create a Nurse.
     * @example
     * // Create one Nurse
     * const Nurse = await prisma.nurse.create({
     *   data: {
     *     // ... data to create a Nurse
     *   }
     * })
     * 
     */
    create<T extends NurseCreateArgs>(args: SelectSubset<T, NurseCreateArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Nurses.
     * @param {NurseCreateManyArgs} args - Arguments to create many Nurses.
     * @example
     * // Create many Nurses
     * const nurse = await prisma.nurse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NurseCreateManyArgs>(args?: SelectSubset<T, NurseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Nurses and returns the data saved in the database.
     * @param {NurseCreateManyAndReturnArgs} args - Arguments to create many Nurses.
     * @example
     * // Create many Nurses
     * const nurse = await prisma.nurse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Nurses and only return the `id`
     * const nurseWithIdOnly = await prisma.nurse.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NurseCreateManyAndReturnArgs>(args?: SelectSubset<T, NurseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Nurse.
     * @param {NurseDeleteArgs} args - Arguments to delete one Nurse.
     * @example
     * // Delete one Nurse
     * const Nurse = await prisma.nurse.delete({
     *   where: {
     *     // ... filter to delete one Nurse
     *   }
     * })
     * 
     */
    delete<T extends NurseDeleteArgs>(args: SelectSubset<T, NurseDeleteArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Nurse.
     * @param {NurseUpdateArgs} args - Arguments to update one Nurse.
     * @example
     * // Update one Nurse
     * const nurse = await prisma.nurse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NurseUpdateArgs>(args: SelectSubset<T, NurseUpdateArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Nurses.
     * @param {NurseDeleteManyArgs} args - Arguments to filter Nurses to delete.
     * @example
     * // Delete a few Nurses
     * const { count } = await prisma.nurse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NurseDeleteManyArgs>(args?: SelectSubset<T, NurseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nurses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nurses
     * const nurse = await prisma.nurse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NurseUpdateManyArgs>(args: SelectSubset<T, NurseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nurse.
     * @param {NurseUpsertArgs} args - Arguments to update or create a Nurse.
     * @example
     * // Update or create a Nurse
     * const nurse = await prisma.nurse.upsert({
     *   create: {
     *     // ... data to create a Nurse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nurse we want to update
     *   }
     * })
     */
    upsert<T extends NurseUpsertArgs>(args: SelectSubset<T, NurseUpsertArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Nurses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseCountArgs} args - Arguments to filter Nurses to count.
     * @example
     * // Count the number of Nurses
     * const count = await prisma.nurse.count({
     *   where: {
     *     // ... the filter for the Nurses we want to count
     *   }
     * })
    **/
    count<T extends NurseCountArgs>(
      args?: Subset<T, NurseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NurseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nurse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NurseAggregateArgs>(args: Subset<T, NurseAggregateArgs>): Prisma.PrismaPromise<GetNurseAggregateType<T>>

    /**
     * Group by Nurse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NurseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NurseGroupByArgs['orderBy'] }
        : { orderBy?: NurseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NurseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNurseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nurse model
   */
  readonly fields: NurseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nurse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NurseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    nurseVisits<T extends Nurse$nurseVisitsArgs<ExtArgs> = {}>(args?: Subset<T, Nurse$nurseVisitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "findMany"> | Null>
    medicalRecords<T extends Nurse$medicalRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Nurse$medicalRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany"> | Null>
    serviceRequests<T extends Nurse$serviceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Nurse$serviceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "findMany"> | Null>
    nurseChats<T extends Nurse$nurseChatsArgs<ExtArgs> = {}>(args?: Subset<T, Nurse$nurseChatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "findMany"> | Null>
    ChatRoomDoctorNursePatient<T extends Nurse$ChatRoomDoctorNursePatientArgs<ExtArgs> = {}>(args?: Subset<T, Nurse$ChatRoomDoctorNursePatientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "findMany"> | Null>
    doctors<T extends Nurse$doctorsArgs<ExtArgs> = {}>(args?: Subset<T, Nurse$doctorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany"> | Null>
    doctorNurses<T extends Nurse$doctorNursesArgs<ExtArgs> = {}>(args?: Subset<T, Nurse$doctorNursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "findMany"> | Null>
    scheduledTasks<T extends Nurse$scheduledTasksArgs<ExtArgs> = {}>(args?: Subset<T, Nurse$scheduledTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    tasks<T extends Nurse$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Nurse$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Nurse model
   */ 
  interface NurseFieldRefs {
    readonly id: FieldRef<"Nurse", 'String'>
    readonly availability: FieldRef<"Nurse", 'Boolean'>
    readonly rating: FieldRef<"Nurse", 'Float'>
    readonly professionalLicenseNumber: FieldRef<"Nurse", 'String'>
    readonly nursingCertification: FieldRef<"Nurse", 'String'>
    readonly hospitalAffiliation: FieldRef<"Nurse", 'String'>
    readonly yearsOfExperience: FieldRef<"Nurse", 'Int'>
    readonly userId: FieldRef<"Nurse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Nurse findUnique
   */
  export type NurseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    /**
     * Filter, which Nurse to fetch.
     */
    where: NurseWhereUniqueInput
  }

  /**
   * Nurse findUniqueOrThrow
   */
  export type NurseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    /**
     * Filter, which Nurse to fetch.
     */
    where: NurseWhereUniqueInput
  }

  /**
   * Nurse findFirst
   */
  export type NurseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    /**
     * Filter, which Nurse to fetch.
     */
    where?: NurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nurses to fetch.
     */
    orderBy?: NurseOrderByWithRelationInput | NurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nurses.
     */
    cursor?: NurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nurses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nurses.
     */
    distinct?: NurseScalarFieldEnum | NurseScalarFieldEnum[]
  }

  /**
   * Nurse findFirstOrThrow
   */
  export type NurseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    /**
     * Filter, which Nurse to fetch.
     */
    where?: NurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nurses to fetch.
     */
    orderBy?: NurseOrderByWithRelationInput | NurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nurses.
     */
    cursor?: NurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nurses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nurses.
     */
    distinct?: NurseScalarFieldEnum | NurseScalarFieldEnum[]
  }

  /**
   * Nurse findMany
   */
  export type NurseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    /**
     * Filter, which Nurses to fetch.
     */
    where?: NurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nurses to fetch.
     */
    orderBy?: NurseOrderByWithRelationInput | NurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nurses.
     */
    cursor?: NurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nurses.
     */
    skip?: number
    distinct?: NurseScalarFieldEnum | NurseScalarFieldEnum[]
  }

  /**
   * Nurse create
   */
  export type NurseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    /**
     * The data needed to create a Nurse.
     */
    data: XOR<NurseCreateInput, NurseUncheckedCreateInput>
  }

  /**
   * Nurse createMany
   */
  export type NurseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nurses.
     */
    data: NurseCreateManyInput | NurseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Nurse createManyAndReturn
   */
  export type NurseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Nurses.
     */
    data: NurseCreateManyInput | NurseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Nurse update
   */
  export type NurseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    /**
     * The data needed to update a Nurse.
     */
    data: XOR<NurseUpdateInput, NurseUncheckedUpdateInput>
    /**
     * Choose, which Nurse to update.
     */
    where: NurseWhereUniqueInput
  }

  /**
   * Nurse updateMany
   */
  export type NurseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nurses.
     */
    data: XOR<NurseUpdateManyMutationInput, NurseUncheckedUpdateManyInput>
    /**
     * Filter which Nurses to update
     */
    where?: NurseWhereInput
  }

  /**
   * Nurse upsert
   */
  export type NurseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    /**
     * The filter to search for the Nurse to update in case it exists.
     */
    where: NurseWhereUniqueInput
    /**
     * In case the Nurse found by the `where` argument doesn't exist, create a new Nurse with this data.
     */
    create: XOR<NurseCreateInput, NurseUncheckedCreateInput>
    /**
     * In case the Nurse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NurseUpdateInput, NurseUncheckedUpdateInput>
  }

  /**
   * Nurse delete
   */
  export type NurseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    /**
     * Filter which Nurse to delete.
     */
    where: NurseWhereUniqueInput
  }

  /**
   * Nurse deleteMany
   */
  export type NurseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nurses to delete
     */
    where?: NurseWhereInput
  }

  /**
   * Nurse.nurseVisits
   */
  export type Nurse$nurseVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    where?: NurseVisitWhereInput
    orderBy?: NurseVisitOrderByWithRelationInput | NurseVisitOrderByWithRelationInput[]
    cursor?: NurseVisitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NurseVisitScalarFieldEnum | NurseVisitScalarFieldEnum[]
  }

  /**
   * Nurse.medicalRecords
   */
  export type Nurse$medicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * Nurse.serviceRequests
   */
  export type Nurse$serviceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    where?: NurseServiceRequestWhereInput
    orderBy?: NurseServiceRequestOrderByWithRelationInput | NurseServiceRequestOrderByWithRelationInput[]
    cursor?: NurseServiceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NurseServiceRequestScalarFieldEnum | NurseServiceRequestScalarFieldEnum[]
  }

  /**
   * Nurse.nurseChats
   */
  export type Nurse$nurseChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    where?: ChatRoomPatientNurseWhereInput
    orderBy?: ChatRoomPatientNurseOrderByWithRelationInput | ChatRoomPatientNurseOrderByWithRelationInput[]
    cursor?: ChatRoomPatientNurseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomPatientNurseScalarFieldEnum | ChatRoomPatientNurseScalarFieldEnum[]
  }

  /**
   * Nurse.ChatRoomDoctorNursePatient
   */
  export type Nurse$ChatRoomDoctorNursePatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    where?: ChatRoomDoctorNursePatientWhereInput
    orderBy?: ChatRoomDoctorNursePatientOrderByWithRelationInput | ChatRoomDoctorNursePatientOrderByWithRelationInput[]
    cursor?: ChatRoomDoctorNursePatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomDoctorNursePatientScalarFieldEnum | ChatRoomDoctorNursePatientScalarFieldEnum[]
  }

  /**
   * Nurse.doctors
   */
  export type Nurse$doctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    cursor?: DoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Nurse.doctorNurses
   */
  export type Nurse$doctorNursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    where?: DoctorNurseWhereInput
    orderBy?: DoctorNurseOrderByWithRelationInput | DoctorNurseOrderByWithRelationInput[]
    cursor?: DoctorNurseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorNurseScalarFieldEnum | DoctorNurseScalarFieldEnum[]
  }

  /**
   * Nurse.scheduledTasks
   */
  export type Nurse$scheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Nurse.tasks
   */
  export type Nurse$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Nurse without action
   */
  export type NurseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
  }


  /**
   * Model Doctor
   */

  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorAvgAggregateOutputType = {
    rating: number | null
  }

  export type DoctorSumAggregateOutputType = {
    rating: number | null
  }

  export type DoctorMinAggregateOutputType = {
    id: string | null
    specialization: string | null
    availability: boolean | null
    rating: number | null
    professionalLicenseNumber: string | null
    medicalDiploma: string | null
    hospitalAffiliation: string | null
    experience: string | null
    userId: string | null
    deletedAt: Date | null
    isDeleted: boolean | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: string | null
    specialization: string | null
    availability: boolean | null
    rating: number | null
    professionalLicenseNumber: string | null
    medicalDiploma: string | null
    hospitalAffiliation: string | null
    experience: string | null
    userId: string | null
    deletedAt: Date | null
    isDeleted: boolean | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    specialization: number
    availability: number
    rating: number
    professionalLicenseNumber: number
    medicalDiploma: number
    hospitalAffiliation: number
    experience: number
    userId: number
    deletedAt: number
    isDeleted: number
    _all: number
  }


  export type DoctorAvgAggregateInputType = {
    rating?: true
  }

  export type DoctorSumAggregateInputType = {
    rating?: true
  }

  export type DoctorMinAggregateInputType = {
    id?: true
    specialization?: true
    availability?: true
    rating?: true
    professionalLicenseNumber?: true
    medicalDiploma?: true
    hospitalAffiliation?: true
    experience?: true
    userId?: true
    deletedAt?: true
    isDeleted?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    specialization?: true
    availability?: true
    rating?: true
    professionalLicenseNumber?: true
    medicalDiploma?: true
    hospitalAffiliation?: true
    experience?: true
    userId?: true
    deletedAt?: true
    isDeleted?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    specialization?: true
    availability?: true
    rating?: true
    professionalLicenseNumber?: true
    medicalDiploma?: true
    hospitalAffiliation?: true
    experience?: true
    userId?: true
    deletedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctor to aggregate.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type DoctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithAggregationInput | DoctorOrderByWithAggregationInput[]
    by: DoctorScalarFieldEnum[] | DoctorScalarFieldEnum
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _avg?: DoctorAvgAggregateInputType
    _sum?: DoctorSumAggregateInputType
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }

  export type DoctorGroupByOutputType = {
    id: string
    specialization: string | null
    availability: boolean
    rating: number
    professionalLicenseNumber: string | null
    medicalDiploma: string | null
    hospitalAffiliation: string | null
    experience: string | null
    userId: string
    deletedAt: Date | null
    isDeleted: boolean
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type DoctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    specialization?: boolean
    availability?: boolean
    rating?: boolean
    professionalLicenseNumber?: boolean
    medicalDiploma?: boolean
    hospitalAffiliation?: boolean
    experience?: boolean
    userId?: boolean
    deletedAt?: boolean
    isDeleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    patients?: boolean | Doctor$patientsArgs<ExtArgs>
    patientRequests?: boolean | Doctor$patientRequestsArgs<ExtArgs>
    medicalRecords?: boolean | Doctor$medicalRecordsArgs<ExtArgs>
    prescriptions?: boolean | Doctor$prescriptionsArgs<ExtArgs>
    chatRooms?: boolean | Doctor$chatRoomsArgs<ExtArgs>
    ChatRoomDoctorNursePatient?: boolean | Doctor$ChatRoomDoctorNursePatientArgs<ExtArgs>
    nurses?: boolean | Doctor$nursesArgs<ExtArgs>
    doctorNurses?: boolean | Doctor$doctorNursesArgs<ExtArgs>
    tasks?: boolean | Doctor$tasksArgs<ExtArgs>
    scheduledTasks?: boolean | Doctor$scheduledTasksArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    specialization?: boolean
    availability?: boolean
    rating?: boolean
    professionalLicenseNumber?: boolean
    medicalDiploma?: boolean
    hospitalAffiliation?: boolean
    experience?: boolean
    userId?: boolean
    deletedAt?: boolean
    isDeleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectScalar = {
    id?: boolean
    specialization?: boolean
    availability?: boolean
    rating?: boolean
    professionalLicenseNumber?: boolean
    medicalDiploma?: boolean
    hospitalAffiliation?: boolean
    experience?: boolean
    userId?: boolean
    deletedAt?: boolean
    isDeleted?: boolean
  }

  export type DoctorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    patients?: boolean | Doctor$patientsArgs<ExtArgs>
    patientRequests?: boolean | Doctor$patientRequestsArgs<ExtArgs>
    medicalRecords?: boolean | Doctor$medicalRecordsArgs<ExtArgs>
    prescriptions?: boolean | Doctor$prescriptionsArgs<ExtArgs>
    chatRooms?: boolean | Doctor$chatRoomsArgs<ExtArgs>
    ChatRoomDoctorNursePatient?: boolean | Doctor$ChatRoomDoctorNursePatientArgs<ExtArgs>
    nurses?: boolean | Doctor$nursesArgs<ExtArgs>
    doctorNurses?: boolean | Doctor$doctorNursesArgs<ExtArgs>
    tasks?: boolean | Doctor$tasksArgs<ExtArgs>
    scheduledTasks?: boolean | Doctor$scheduledTasksArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DoctorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DoctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doctor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      patients: Prisma.$DoctorPatientPayload<ExtArgs>[]
      patientRequests: Prisma.$DoctorPatientRequestPayload<ExtArgs>[]
      medicalRecords: Prisma.$MedicalRecordPayload<ExtArgs>[]
      prescriptions: Prisma.$PrescriptionPayload<ExtArgs>[]
      chatRooms: Prisma.$ChatRoomPayload<ExtArgs>[]
      ChatRoomDoctorNursePatient: Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>[]
      nurses: Prisma.$NursePayload<ExtArgs>[]
      doctorNurses: Prisma.$DoctorNursePayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      scheduledTasks: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      specialization: string | null
      availability: boolean
      rating: number
      professionalLicenseNumber: string | null
      medicalDiploma: string | null
      hospitalAffiliation: string | null
      experience: string | null
      userId: string
      deletedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["doctor"]>
    composites: {}
  }

  type DoctorGetPayload<S extends boolean | null | undefined | DoctorDefaultArgs> = $Result.GetResult<Prisma.$DoctorPayload, S>

  type DoctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoctorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface DoctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor'], meta: { name: 'Doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorFindUniqueArgs>(args: SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Doctor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorFindFirstArgs>(args?: SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorFindManyArgs>(args?: SelectSubset<T, DoctorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
     */
    create<T extends DoctorCreateArgs>(args: SelectSubset<T, DoctorCreateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Doctors.
     * @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorCreateManyArgs>(args?: SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctors and returns the data saved in the database.
     * @param {DoctorCreateManyAndReturnArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
     */
    delete<T extends DoctorDeleteArgs>(args: SelectSubset<T, DoctorDeleteArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorUpdateArgs>(args: SelectSubset<T, DoctorUpdateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorDeleteManyArgs>(args?: SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorUpdateManyArgs>(args: SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
     */
    upsert<T extends DoctorUpsertArgs>(args: SelectSubset<T, DoctorUpsertArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doctor model
   */
  readonly fields: DoctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patients<T extends Doctor$patientsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$patientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "findMany"> | Null>
    patientRequests<T extends Doctor$patientRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$patientRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "findMany"> | Null>
    medicalRecords<T extends Doctor$medicalRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$medicalRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany"> | Null>
    prescriptions<T extends Doctor$prescriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$prescriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findMany"> | Null>
    chatRooms<T extends Doctor$chatRoomsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$chatRoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany"> | Null>
    ChatRoomDoctorNursePatient<T extends Doctor$ChatRoomDoctorNursePatientArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$ChatRoomDoctorNursePatientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "findMany"> | Null>
    nurses<T extends Doctor$nursesArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$nursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findMany"> | Null>
    doctorNurses<T extends Doctor$doctorNursesArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$doctorNursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "findMany"> | Null>
    tasks<T extends Doctor$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    scheduledTasks<T extends Doctor$scheduledTasksArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$scheduledTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Doctor model
   */ 
  interface DoctorFieldRefs {
    readonly id: FieldRef<"Doctor", 'String'>
    readonly specialization: FieldRef<"Doctor", 'String'>
    readonly availability: FieldRef<"Doctor", 'Boolean'>
    readonly rating: FieldRef<"Doctor", 'Float'>
    readonly professionalLicenseNumber: FieldRef<"Doctor", 'String'>
    readonly medicalDiploma: FieldRef<"Doctor", 'String'>
    readonly hospitalAffiliation: FieldRef<"Doctor", 'String'>
    readonly experience: FieldRef<"Doctor", 'String'>
    readonly userId: FieldRef<"Doctor", 'String'>
    readonly deletedAt: FieldRef<"Doctor", 'DateTime'>
    readonly isDeleted: FieldRef<"Doctor", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Doctor findUnique
   */
  export type DoctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findUniqueOrThrow
   */
  export type DoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findFirst
   */
  export type DoctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findFirstOrThrow
   */
  export type DoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor create
   */
  export type DoctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctor.
     */
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }

  /**
   * Doctor createMany
   */
  export type DoctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Doctor createManyAndReturn
   */
  export type DoctorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doctor update
   */
  export type DoctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctor.
     */
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
  }

  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     */
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     */
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }

  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter which Doctor to delete.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorWhereInput
  }

  /**
   * Doctor.patients
   */
  export type Doctor$patientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    where?: DoctorPatientWhereInput
    orderBy?: DoctorPatientOrderByWithRelationInput | DoctorPatientOrderByWithRelationInput[]
    cursor?: DoctorPatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorPatientScalarFieldEnum | DoctorPatientScalarFieldEnum[]
  }

  /**
   * Doctor.patientRequests
   */
  export type Doctor$patientRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    where?: DoctorPatientRequestWhereInput
    orderBy?: DoctorPatientRequestOrderByWithRelationInput | DoctorPatientRequestOrderByWithRelationInput[]
    cursor?: DoctorPatientRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorPatientRequestScalarFieldEnum | DoctorPatientRequestScalarFieldEnum[]
  }

  /**
   * Doctor.medicalRecords
   */
  export type Doctor$medicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * Doctor.prescriptions
   */
  export type Doctor$prescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    where?: PrescriptionWhereInput
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    cursor?: PrescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Doctor.chatRooms
   */
  export type Doctor$chatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    cursor?: ChatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * Doctor.ChatRoomDoctorNursePatient
   */
  export type Doctor$ChatRoomDoctorNursePatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    where?: ChatRoomDoctorNursePatientWhereInput
    orderBy?: ChatRoomDoctorNursePatientOrderByWithRelationInput | ChatRoomDoctorNursePatientOrderByWithRelationInput[]
    cursor?: ChatRoomDoctorNursePatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomDoctorNursePatientScalarFieldEnum | ChatRoomDoctorNursePatientScalarFieldEnum[]
  }

  /**
   * Doctor.nurses
   */
  export type Doctor$nursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    where?: NurseWhereInput
    orderBy?: NurseOrderByWithRelationInput | NurseOrderByWithRelationInput[]
    cursor?: NurseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NurseScalarFieldEnum | NurseScalarFieldEnum[]
  }

  /**
   * Doctor.doctorNurses
   */
  export type Doctor$doctorNursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    where?: DoctorNurseWhereInput
    orderBy?: DoctorNurseOrderByWithRelationInput | DoctorNurseOrderByWithRelationInput[]
    cursor?: DoctorNurseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorNurseScalarFieldEnum | DoctorNurseScalarFieldEnum[]
  }

  /**
   * Doctor.tasks
   */
  export type Doctor$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Doctor.scheduledTasks
   */
  export type Doctor$scheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Doctor without action
   */
  export type DoctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
  }


  /**
   * Model DoctorNurse
   */

  export type AggregateDoctorNurse = {
    _count: DoctorNurseCountAggregateOutputType | null
    _min: DoctorNurseMinAggregateOutputType | null
    _max: DoctorNurseMaxAggregateOutputType | null
  }

  export type DoctorNurseMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    nurseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorNurseMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    nurseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorNurseCountAggregateOutputType = {
    id: number
    doctorId: number
    nurseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorNurseMinAggregateInputType = {
    id?: true
    doctorId?: true
    nurseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorNurseMaxAggregateInputType = {
    id?: true
    doctorId?: true
    nurseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorNurseCountAggregateInputType = {
    id?: true
    doctorId?: true
    nurseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorNurseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorNurse to aggregate.
     */
    where?: DoctorNurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorNurses to fetch.
     */
    orderBy?: DoctorNurseOrderByWithRelationInput | DoctorNurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorNurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorNurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorNurses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorNurses
    **/
    _count?: true | DoctorNurseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorNurseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorNurseMaxAggregateInputType
  }

  export type GetDoctorNurseAggregateType<T extends DoctorNurseAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorNurse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorNurse[P]>
      : GetScalarType<T[P], AggregateDoctorNurse[P]>
  }




  export type DoctorNurseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorNurseWhereInput
    orderBy?: DoctorNurseOrderByWithAggregationInput | DoctorNurseOrderByWithAggregationInput[]
    by: DoctorNurseScalarFieldEnum[] | DoctorNurseScalarFieldEnum
    having?: DoctorNurseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorNurseCountAggregateInputType | true
    _min?: DoctorNurseMinAggregateInputType
    _max?: DoctorNurseMaxAggregateInputType
  }

  export type DoctorNurseGroupByOutputType = {
    id: string
    doctorId: string
    nurseId: string
    createdAt: Date
    updatedAt: Date
    _count: DoctorNurseCountAggregateOutputType | null
    _min: DoctorNurseMinAggregateOutputType | null
    _max: DoctorNurseMaxAggregateOutputType | null
  }

  type GetDoctorNurseGroupByPayload<T extends DoctorNurseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorNurseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorNurseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorNurseGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorNurseGroupByOutputType[P]>
        }
      >
    >


  export type DoctorNurseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    nurseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorNurse"]>

  export type DoctorNurseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    nurseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorNurse"]>

  export type DoctorNurseSelectScalar = {
    id?: boolean
    doctorId?: boolean
    nurseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorNurseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
  }
  export type DoctorNurseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
  }

  export type $DoctorNursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorNurse"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      nurse: Prisma.$NursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      nurseId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctorNurse"]>
    composites: {}
  }

  type DoctorNurseGetPayload<S extends boolean | null | undefined | DoctorNurseDefaultArgs> = $Result.GetResult<Prisma.$DoctorNursePayload, S>

  type DoctorNurseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoctorNurseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorNurseCountAggregateInputType | true
    }

  export interface DoctorNurseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorNurse'], meta: { name: 'DoctorNurse' } }
    /**
     * Find zero or one DoctorNurse that matches the filter.
     * @param {DoctorNurseFindUniqueArgs} args - Arguments to find a DoctorNurse
     * @example
     * // Get one DoctorNurse
     * const doctorNurse = await prisma.doctorNurse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorNurseFindUniqueArgs>(args: SelectSubset<T, DoctorNurseFindUniqueArgs<ExtArgs>>): Prisma__DoctorNurseClient<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DoctorNurse that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DoctorNurseFindUniqueOrThrowArgs} args - Arguments to find a DoctorNurse
     * @example
     * // Get one DoctorNurse
     * const doctorNurse = await prisma.doctorNurse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorNurseFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorNurseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorNurseClient<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DoctorNurse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNurseFindFirstArgs} args - Arguments to find a DoctorNurse
     * @example
     * // Get one DoctorNurse
     * const doctorNurse = await prisma.doctorNurse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorNurseFindFirstArgs>(args?: SelectSubset<T, DoctorNurseFindFirstArgs<ExtArgs>>): Prisma__DoctorNurseClient<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DoctorNurse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNurseFindFirstOrThrowArgs} args - Arguments to find a DoctorNurse
     * @example
     * // Get one DoctorNurse
     * const doctorNurse = await prisma.doctorNurse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorNurseFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorNurseFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorNurseClient<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DoctorNurses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNurseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorNurses
     * const doctorNurses = await prisma.doctorNurse.findMany()
     * 
     * // Get first 10 DoctorNurses
     * const doctorNurses = await prisma.doctorNurse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorNurseWithIdOnly = await prisma.doctorNurse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorNurseFindManyArgs>(args?: SelectSubset<T, DoctorNurseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DoctorNurse.
     * @param {DoctorNurseCreateArgs} args - Arguments to create a DoctorNurse.
     * @example
     * // Create one DoctorNurse
     * const DoctorNurse = await prisma.doctorNurse.create({
     *   data: {
     *     // ... data to create a DoctorNurse
     *   }
     * })
     * 
     */
    create<T extends DoctorNurseCreateArgs>(args: SelectSubset<T, DoctorNurseCreateArgs<ExtArgs>>): Prisma__DoctorNurseClient<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DoctorNurses.
     * @param {DoctorNurseCreateManyArgs} args - Arguments to create many DoctorNurses.
     * @example
     * // Create many DoctorNurses
     * const doctorNurse = await prisma.doctorNurse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorNurseCreateManyArgs>(args?: SelectSubset<T, DoctorNurseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorNurses and returns the data saved in the database.
     * @param {DoctorNurseCreateManyAndReturnArgs} args - Arguments to create many DoctorNurses.
     * @example
     * // Create many DoctorNurses
     * const doctorNurse = await prisma.doctorNurse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorNurses and only return the `id`
     * const doctorNurseWithIdOnly = await prisma.doctorNurse.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorNurseCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorNurseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DoctorNurse.
     * @param {DoctorNurseDeleteArgs} args - Arguments to delete one DoctorNurse.
     * @example
     * // Delete one DoctorNurse
     * const DoctorNurse = await prisma.doctorNurse.delete({
     *   where: {
     *     // ... filter to delete one DoctorNurse
     *   }
     * })
     * 
     */
    delete<T extends DoctorNurseDeleteArgs>(args: SelectSubset<T, DoctorNurseDeleteArgs<ExtArgs>>): Prisma__DoctorNurseClient<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DoctorNurse.
     * @param {DoctorNurseUpdateArgs} args - Arguments to update one DoctorNurse.
     * @example
     * // Update one DoctorNurse
     * const doctorNurse = await prisma.doctorNurse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorNurseUpdateArgs>(args: SelectSubset<T, DoctorNurseUpdateArgs<ExtArgs>>): Prisma__DoctorNurseClient<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DoctorNurses.
     * @param {DoctorNurseDeleteManyArgs} args - Arguments to filter DoctorNurses to delete.
     * @example
     * // Delete a few DoctorNurses
     * const { count } = await prisma.doctorNurse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorNurseDeleteManyArgs>(args?: SelectSubset<T, DoctorNurseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorNurses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNurseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorNurses
     * const doctorNurse = await prisma.doctorNurse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorNurseUpdateManyArgs>(args: SelectSubset<T, DoctorNurseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DoctorNurse.
     * @param {DoctorNurseUpsertArgs} args - Arguments to update or create a DoctorNurse.
     * @example
     * // Update or create a DoctorNurse
     * const doctorNurse = await prisma.doctorNurse.upsert({
     *   create: {
     *     // ... data to create a DoctorNurse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorNurse we want to update
     *   }
     * })
     */
    upsert<T extends DoctorNurseUpsertArgs>(args: SelectSubset<T, DoctorNurseUpsertArgs<ExtArgs>>): Prisma__DoctorNurseClient<$Result.GetResult<Prisma.$DoctorNursePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DoctorNurses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNurseCountArgs} args - Arguments to filter DoctorNurses to count.
     * @example
     * // Count the number of DoctorNurses
     * const count = await prisma.doctorNurse.count({
     *   where: {
     *     // ... the filter for the DoctorNurses we want to count
     *   }
     * })
    **/
    count<T extends DoctorNurseCountArgs>(
      args?: Subset<T, DoctorNurseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorNurseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorNurse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNurseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorNurseAggregateArgs>(args: Subset<T, DoctorNurseAggregateArgs>): Prisma.PrismaPromise<GetDoctorNurseAggregateType<T>>

    /**
     * Group by DoctorNurse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorNurseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorNurseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorNurseGroupByArgs['orderBy'] }
        : { orderBy?: DoctorNurseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorNurseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorNurseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorNurse model
   */
  readonly fields: DoctorNurseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorNurse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorNurseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    nurse<T extends NurseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NurseDefaultArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorNurse model
   */ 
  interface DoctorNurseFieldRefs {
    readonly id: FieldRef<"DoctorNurse", 'String'>
    readonly doctorId: FieldRef<"DoctorNurse", 'String'>
    readonly nurseId: FieldRef<"DoctorNurse", 'String'>
    readonly createdAt: FieldRef<"DoctorNurse", 'DateTime'>
    readonly updatedAt: FieldRef<"DoctorNurse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DoctorNurse findUnique
   */
  export type DoctorNurseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNurse to fetch.
     */
    where: DoctorNurseWhereUniqueInput
  }

  /**
   * DoctorNurse findUniqueOrThrow
   */
  export type DoctorNurseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNurse to fetch.
     */
    where: DoctorNurseWhereUniqueInput
  }

  /**
   * DoctorNurse findFirst
   */
  export type DoctorNurseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNurse to fetch.
     */
    where?: DoctorNurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorNurses to fetch.
     */
    orderBy?: DoctorNurseOrderByWithRelationInput | DoctorNurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorNurses.
     */
    cursor?: DoctorNurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorNurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorNurses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorNurses.
     */
    distinct?: DoctorNurseScalarFieldEnum | DoctorNurseScalarFieldEnum[]
  }

  /**
   * DoctorNurse findFirstOrThrow
   */
  export type DoctorNurseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNurse to fetch.
     */
    where?: DoctorNurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorNurses to fetch.
     */
    orderBy?: DoctorNurseOrderByWithRelationInput | DoctorNurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorNurses.
     */
    cursor?: DoctorNurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorNurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorNurses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorNurses.
     */
    distinct?: DoctorNurseScalarFieldEnum | DoctorNurseScalarFieldEnum[]
  }

  /**
   * DoctorNurse findMany
   */
  export type DoctorNurseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    /**
     * Filter, which DoctorNurses to fetch.
     */
    where?: DoctorNurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorNurses to fetch.
     */
    orderBy?: DoctorNurseOrderByWithRelationInput | DoctorNurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorNurses.
     */
    cursor?: DoctorNurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorNurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorNurses.
     */
    skip?: number
    distinct?: DoctorNurseScalarFieldEnum | DoctorNurseScalarFieldEnum[]
  }

  /**
   * DoctorNurse create
   */
  export type DoctorNurseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorNurse.
     */
    data: XOR<DoctorNurseCreateInput, DoctorNurseUncheckedCreateInput>
  }

  /**
   * DoctorNurse createMany
   */
  export type DoctorNurseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorNurses.
     */
    data: DoctorNurseCreateManyInput | DoctorNurseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorNurse createManyAndReturn
   */
  export type DoctorNurseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DoctorNurses.
     */
    data: DoctorNurseCreateManyInput | DoctorNurseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorNurse update
   */
  export type DoctorNurseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorNurse.
     */
    data: XOR<DoctorNurseUpdateInput, DoctorNurseUncheckedUpdateInput>
    /**
     * Choose, which DoctorNurse to update.
     */
    where: DoctorNurseWhereUniqueInput
  }

  /**
   * DoctorNurse updateMany
   */
  export type DoctorNurseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorNurses.
     */
    data: XOR<DoctorNurseUpdateManyMutationInput, DoctorNurseUncheckedUpdateManyInput>
    /**
     * Filter which DoctorNurses to update
     */
    where?: DoctorNurseWhereInput
  }

  /**
   * DoctorNurse upsert
   */
  export type DoctorNurseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorNurse to update in case it exists.
     */
    where: DoctorNurseWhereUniqueInput
    /**
     * In case the DoctorNurse found by the `where` argument doesn't exist, create a new DoctorNurse with this data.
     */
    create: XOR<DoctorNurseCreateInput, DoctorNurseUncheckedCreateInput>
    /**
     * In case the DoctorNurse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorNurseUpdateInput, DoctorNurseUncheckedUpdateInput>
  }

  /**
   * DoctorNurse delete
   */
  export type DoctorNurseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
    /**
     * Filter which DoctorNurse to delete.
     */
    where: DoctorNurseWhereUniqueInput
  }

  /**
   * DoctorNurse deleteMany
   */
  export type DoctorNurseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorNurses to delete
     */
    where?: DoctorNurseWhereInput
  }

  /**
   * DoctorNurse without action
   */
  export type DoctorNurseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorNurse
     */
    select?: DoctorNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorNurseInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    nurseId: string | null
    details: string | null
    status: $Enums.TaskStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    nurseId: string | null
    details: string | null
    status: $Enums.TaskStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    doctorId: number
    nurseId: number
    details: number
    status: number
    createdAt: number
    updatedAt: number
    completedAt: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    doctorId?: true
    nurseId?: true
    details?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    doctorId?: true
    nurseId?: true
    details?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    doctorId?: true
    nurseId?: true
    details?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    doctorId: string
    nurseId: string
    details: string
    status: $Enums.TaskStatus
    createdAt: Date
    updatedAt: Date
    completedAt: Date | null
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    nurseId?: boolean
    details?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    scheduledTasks?: boolean | Task$scheduledTasksArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    nurseId?: boolean
    details?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    doctorId?: boolean
    nurseId?: boolean
    details?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    scheduledTasks?: boolean | Task$scheduledTasksArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      nurse: Prisma.$NursePayload<ExtArgs>
      scheduledTasks: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      nurseId: string
      details: string
      status: $Enums.TaskStatus
      createdAt: Date
      updatedAt: Date
      completedAt: Date | null
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    nurse<T extends NurseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NurseDefaultArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    scheduledTasks<T extends Task$scheduledTasksArgs<ExtArgs> = {}>(args?: Subset<T, Task$scheduledTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly doctorId: FieldRef<"Task", 'String'>
    readonly nurseId: FieldRef<"Task", 'String'>
    readonly details: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'TaskStatus'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
    readonly completedAt: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }

  /**
   * Task.scheduledTasks
   */
  export type Task$scheduledTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    nurseId: string | null
    patientId: string | null
    taskId: string | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    location: string | null
    isRecurring: boolean | null
    recurrencePattern: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    nurseId: string | null
    patientId: string | null
    taskId: string | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    location: string | null
    isRecurring: boolean | null
    recurrencePattern: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    doctorId: number
    nurseId: number
    patientId: number
    taskId: number
    title: number
    description: number
    startTime: number
    endTime: number
    status: number
    location: number
    isRecurring: number
    recurrencePattern: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduleMinAggregateInputType = {
    id?: true
    doctorId?: true
    nurseId?: true
    patientId?: true
    taskId?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    status?: true
    location?: true
    isRecurring?: true
    recurrencePattern?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    doctorId?: true
    nurseId?: true
    patientId?: true
    taskId?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    status?: true
    location?: true
    isRecurring?: true
    recurrencePattern?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    doctorId?: true
    nurseId?: true
    patientId?: true
    taskId?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    status?: true
    location?: true
    isRecurring?: true
    recurrencePattern?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: string
    doctorId: string | null
    nurseId: string | null
    patientId: string | null
    taskId: string | null
    title: string
    description: string | null
    startTime: Date
    endTime: Date
    status: string
    location: string | null
    isRecurring: boolean
    recurrencePattern: string | null
    createdAt: Date
    updatedAt: Date
    _count: ScheduleCountAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    nurseId?: boolean
    patientId?: boolean
    taskId?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    location?: boolean
    isRecurring?: boolean
    recurrencePattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | Schedule$doctorArgs<ExtArgs>
    nurse?: boolean | Schedule$nurseArgs<ExtArgs>
    patient?: boolean | Schedule$patientArgs<ExtArgs>
    task?: boolean | Schedule$taskArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    nurseId?: boolean
    patientId?: boolean
    taskId?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    location?: boolean
    isRecurring?: boolean
    recurrencePattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | Schedule$doctorArgs<ExtArgs>
    nurse?: boolean | Schedule$nurseArgs<ExtArgs>
    patient?: boolean | Schedule$patientArgs<ExtArgs>
    task?: boolean | Schedule$taskArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    doctorId?: boolean
    nurseId?: boolean
    patientId?: boolean
    taskId?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    location?: boolean
    isRecurring?: boolean
    recurrencePattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | Schedule$doctorArgs<ExtArgs>
    nurse?: boolean | Schedule$nurseArgs<ExtArgs>
    patient?: boolean | Schedule$patientArgs<ExtArgs>
    task?: boolean | Schedule$taskArgs<ExtArgs>
  }
  export type ScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | Schedule$doctorArgs<ExtArgs>
    nurse?: boolean | Schedule$nurseArgs<ExtArgs>
    patient?: boolean | Schedule$patientArgs<ExtArgs>
    task?: boolean | Schedule$taskArgs<ExtArgs>
  }

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs> | null
      nurse: Prisma.$NursePayload<ExtArgs> | null
      patient: Prisma.$PatientPayload<ExtArgs> | null
      task: Prisma.$TaskPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string | null
      nurseId: string | null
      patientId: string | null
      taskId: string | null
      title: string
      description: string | null
      startTime: Date
      endTime: Date
      status: string
      location: string | null
      isRecurring: boolean
      recurrencePattern: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schedules and returns the data saved in the database.
     * @param {ScheduleCreateManyAndReturnArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends Schedule$doctorArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$doctorArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    nurse<T extends Schedule$nurseArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$nurseArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patient<T extends Schedule$patientArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    task<T extends Schedule$taskArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */ 
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'String'>
    readonly doctorId: FieldRef<"Schedule", 'String'>
    readonly nurseId: FieldRef<"Schedule", 'String'>
    readonly patientId: FieldRef<"Schedule", 'String'>
    readonly taskId: FieldRef<"Schedule", 'String'>
    readonly title: FieldRef<"Schedule", 'String'>
    readonly description: FieldRef<"Schedule", 'String'>
    readonly startTime: FieldRef<"Schedule", 'DateTime'>
    readonly endTime: FieldRef<"Schedule", 'DateTime'>
    readonly status: FieldRef<"Schedule", 'String'>
    readonly location: FieldRef<"Schedule", 'String'>
    readonly isRecurring: FieldRef<"Schedule", 'Boolean'>
    readonly recurrencePattern: FieldRef<"Schedule", 'String'>
    readonly createdAt: FieldRef<"Schedule", 'DateTime'>
    readonly updatedAt: FieldRef<"Schedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule createManyAndReturn
   */
  export type ScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule.doctor
   */
  export type Schedule$doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
  }

  /**
   * Schedule.nurse
   */
  export type Schedule$nurseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    where?: NurseWhereInput
  }

  /**
   * Schedule.patient
   */
  export type Schedule$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * Schedule.task
   */
  export type Schedule$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model NurseServiceRequest
   */

  export type AggregateNurseServiceRequest = {
    _count: NurseServiceRequestCountAggregateOutputType | null
    _avg: NurseServiceRequestAvgAggregateOutputType | null
    _sum: NurseServiceRequestSumAggregateOutputType | null
    _min: NurseServiceRequestMinAggregateOutputType | null
    _max: NurseServiceRequestMaxAggregateOutputType | null
  }

  export type NurseServiceRequestAvgAggregateOutputType = {
    rating: number | null
  }

  export type NurseServiceRequestSumAggregateOutputType = {
    rating: number | null
  }

  export type NurseServiceRequestMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    nurseId: string | null
    status: $Enums.ServiceStatus | null
    serviceType: string | null
    description: string | null
    preferredDate: Date | null
    urgency: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
    notes: string | null
    rating: number | null
    feedback: string | null
  }

  export type NurseServiceRequestMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    nurseId: string | null
    status: $Enums.ServiceStatus | null
    serviceType: string | null
    description: string | null
    preferredDate: Date | null
    urgency: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
    notes: string | null
    rating: number | null
    feedback: string | null
  }

  export type NurseServiceRequestCountAggregateOutputType = {
    id: number
    patientId: number
    nurseId: number
    status: number
    serviceType: number
    description: number
    preferredDate: number
    urgency: number
    location: number
    createdAt: number
    updatedAt: number
    completedAt: number
    notes: number
    rating: number
    feedback: number
    _all: number
  }


  export type NurseServiceRequestAvgAggregateInputType = {
    rating?: true
  }

  export type NurseServiceRequestSumAggregateInputType = {
    rating?: true
  }

  export type NurseServiceRequestMinAggregateInputType = {
    id?: true
    patientId?: true
    nurseId?: true
    status?: true
    serviceType?: true
    description?: true
    preferredDate?: true
    urgency?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
    notes?: true
    rating?: true
    feedback?: true
  }

  export type NurseServiceRequestMaxAggregateInputType = {
    id?: true
    patientId?: true
    nurseId?: true
    status?: true
    serviceType?: true
    description?: true
    preferredDate?: true
    urgency?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
    notes?: true
    rating?: true
    feedback?: true
  }

  export type NurseServiceRequestCountAggregateInputType = {
    id?: true
    patientId?: true
    nurseId?: true
    status?: true
    serviceType?: true
    description?: true
    preferredDate?: true
    urgency?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
    notes?: true
    rating?: true
    feedback?: true
    _all?: true
  }

  export type NurseServiceRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NurseServiceRequest to aggregate.
     */
    where?: NurseServiceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NurseServiceRequests to fetch.
     */
    orderBy?: NurseServiceRequestOrderByWithRelationInput | NurseServiceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NurseServiceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NurseServiceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NurseServiceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NurseServiceRequests
    **/
    _count?: true | NurseServiceRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NurseServiceRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NurseServiceRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NurseServiceRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NurseServiceRequestMaxAggregateInputType
  }

  export type GetNurseServiceRequestAggregateType<T extends NurseServiceRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateNurseServiceRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNurseServiceRequest[P]>
      : GetScalarType<T[P], AggregateNurseServiceRequest[P]>
  }




  export type NurseServiceRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NurseServiceRequestWhereInput
    orderBy?: NurseServiceRequestOrderByWithAggregationInput | NurseServiceRequestOrderByWithAggregationInput[]
    by: NurseServiceRequestScalarFieldEnum[] | NurseServiceRequestScalarFieldEnum
    having?: NurseServiceRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NurseServiceRequestCountAggregateInputType | true
    _avg?: NurseServiceRequestAvgAggregateInputType
    _sum?: NurseServiceRequestSumAggregateInputType
    _min?: NurseServiceRequestMinAggregateInputType
    _max?: NurseServiceRequestMaxAggregateInputType
  }

  export type NurseServiceRequestGroupByOutputType = {
    id: string
    patientId: string
    nurseId: string | null
    status: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date
    urgency: string
    location: string
    createdAt: Date
    updatedAt: Date
    completedAt: Date | null
    notes: string | null
    rating: number | null
    feedback: string | null
    _count: NurseServiceRequestCountAggregateOutputType | null
    _avg: NurseServiceRequestAvgAggregateOutputType | null
    _sum: NurseServiceRequestSumAggregateOutputType | null
    _min: NurseServiceRequestMinAggregateOutputType | null
    _max: NurseServiceRequestMaxAggregateOutputType | null
  }

  type GetNurseServiceRequestGroupByPayload<T extends NurseServiceRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NurseServiceRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NurseServiceRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NurseServiceRequestGroupByOutputType[P]>
            : GetScalarType<T[P], NurseServiceRequestGroupByOutputType[P]>
        }
      >
    >


  export type NurseServiceRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    nurseId?: boolean
    status?: boolean
    serviceType?: boolean
    description?: boolean
    preferredDate?: boolean
    urgency?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    notes?: boolean
    rating?: boolean
    feedback?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    nurse?: boolean | NurseServiceRequest$nurseArgs<ExtArgs>
  }, ExtArgs["result"]["nurseServiceRequest"]>

  export type NurseServiceRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    nurseId?: boolean
    status?: boolean
    serviceType?: boolean
    description?: boolean
    preferredDate?: boolean
    urgency?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    notes?: boolean
    rating?: boolean
    feedback?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    nurse?: boolean | NurseServiceRequest$nurseArgs<ExtArgs>
  }, ExtArgs["result"]["nurseServiceRequest"]>

  export type NurseServiceRequestSelectScalar = {
    id?: boolean
    patientId?: boolean
    nurseId?: boolean
    status?: boolean
    serviceType?: boolean
    description?: boolean
    preferredDate?: boolean
    urgency?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    notes?: boolean
    rating?: boolean
    feedback?: boolean
  }

  export type NurseServiceRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    nurse?: boolean | NurseServiceRequest$nurseArgs<ExtArgs>
  }
  export type NurseServiceRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    nurse?: boolean | NurseServiceRequest$nurseArgs<ExtArgs>
  }

  export type $NurseServiceRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NurseServiceRequest"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      nurse: Prisma.$NursePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      nurseId: string | null
      status: $Enums.ServiceStatus
      serviceType: string
      description: string
      preferredDate: Date
      urgency: string
      location: string
      createdAt: Date
      updatedAt: Date
      completedAt: Date | null
      notes: string | null
      rating: number | null
      feedback: string | null
    }, ExtArgs["result"]["nurseServiceRequest"]>
    composites: {}
  }

  type NurseServiceRequestGetPayload<S extends boolean | null | undefined | NurseServiceRequestDefaultArgs> = $Result.GetResult<Prisma.$NurseServiceRequestPayload, S>

  type NurseServiceRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NurseServiceRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NurseServiceRequestCountAggregateInputType | true
    }

  export interface NurseServiceRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NurseServiceRequest'], meta: { name: 'NurseServiceRequest' } }
    /**
     * Find zero or one NurseServiceRequest that matches the filter.
     * @param {NurseServiceRequestFindUniqueArgs} args - Arguments to find a NurseServiceRequest
     * @example
     * // Get one NurseServiceRequest
     * const nurseServiceRequest = await prisma.nurseServiceRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NurseServiceRequestFindUniqueArgs>(args: SelectSubset<T, NurseServiceRequestFindUniqueArgs<ExtArgs>>): Prisma__NurseServiceRequestClient<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NurseServiceRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NurseServiceRequestFindUniqueOrThrowArgs} args - Arguments to find a NurseServiceRequest
     * @example
     * // Get one NurseServiceRequest
     * const nurseServiceRequest = await prisma.nurseServiceRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NurseServiceRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, NurseServiceRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NurseServiceRequestClient<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NurseServiceRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseServiceRequestFindFirstArgs} args - Arguments to find a NurseServiceRequest
     * @example
     * // Get one NurseServiceRequest
     * const nurseServiceRequest = await prisma.nurseServiceRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NurseServiceRequestFindFirstArgs>(args?: SelectSubset<T, NurseServiceRequestFindFirstArgs<ExtArgs>>): Prisma__NurseServiceRequestClient<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NurseServiceRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseServiceRequestFindFirstOrThrowArgs} args - Arguments to find a NurseServiceRequest
     * @example
     * // Get one NurseServiceRequest
     * const nurseServiceRequest = await prisma.nurseServiceRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NurseServiceRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, NurseServiceRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__NurseServiceRequestClient<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NurseServiceRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseServiceRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NurseServiceRequests
     * const nurseServiceRequests = await prisma.nurseServiceRequest.findMany()
     * 
     * // Get first 10 NurseServiceRequests
     * const nurseServiceRequests = await prisma.nurseServiceRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nurseServiceRequestWithIdOnly = await prisma.nurseServiceRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NurseServiceRequestFindManyArgs>(args?: SelectSubset<T, NurseServiceRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NurseServiceRequest.
     * @param {NurseServiceRequestCreateArgs} args - Arguments to create a NurseServiceRequest.
     * @example
     * // Create one NurseServiceRequest
     * const NurseServiceRequest = await prisma.nurseServiceRequest.create({
     *   data: {
     *     // ... data to create a NurseServiceRequest
     *   }
     * })
     * 
     */
    create<T extends NurseServiceRequestCreateArgs>(args: SelectSubset<T, NurseServiceRequestCreateArgs<ExtArgs>>): Prisma__NurseServiceRequestClient<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NurseServiceRequests.
     * @param {NurseServiceRequestCreateManyArgs} args - Arguments to create many NurseServiceRequests.
     * @example
     * // Create many NurseServiceRequests
     * const nurseServiceRequest = await prisma.nurseServiceRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NurseServiceRequestCreateManyArgs>(args?: SelectSubset<T, NurseServiceRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NurseServiceRequests and returns the data saved in the database.
     * @param {NurseServiceRequestCreateManyAndReturnArgs} args - Arguments to create many NurseServiceRequests.
     * @example
     * // Create many NurseServiceRequests
     * const nurseServiceRequest = await prisma.nurseServiceRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NurseServiceRequests and only return the `id`
     * const nurseServiceRequestWithIdOnly = await prisma.nurseServiceRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NurseServiceRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, NurseServiceRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NurseServiceRequest.
     * @param {NurseServiceRequestDeleteArgs} args - Arguments to delete one NurseServiceRequest.
     * @example
     * // Delete one NurseServiceRequest
     * const NurseServiceRequest = await prisma.nurseServiceRequest.delete({
     *   where: {
     *     // ... filter to delete one NurseServiceRequest
     *   }
     * })
     * 
     */
    delete<T extends NurseServiceRequestDeleteArgs>(args: SelectSubset<T, NurseServiceRequestDeleteArgs<ExtArgs>>): Prisma__NurseServiceRequestClient<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NurseServiceRequest.
     * @param {NurseServiceRequestUpdateArgs} args - Arguments to update one NurseServiceRequest.
     * @example
     * // Update one NurseServiceRequest
     * const nurseServiceRequest = await prisma.nurseServiceRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NurseServiceRequestUpdateArgs>(args: SelectSubset<T, NurseServiceRequestUpdateArgs<ExtArgs>>): Prisma__NurseServiceRequestClient<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NurseServiceRequests.
     * @param {NurseServiceRequestDeleteManyArgs} args - Arguments to filter NurseServiceRequests to delete.
     * @example
     * // Delete a few NurseServiceRequests
     * const { count } = await prisma.nurseServiceRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NurseServiceRequestDeleteManyArgs>(args?: SelectSubset<T, NurseServiceRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NurseServiceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseServiceRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NurseServiceRequests
     * const nurseServiceRequest = await prisma.nurseServiceRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NurseServiceRequestUpdateManyArgs>(args: SelectSubset<T, NurseServiceRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NurseServiceRequest.
     * @param {NurseServiceRequestUpsertArgs} args - Arguments to update or create a NurseServiceRequest.
     * @example
     * // Update or create a NurseServiceRequest
     * const nurseServiceRequest = await prisma.nurseServiceRequest.upsert({
     *   create: {
     *     // ... data to create a NurseServiceRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NurseServiceRequest we want to update
     *   }
     * })
     */
    upsert<T extends NurseServiceRequestUpsertArgs>(args: SelectSubset<T, NurseServiceRequestUpsertArgs<ExtArgs>>): Prisma__NurseServiceRequestClient<$Result.GetResult<Prisma.$NurseServiceRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NurseServiceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseServiceRequestCountArgs} args - Arguments to filter NurseServiceRequests to count.
     * @example
     * // Count the number of NurseServiceRequests
     * const count = await prisma.nurseServiceRequest.count({
     *   where: {
     *     // ... the filter for the NurseServiceRequests we want to count
     *   }
     * })
    **/
    count<T extends NurseServiceRequestCountArgs>(
      args?: Subset<T, NurseServiceRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NurseServiceRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NurseServiceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseServiceRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NurseServiceRequestAggregateArgs>(args: Subset<T, NurseServiceRequestAggregateArgs>): Prisma.PrismaPromise<GetNurseServiceRequestAggregateType<T>>

    /**
     * Group by NurseServiceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseServiceRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NurseServiceRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NurseServiceRequestGroupByArgs['orderBy'] }
        : { orderBy?: NurseServiceRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NurseServiceRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNurseServiceRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NurseServiceRequest model
   */
  readonly fields: NurseServiceRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NurseServiceRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NurseServiceRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    nurse<T extends NurseServiceRequest$nurseArgs<ExtArgs> = {}>(args?: Subset<T, NurseServiceRequest$nurseArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NurseServiceRequest model
   */ 
  interface NurseServiceRequestFieldRefs {
    readonly id: FieldRef<"NurseServiceRequest", 'String'>
    readonly patientId: FieldRef<"NurseServiceRequest", 'String'>
    readonly nurseId: FieldRef<"NurseServiceRequest", 'String'>
    readonly status: FieldRef<"NurseServiceRequest", 'ServiceStatus'>
    readonly serviceType: FieldRef<"NurseServiceRequest", 'String'>
    readonly description: FieldRef<"NurseServiceRequest", 'String'>
    readonly preferredDate: FieldRef<"NurseServiceRequest", 'DateTime'>
    readonly urgency: FieldRef<"NurseServiceRequest", 'String'>
    readonly location: FieldRef<"NurseServiceRequest", 'String'>
    readonly createdAt: FieldRef<"NurseServiceRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"NurseServiceRequest", 'DateTime'>
    readonly completedAt: FieldRef<"NurseServiceRequest", 'DateTime'>
    readonly notes: FieldRef<"NurseServiceRequest", 'String'>
    readonly rating: FieldRef<"NurseServiceRequest", 'Int'>
    readonly feedback: FieldRef<"NurseServiceRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NurseServiceRequest findUnique
   */
  export type NurseServiceRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which NurseServiceRequest to fetch.
     */
    where: NurseServiceRequestWhereUniqueInput
  }

  /**
   * NurseServiceRequest findUniqueOrThrow
   */
  export type NurseServiceRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which NurseServiceRequest to fetch.
     */
    where: NurseServiceRequestWhereUniqueInput
  }

  /**
   * NurseServiceRequest findFirst
   */
  export type NurseServiceRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which NurseServiceRequest to fetch.
     */
    where?: NurseServiceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NurseServiceRequests to fetch.
     */
    orderBy?: NurseServiceRequestOrderByWithRelationInput | NurseServiceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NurseServiceRequests.
     */
    cursor?: NurseServiceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NurseServiceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NurseServiceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NurseServiceRequests.
     */
    distinct?: NurseServiceRequestScalarFieldEnum | NurseServiceRequestScalarFieldEnum[]
  }

  /**
   * NurseServiceRequest findFirstOrThrow
   */
  export type NurseServiceRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which NurseServiceRequest to fetch.
     */
    where?: NurseServiceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NurseServiceRequests to fetch.
     */
    orderBy?: NurseServiceRequestOrderByWithRelationInput | NurseServiceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NurseServiceRequests.
     */
    cursor?: NurseServiceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NurseServiceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NurseServiceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NurseServiceRequests.
     */
    distinct?: NurseServiceRequestScalarFieldEnum | NurseServiceRequestScalarFieldEnum[]
  }

  /**
   * NurseServiceRequest findMany
   */
  export type NurseServiceRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which NurseServiceRequests to fetch.
     */
    where?: NurseServiceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NurseServiceRequests to fetch.
     */
    orderBy?: NurseServiceRequestOrderByWithRelationInput | NurseServiceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NurseServiceRequests.
     */
    cursor?: NurseServiceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NurseServiceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NurseServiceRequests.
     */
    skip?: number
    distinct?: NurseServiceRequestScalarFieldEnum | NurseServiceRequestScalarFieldEnum[]
  }

  /**
   * NurseServiceRequest create
   */
  export type NurseServiceRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a NurseServiceRequest.
     */
    data: XOR<NurseServiceRequestCreateInput, NurseServiceRequestUncheckedCreateInput>
  }

  /**
   * NurseServiceRequest createMany
   */
  export type NurseServiceRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NurseServiceRequests.
     */
    data: NurseServiceRequestCreateManyInput | NurseServiceRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NurseServiceRequest createManyAndReturn
   */
  export type NurseServiceRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NurseServiceRequests.
     */
    data: NurseServiceRequestCreateManyInput | NurseServiceRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NurseServiceRequest update
   */
  export type NurseServiceRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a NurseServiceRequest.
     */
    data: XOR<NurseServiceRequestUpdateInput, NurseServiceRequestUncheckedUpdateInput>
    /**
     * Choose, which NurseServiceRequest to update.
     */
    where: NurseServiceRequestWhereUniqueInput
  }

  /**
   * NurseServiceRequest updateMany
   */
  export type NurseServiceRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NurseServiceRequests.
     */
    data: XOR<NurseServiceRequestUpdateManyMutationInput, NurseServiceRequestUncheckedUpdateManyInput>
    /**
     * Filter which NurseServiceRequests to update
     */
    where?: NurseServiceRequestWhereInput
  }

  /**
   * NurseServiceRequest upsert
   */
  export type NurseServiceRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the NurseServiceRequest to update in case it exists.
     */
    where: NurseServiceRequestWhereUniqueInput
    /**
     * In case the NurseServiceRequest found by the `where` argument doesn't exist, create a new NurseServiceRequest with this data.
     */
    create: XOR<NurseServiceRequestCreateInput, NurseServiceRequestUncheckedCreateInput>
    /**
     * In case the NurseServiceRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NurseServiceRequestUpdateInput, NurseServiceRequestUncheckedUpdateInput>
  }

  /**
   * NurseServiceRequest delete
   */
  export type NurseServiceRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
    /**
     * Filter which NurseServiceRequest to delete.
     */
    where: NurseServiceRequestWhereUniqueInput
  }

  /**
   * NurseServiceRequest deleteMany
   */
  export type NurseServiceRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NurseServiceRequests to delete
     */
    where?: NurseServiceRequestWhereInput
  }

  /**
   * NurseServiceRequest.nurse
   */
  export type NurseServiceRequest$nurseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    where?: NurseWhereInput
  }

  /**
   * NurseServiceRequest without action
   */
  export type NurseServiceRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseServiceRequest
     */
    select?: NurseServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseServiceRequestInclude<ExtArgs> | null
  }


  /**
   * Model DoctorPatientRequest
   */

  export type AggregateDoctorPatientRequest = {
    _count: DoctorPatientRequestCountAggregateOutputType | null
    _min: DoctorPatientRequestMinAggregateOutputType | null
    _max: DoctorPatientRequestMaxAggregateOutputType | null
  }

  export type DoctorPatientRequestMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    status: $Enums.RequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    message: string | null
  }

  export type DoctorPatientRequestMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    status: $Enums.RequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    message: string | null
  }

  export type DoctorPatientRequestCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    status: number
    createdAt: number
    updatedAt: number
    message: number
    _all: number
  }


  export type DoctorPatientRequestMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    message?: true
  }

  export type DoctorPatientRequestMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    message?: true
  }

  export type DoctorPatientRequestCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    message?: true
    _all?: true
  }

  export type DoctorPatientRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorPatientRequest to aggregate.
     */
    where?: DoctorPatientRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorPatientRequests to fetch.
     */
    orderBy?: DoctorPatientRequestOrderByWithRelationInput | DoctorPatientRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorPatientRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorPatientRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorPatientRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorPatientRequests
    **/
    _count?: true | DoctorPatientRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorPatientRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorPatientRequestMaxAggregateInputType
  }

  export type GetDoctorPatientRequestAggregateType<T extends DoctorPatientRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorPatientRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorPatientRequest[P]>
      : GetScalarType<T[P], AggregateDoctorPatientRequest[P]>
  }




  export type DoctorPatientRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorPatientRequestWhereInput
    orderBy?: DoctorPatientRequestOrderByWithAggregationInput | DoctorPatientRequestOrderByWithAggregationInput[]
    by: DoctorPatientRequestScalarFieldEnum[] | DoctorPatientRequestScalarFieldEnum
    having?: DoctorPatientRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorPatientRequestCountAggregateInputType | true
    _min?: DoctorPatientRequestMinAggregateInputType
    _max?: DoctorPatientRequestMaxAggregateInputType
  }

  export type DoctorPatientRequestGroupByOutputType = {
    id: string
    patientId: string
    doctorId: string
    status: $Enums.RequestStatus
    createdAt: Date
    updatedAt: Date
    message: string | null
    _count: DoctorPatientRequestCountAggregateOutputType | null
    _min: DoctorPatientRequestMinAggregateOutputType | null
    _max: DoctorPatientRequestMaxAggregateOutputType | null
  }

  type GetDoctorPatientRequestGroupByPayload<T extends DoctorPatientRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorPatientRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorPatientRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorPatientRequestGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorPatientRequestGroupByOutputType[P]>
        }
      >
    >


  export type DoctorPatientRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    message?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorPatientRequest"]>

  export type DoctorPatientRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    message?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorPatientRequest"]>

  export type DoctorPatientRequestSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    message?: boolean
  }

  export type DoctorPatientRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }
  export type DoctorPatientRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }

  export type $DoctorPatientRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorPatientRequest"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      doctor: Prisma.$DoctorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      doctorId: string
      status: $Enums.RequestStatus
      createdAt: Date
      updatedAt: Date
      message: string | null
    }, ExtArgs["result"]["doctorPatientRequest"]>
    composites: {}
  }

  type DoctorPatientRequestGetPayload<S extends boolean | null | undefined | DoctorPatientRequestDefaultArgs> = $Result.GetResult<Prisma.$DoctorPatientRequestPayload, S>

  type DoctorPatientRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoctorPatientRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorPatientRequestCountAggregateInputType | true
    }

  export interface DoctorPatientRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorPatientRequest'], meta: { name: 'DoctorPatientRequest' } }
    /**
     * Find zero or one DoctorPatientRequest that matches the filter.
     * @param {DoctorPatientRequestFindUniqueArgs} args - Arguments to find a DoctorPatientRequest
     * @example
     * // Get one DoctorPatientRequest
     * const doctorPatientRequest = await prisma.doctorPatientRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorPatientRequestFindUniqueArgs>(args: SelectSubset<T, DoctorPatientRequestFindUniqueArgs<ExtArgs>>): Prisma__DoctorPatientRequestClient<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DoctorPatientRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DoctorPatientRequestFindUniqueOrThrowArgs} args - Arguments to find a DoctorPatientRequest
     * @example
     * // Get one DoctorPatientRequest
     * const doctorPatientRequest = await prisma.doctorPatientRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorPatientRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorPatientRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorPatientRequestClient<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DoctorPatientRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientRequestFindFirstArgs} args - Arguments to find a DoctorPatientRequest
     * @example
     * // Get one DoctorPatientRequest
     * const doctorPatientRequest = await prisma.doctorPatientRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorPatientRequestFindFirstArgs>(args?: SelectSubset<T, DoctorPatientRequestFindFirstArgs<ExtArgs>>): Prisma__DoctorPatientRequestClient<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DoctorPatientRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientRequestFindFirstOrThrowArgs} args - Arguments to find a DoctorPatientRequest
     * @example
     * // Get one DoctorPatientRequest
     * const doctorPatientRequest = await prisma.doctorPatientRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorPatientRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorPatientRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorPatientRequestClient<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DoctorPatientRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorPatientRequests
     * const doctorPatientRequests = await prisma.doctorPatientRequest.findMany()
     * 
     * // Get first 10 DoctorPatientRequests
     * const doctorPatientRequests = await prisma.doctorPatientRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorPatientRequestWithIdOnly = await prisma.doctorPatientRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorPatientRequestFindManyArgs>(args?: SelectSubset<T, DoctorPatientRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DoctorPatientRequest.
     * @param {DoctorPatientRequestCreateArgs} args - Arguments to create a DoctorPatientRequest.
     * @example
     * // Create one DoctorPatientRequest
     * const DoctorPatientRequest = await prisma.doctorPatientRequest.create({
     *   data: {
     *     // ... data to create a DoctorPatientRequest
     *   }
     * })
     * 
     */
    create<T extends DoctorPatientRequestCreateArgs>(args: SelectSubset<T, DoctorPatientRequestCreateArgs<ExtArgs>>): Prisma__DoctorPatientRequestClient<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DoctorPatientRequests.
     * @param {DoctorPatientRequestCreateManyArgs} args - Arguments to create many DoctorPatientRequests.
     * @example
     * // Create many DoctorPatientRequests
     * const doctorPatientRequest = await prisma.doctorPatientRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorPatientRequestCreateManyArgs>(args?: SelectSubset<T, DoctorPatientRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorPatientRequests and returns the data saved in the database.
     * @param {DoctorPatientRequestCreateManyAndReturnArgs} args - Arguments to create many DoctorPatientRequests.
     * @example
     * // Create many DoctorPatientRequests
     * const doctorPatientRequest = await prisma.doctorPatientRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorPatientRequests and only return the `id`
     * const doctorPatientRequestWithIdOnly = await prisma.doctorPatientRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorPatientRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorPatientRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DoctorPatientRequest.
     * @param {DoctorPatientRequestDeleteArgs} args - Arguments to delete one DoctorPatientRequest.
     * @example
     * // Delete one DoctorPatientRequest
     * const DoctorPatientRequest = await prisma.doctorPatientRequest.delete({
     *   where: {
     *     // ... filter to delete one DoctorPatientRequest
     *   }
     * })
     * 
     */
    delete<T extends DoctorPatientRequestDeleteArgs>(args: SelectSubset<T, DoctorPatientRequestDeleteArgs<ExtArgs>>): Prisma__DoctorPatientRequestClient<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DoctorPatientRequest.
     * @param {DoctorPatientRequestUpdateArgs} args - Arguments to update one DoctorPatientRequest.
     * @example
     * // Update one DoctorPatientRequest
     * const doctorPatientRequest = await prisma.doctorPatientRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorPatientRequestUpdateArgs>(args: SelectSubset<T, DoctorPatientRequestUpdateArgs<ExtArgs>>): Prisma__DoctorPatientRequestClient<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DoctorPatientRequests.
     * @param {DoctorPatientRequestDeleteManyArgs} args - Arguments to filter DoctorPatientRequests to delete.
     * @example
     * // Delete a few DoctorPatientRequests
     * const { count } = await prisma.doctorPatientRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorPatientRequestDeleteManyArgs>(args?: SelectSubset<T, DoctorPatientRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorPatientRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorPatientRequests
     * const doctorPatientRequest = await prisma.doctorPatientRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorPatientRequestUpdateManyArgs>(args: SelectSubset<T, DoctorPatientRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DoctorPatientRequest.
     * @param {DoctorPatientRequestUpsertArgs} args - Arguments to update or create a DoctorPatientRequest.
     * @example
     * // Update or create a DoctorPatientRequest
     * const doctorPatientRequest = await prisma.doctorPatientRequest.upsert({
     *   create: {
     *     // ... data to create a DoctorPatientRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorPatientRequest we want to update
     *   }
     * })
     */
    upsert<T extends DoctorPatientRequestUpsertArgs>(args: SelectSubset<T, DoctorPatientRequestUpsertArgs<ExtArgs>>): Prisma__DoctorPatientRequestClient<$Result.GetResult<Prisma.$DoctorPatientRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DoctorPatientRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientRequestCountArgs} args - Arguments to filter DoctorPatientRequests to count.
     * @example
     * // Count the number of DoctorPatientRequests
     * const count = await prisma.doctorPatientRequest.count({
     *   where: {
     *     // ... the filter for the DoctorPatientRequests we want to count
     *   }
     * })
    **/
    count<T extends DoctorPatientRequestCountArgs>(
      args?: Subset<T, DoctorPatientRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorPatientRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorPatientRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorPatientRequestAggregateArgs>(args: Subset<T, DoctorPatientRequestAggregateArgs>): Prisma.PrismaPromise<GetDoctorPatientRequestAggregateType<T>>

    /**
     * Group by DoctorPatientRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorPatientRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorPatientRequestGroupByArgs['orderBy'] }
        : { orderBy?: DoctorPatientRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorPatientRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorPatientRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorPatientRequest model
   */
  readonly fields: DoctorPatientRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorPatientRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorPatientRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorPatientRequest model
   */ 
  interface DoctorPatientRequestFieldRefs {
    readonly id: FieldRef<"DoctorPatientRequest", 'String'>
    readonly patientId: FieldRef<"DoctorPatientRequest", 'String'>
    readonly doctorId: FieldRef<"DoctorPatientRequest", 'String'>
    readonly status: FieldRef<"DoctorPatientRequest", 'RequestStatus'>
    readonly createdAt: FieldRef<"DoctorPatientRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"DoctorPatientRequest", 'DateTime'>
    readonly message: FieldRef<"DoctorPatientRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DoctorPatientRequest findUnique
   */
  export type DoctorPatientRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatientRequest to fetch.
     */
    where: DoctorPatientRequestWhereUniqueInput
  }

  /**
   * DoctorPatientRequest findUniqueOrThrow
   */
  export type DoctorPatientRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatientRequest to fetch.
     */
    where: DoctorPatientRequestWhereUniqueInput
  }

  /**
   * DoctorPatientRequest findFirst
   */
  export type DoctorPatientRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatientRequest to fetch.
     */
    where?: DoctorPatientRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorPatientRequests to fetch.
     */
    orderBy?: DoctorPatientRequestOrderByWithRelationInput | DoctorPatientRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorPatientRequests.
     */
    cursor?: DoctorPatientRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorPatientRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorPatientRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorPatientRequests.
     */
    distinct?: DoctorPatientRequestScalarFieldEnum | DoctorPatientRequestScalarFieldEnum[]
  }

  /**
   * DoctorPatientRequest findFirstOrThrow
   */
  export type DoctorPatientRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatientRequest to fetch.
     */
    where?: DoctorPatientRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorPatientRequests to fetch.
     */
    orderBy?: DoctorPatientRequestOrderByWithRelationInput | DoctorPatientRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorPatientRequests.
     */
    cursor?: DoctorPatientRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorPatientRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorPatientRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorPatientRequests.
     */
    distinct?: DoctorPatientRequestScalarFieldEnum | DoctorPatientRequestScalarFieldEnum[]
  }

  /**
   * DoctorPatientRequest findMany
   */
  export type DoctorPatientRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatientRequests to fetch.
     */
    where?: DoctorPatientRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorPatientRequests to fetch.
     */
    orderBy?: DoctorPatientRequestOrderByWithRelationInput | DoctorPatientRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorPatientRequests.
     */
    cursor?: DoctorPatientRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorPatientRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorPatientRequests.
     */
    skip?: number
    distinct?: DoctorPatientRequestScalarFieldEnum | DoctorPatientRequestScalarFieldEnum[]
  }

  /**
   * DoctorPatientRequest create
   */
  export type DoctorPatientRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorPatientRequest.
     */
    data: XOR<DoctorPatientRequestCreateInput, DoctorPatientRequestUncheckedCreateInput>
  }

  /**
   * DoctorPatientRequest createMany
   */
  export type DoctorPatientRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorPatientRequests.
     */
    data: DoctorPatientRequestCreateManyInput | DoctorPatientRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorPatientRequest createManyAndReturn
   */
  export type DoctorPatientRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DoctorPatientRequests.
     */
    data: DoctorPatientRequestCreateManyInput | DoctorPatientRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorPatientRequest update
   */
  export type DoctorPatientRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorPatientRequest.
     */
    data: XOR<DoctorPatientRequestUpdateInput, DoctorPatientRequestUncheckedUpdateInput>
    /**
     * Choose, which DoctorPatientRequest to update.
     */
    where: DoctorPatientRequestWhereUniqueInput
  }

  /**
   * DoctorPatientRequest updateMany
   */
  export type DoctorPatientRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorPatientRequests.
     */
    data: XOR<DoctorPatientRequestUpdateManyMutationInput, DoctorPatientRequestUncheckedUpdateManyInput>
    /**
     * Filter which DoctorPatientRequests to update
     */
    where?: DoctorPatientRequestWhereInput
  }

  /**
   * DoctorPatientRequest upsert
   */
  export type DoctorPatientRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorPatientRequest to update in case it exists.
     */
    where: DoctorPatientRequestWhereUniqueInput
    /**
     * In case the DoctorPatientRequest found by the `where` argument doesn't exist, create a new DoctorPatientRequest with this data.
     */
    create: XOR<DoctorPatientRequestCreateInput, DoctorPatientRequestUncheckedCreateInput>
    /**
     * In case the DoctorPatientRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorPatientRequestUpdateInput, DoctorPatientRequestUncheckedUpdateInput>
  }

  /**
   * DoctorPatientRequest delete
   */
  export type DoctorPatientRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
    /**
     * Filter which DoctorPatientRequest to delete.
     */
    where: DoctorPatientRequestWhereUniqueInput
  }

  /**
   * DoctorPatientRequest deleteMany
   */
  export type DoctorPatientRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorPatientRequests to delete
     */
    where?: DoctorPatientRequestWhereInput
  }

  /**
   * DoctorPatientRequest without action
   */
  export type DoctorPatientRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatientRequest
     */
    select?: DoctorPatientRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientRequestInclude<ExtArgs> | null
  }


  /**
   * Model DoctorPatient
   */

  export type AggregateDoctorPatient = {
    _count: DoctorPatientCountAggregateOutputType | null
    _min: DoctorPatientMinAggregateOutputType | null
    _max: DoctorPatientMaxAggregateOutputType | null
  }

  export type DoctorPatientMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    startDate: Date | null
    endDate: Date | null
    active: boolean | null
  }

  export type DoctorPatientMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    startDate: Date | null
    endDate: Date | null
    active: boolean | null
  }

  export type DoctorPatientCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    startDate: number
    endDate: number
    active: number
    _all: number
  }


  export type DoctorPatientMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    startDate?: true
    endDate?: true
    active?: true
  }

  export type DoctorPatientMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    startDate?: true
    endDate?: true
    active?: true
  }

  export type DoctorPatientCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    startDate?: true
    endDate?: true
    active?: true
    _all?: true
  }

  export type DoctorPatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorPatient to aggregate.
     */
    where?: DoctorPatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorPatients to fetch.
     */
    orderBy?: DoctorPatientOrderByWithRelationInput | DoctorPatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorPatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorPatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorPatients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorPatients
    **/
    _count?: true | DoctorPatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorPatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorPatientMaxAggregateInputType
  }

  export type GetDoctorPatientAggregateType<T extends DoctorPatientAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorPatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorPatient[P]>
      : GetScalarType<T[P], AggregateDoctorPatient[P]>
  }




  export type DoctorPatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorPatientWhereInput
    orderBy?: DoctorPatientOrderByWithAggregationInput | DoctorPatientOrderByWithAggregationInput[]
    by: DoctorPatientScalarFieldEnum[] | DoctorPatientScalarFieldEnum
    having?: DoctorPatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorPatientCountAggregateInputType | true
    _min?: DoctorPatientMinAggregateInputType
    _max?: DoctorPatientMaxAggregateInputType
  }

  export type DoctorPatientGroupByOutputType = {
    id: string
    patientId: string
    doctorId: string
    startDate: Date
    endDate: Date | null
    active: boolean
    _count: DoctorPatientCountAggregateOutputType | null
    _min: DoctorPatientMinAggregateOutputType | null
    _max: DoctorPatientMaxAggregateOutputType | null
  }

  type GetDoctorPatientGroupByPayload<T extends DoctorPatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorPatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorPatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorPatientGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorPatientGroupByOutputType[P]>
        }
      >
    >


  export type DoctorPatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    startDate?: boolean
    endDate?: boolean
    active?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorPatient"]>

  export type DoctorPatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    startDate?: boolean
    endDate?: boolean
    active?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorPatient"]>

  export type DoctorPatientSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    startDate?: boolean
    endDate?: boolean
    active?: boolean
  }

  export type DoctorPatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }
  export type DoctorPatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }

  export type $DoctorPatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorPatient"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      doctor: Prisma.$DoctorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      doctorId: string
      startDate: Date
      endDate: Date | null
      active: boolean
    }, ExtArgs["result"]["doctorPatient"]>
    composites: {}
  }

  type DoctorPatientGetPayload<S extends boolean | null | undefined | DoctorPatientDefaultArgs> = $Result.GetResult<Prisma.$DoctorPatientPayload, S>

  type DoctorPatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoctorPatientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorPatientCountAggregateInputType | true
    }

  export interface DoctorPatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorPatient'], meta: { name: 'DoctorPatient' } }
    /**
     * Find zero or one DoctorPatient that matches the filter.
     * @param {DoctorPatientFindUniqueArgs} args - Arguments to find a DoctorPatient
     * @example
     * // Get one DoctorPatient
     * const doctorPatient = await prisma.doctorPatient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorPatientFindUniqueArgs>(args: SelectSubset<T, DoctorPatientFindUniqueArgs<ExtArgs>>): Prisma__DoctorPatientClient<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DoctorPatient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DoctorPatientFindUniqueOrThrowArgs} args - Arguments to find a DoctorPatient
     * @example
     * // Get one DoctorPatient
     * const doctorPatient = await prisma.doctorPatient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorPatientFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorPatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorPatientClient<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DoctorPatient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientFindFirstArgs} args - Arguments to find a DoctorPatient
     * @example
     * // Get one DoctorPatient
     * const doctorPatient = await prisma.doctorPatient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorPatientFindFirstArgs>(args?: SelectSubset<T, DoctorPatientFindFirstArgs<ExtArgs>>): Prisma__DoctorPatientClient<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DoctorPatient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientFindFirstOrThrowArgs} args - Arguments to find a DoctorPatient
     * @example
     * // Get one DoctorPatient
     * const doctorPatient = await prisma.doctorPatient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorPatientFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorPatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorPatientClient<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DoctorPatients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorPatients
     * const doctorPatients = await prisma.doctorPatient.findMany()
     * 
     * // Get first 10 DoctorPatients
     * const doctorPatients = await prisma.doctorPatient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorPatientWithIdOnly = await prisma.doctorPatient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorPatientFindManyArgs>(args?: SelectSubset<T, DoctorPatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DoctorPatient.
     * @param {DoctorPatientCreateArgs} args - Arguments to create a DoctorPatient.
     * @example
     * // Create one DoctorPatient
     * const DoctorPatient = await prisma.doctorPatient.create({
     *   data: {
     *     // ... data to create a DoctorPatient
     *   }
     * })
     * 
     */
    create<T extends DoctorPatientCreateArgs>(args: SelectSubset<T, DoctorPatientCreateArgs<ExtArgs>>): Prisma__DoctorPatientClient<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DoctorPatients.
     * @param {DoctorPatientCreateManyArgs} args - Arguments to create many DoctorPatients.
     * @example
     * // Create many DoctorPatients
     * const doctorPatient = await prisma.doctorPatient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorPatientCreateManyArgs>(args?: SelectSubset<T, DoctorPatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorPatients and returns the data saved in the database.
     * @param {DoctorPatientCreateManyAndReturnArgs} args - Arguments to create many DoctorPatients.
     * @example
     * // Create many DoctorPatients
     * const doctorPatient = await prisma.doctorPatient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorPatients and only return the `id`
     * const doctorPatientWithIdOnly = await prisma.doctorPatient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorPatientCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorPatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DoctorPatient.
     * @param {DoctorPatientDeleteArgs} args - Arguments to delete one DoctorPatient.
     * @example
     * // Delete one DoctorPatient
     * const DoctorPatient = await prisma.doctorPatient.delete({
     *   where: {
     *     // ... filter to delete one DoctorPatient
     *   }
     * })
     * 
     */
    delete<T extends DoctorPatientDeleteArgs>(args: SelectSubset<T, DoctorPatientDeleteArgs<ExtArgs>>): Prisma__DoctorPatientClient<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DoctorPatient.
     * @param {DoctorPatientUpdateArgs} args - Arguments to update one DoctorPatient.
     * @example
     * // Update one DoctorPatient
     * const doctorPatient = await prisma.doctorPatient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorPatientUpdateArgs>(args: SelectSubset<T, DoctorPatientUpdateArgs<ExtArgs>>): Prisma__DoctorPatientClient<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DoctorPatients.
     * @param {DoctorPatientDeleteManyArgs} args - Arguments to filter DoctorPatients to delete.
     * @example
     * // Delete a few DoctorPatients
     * const { count } = await prisma.doctorPatient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorPatientDeleteManyArgs>(args?: SelectSubset<T, DoctorPatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorPatients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorPatients
     * const doctorPatient = await prisma.doctorPatient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorPatientUpdateManyArgs>(args: SelectSubset<T, DoctorPatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DoctorPatient.
     * @param {DoctorPatientUpsertArgs} args - Arguments to update or create a DoctorPatient.
     * @example
     * // Update or create a DoctorPatient
     * const doctorPatient = await prisma.doctorPatient.upsert({
     *   create: {
     *     // ... data to create a DoctorPatient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorPatient we want to update
     *   }
     * })
     */
    upsert<T extends DoctorPatientUpsertArgs>(args: SelectSubset<T, DoctorPatientUpsertArgs<ExtArgs>>): Prisma__DoctorPatientClient<$Result.GetResult<Prisma.$DoctorPatientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DoctorPatients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientCountArgs} args - Arguments to filter DoctorPatients to count.
     * @example
     * // Count the number of DoctorPatients
     * const count = await prisma.doctorPatient.count({
     *   where: {
     *     // ... the filter for the DoctorPatients we want to count
     *   }
     * })
    **/
    count<T extends DoctorPatientCountArgs>(
      args?: Subset<T, DoctorPatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorPatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorPatient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorPatientAggregateArgs>(args: Subset<T, DoctorPatientAggregateArgs>): Prisma.PrismaPromise<GetDoctorPatientAggregateType<T>>

    /**
     * Group by DoctorPatient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorPatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorPatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorPatientGroupByArgs['orderBy'] }
        : { orderBy?: DoctorPatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorPatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorPatient model
   */
  readonly fields: DoctorPatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorPatient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorPatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorPatient model
   */ 
  interface DoctorPatientFieldRefs {
    readonly id: FieldRef<"DoctorPatient", 'String'>
    readonly patientId: FieldRef<"DoctorPatient", 'String'>
    readonly doctorId: FieldRef<"DoctorPatient", 'String'>
    readonly startDate: FieldRef<"DoctorPatient", 'DateTime'>
    readonly endDate: FieldRef<"DoctorPatient", 'DateTime'>
    readonly active: FieldRef<"DoctorPatient", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * DoctorPatient findUnique
   */
  export type DoctorPatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatient to fetch.
     */
    where: DoctorPatientWhereUniqueInput
  }

  /**
   * DoctorPatient findUniqueOrThrow
   */
  export type DoctorPatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatient to fetch.
     */
    where: DoctorPatientWhereUniqueInput
  }

  /**
   * DoctorPatient findFirst
   */
  export type DoctorPatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatient to fetch.
     */
    where?: DoctorPatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorPatients to fetch.
     */
    orderBy?: DoctorPatientOrderByWithRelationInput | DoctorPatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorPatients.
     */
    cursor?: DoctorPatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorPatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorPatients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorPatients.
     */
    distinct?: DoctorPatientScalarFieldEnum | DoctorPatientScalarFieldEnum[]
  }

  /**
   * DoctorPatient findFirstOrThrow
   */
  export type DoctorPatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatient to fetch.
     */
    where?: DoctorPatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorPatients to fetch.
     */
    orderBy?: DoctorPatientOrderByWithRelationInput | DoctorPatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorPatients.
     */
    cursor?: DoctorPatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorPatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorPatients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorPatients.
     */
    distinct?: DoctorPatientScalarFieldEnum | DoctorPatientScalarFieldEnum[]
  }

  /**
   * DoctorPatient findMany
   */
  export type DoctorPatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    /**
     * Filter, which DoctorPatients to fetch.
     */
    where?: DoctorPatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorPatients to fetch.
     */
    orderBy?: DoctorPatientOrderByWithRelationInput | DoctorPatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorPatients.
     */
    cursor?: DoctorPatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorPatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorPatients.
     */
    skip?: number
    distinct?: DoctorPatientScalarFieldEnum | DoctorPatientScalarFieldEnum[]
  }

  /**
   * DoctorPatient create
   */
  export type DoctorPatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorPatient.
     */
    data: XOR<DoctorPatientCreateInput, DoctorPatientUncheckedCreateInput>
  }

  /**
   * DoctorPatient createMany
   */
  export type DoctorPatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorPatients.
     */
    data: DoctorPatientCreateManyInput | DoctorPatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorPatient createManyAndReturn
   */
  export type DoctorPatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DoctorPatients.
     */
    data: DoctorPatientCreateManyInput | DoctorPatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorPatient update
   */
  export type DoctorPatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorPatient.
     */
    data: XOR<DoctorPatientUpdateInput, DoctorPatientUncheckedUpdateInput>
    /**
     * Choose, which DoctorPatient to update.
     */
    where: DoctorPatientWhereUniqueInput
  }

  /**
   * DoctorPatient updateMany
   */
  export type DoctorPatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorPatients.
     */
    data: XOR<DoctorPatientUpdateManyMutationInput, DoctorPatientUncheckedUpdateManyInput>
    /**
     * Filter which DoctorPatients to update
     */
    where?: DoctorPatientWhereInput
  }

  /**
   * DoctorPatient upsert
   */
  export type DoctorPatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorPatient to update in case it exists.
     */
    where: DoctorPatientWhereUniqueInput
    /**
     * In case the DoctorPatient found by the `where` argument doesn't exist, create a new DoctorPatient with this data.
     */
    create: XOR<DoctorPatientCreateInput, DoctorPatientUncheckedCreateInput>
    /**
     * In case the DoctorPatient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorPatientUpdateInput, DoctorPatientUncheckedUpdateInput>
  }

  /**
   * DoctorPatient delete
   */
  export type DoctorPatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
    /**
     * Filter which DoctorPatient to delete.
     */
    where: DoctorPatientWhereUniqueInput
  }

  /**
   * DoctorPatient deleteMany
   */
  export type DoctorPatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorPatients to delete
     */
    where?: DoctorPatientWhereInput
  }

  /**
   * DoctorPatient without action
   */
  export type DoctorPatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorPatient
     */
    select?: DoctorPatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorPatientInclude<ExtArgs> | null
  }


  /**
   * Model Pharmacy
   */

  export type AggregatePharmacy = {
    _count: PharmacyCountAggregateOutputType | null
    _min: PharmacyMinAggregateOutputType | null
    _max: PharmacyMaxAggregateOutputType | null
  }

  export type PharmacyMinAggregateOutputType = {
    id: string | null
    userId: string | null
    pharmacyName: string | null
    pharmacyLicenseNumber: string | null
    pharmacyAddress: string | null
    contactName: string | null
    openingHours: string | null
    deliveryOptions: string | null
  }

  export type PharmacyMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    pharmacyName: string | null
    pharmacyLicenseNumber: string | null
    pharmacyAddress: string | null
    contactName: string | null
    openingHours: string | null
    deliveryOptions: string | null
  }

  export type PharmacyCountAggregateOutputType = {
    id: number
    userId: number
    pharmacyName: number
    pharmacyLicenseNumber: number
    pharmacyAddress: number
    contactName: number
    openingHours: number
    deliveryOptions: number
    _all: number
  }


  export type PharmacyMinAggregateInputType = {
    id?: true
    userId?: true
    pharmacyName?: true
    pharmacyLicenseNumber?: true
    pharmacyAddress?: true
    contactName?: true
    openingHours?: true
    deliveryOptions?: true
  }

  export type PharmacyMaxAggregateInputType = {
    id?: true
    userId?: true
    pharmacyName?: true
    pharmacyLicenseNumber?: true
    pharmacyAddress?: true
    contactName?: true
    openingHours?: true
    deliveryOptions?: true
  }

  export type PharmacyCountAggregateInputType = {
    id?: true
    userId?: true
    pharmacyName?: true
    pharmacyLicenseNumber?: true
    pharmacyAddress?: true
    contactName?: true
    openingHours?: true
    deliveryOptions?: true
    _all?: true
  }

  export type PharmacyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pharmacy to aggregate.
     */
    where?: PharmacyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pharmacies to fetch.
     */
    orderBy?: PharmacyOrderByWithRelationInput | PharmacyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PharmacyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pharmacies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pharmacies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pharmacies
    **/
    _count?: true | PharmacyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PharmacyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PharmacyMaxAggregateInputType
  }

  export type GetPharmacyAggregateType<T extends PharmacyAggregateArgs> = {
        [P in keyof T & keyof AggregatePharmacy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePharmacy[P]>
      : GetScalarType<T[P], AggregatePharmacy[P]>
  }




  export type PharmacyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PharmacyWhereInput
    orderBy?: PharmacyOrderByWithAggregationInput | PharmacyOrderByWithAggregationInput[]
    by: PharmacyScalarFieldEnum[] | PharmacyScalarFieldEnum
    having?: PharmacyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PharmacyCountAggregateInputType | true
    _min?: PharmacyMinAggregateInputType
    _max?: PharmacyMaxAggregateInputType
  }

  export type PharmacyGroupByOutputType = {
    id: string
    userId: string
    pharmacyName: string | null
    pharmacyLicenseNumber: string | null
    pharmacyAddress: string | null
    contactName: string | null
    openingHours: string | null
    deliveryOptions: string | null
    _count: PharmacyCountAggregateOutputType | null
    _min: PharmacyMinAggregateOutputType | null
    _max: PharmacyMaxAggregateOutputType | null
  }

  type GetPharmacyGroupByPayload<T extends PharmacyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PharmacyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PharmacyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PharmacyGroupByOutputType[P]>
            : GetScalarType<T[P], PharmacyGroupByOutputType[P]>
        }
      >
    >


  export type PharmacySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    pharmacyName?: boolean
    pharmacyLicenseNumber?: boolean
    pharmacyAddress?: boolean
    contactName?: boolean
    openingHours?: boolean
    deliveryOptions?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    prescriptions?: boolean | Pharmacy$prescriptionsArgs<ExtArgs>
    medicines?: boolean | Pharmacy$medicinesArgs<ExtArgs>
    _count?: boolean | PharmacyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pharmacy"]>

  export type PharmacySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    pharmacyName?: boolean
    pharmacyLicenseNumber?: boolean
    pharmacyAddress?: boolean
    contactName?: boolean
    openingHours?: boolean
    deliveryOptions?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pharmacy"]>

  export type PharmacySelectScalar = {
    id?: boolean
    userId?: boolean
    pharmacyName?: boolean
    pharmacyLicenseNumber?: boolean
    pharmacyAddress?: boolean
    contactName?: boolean
    openingHours?: boolean
    deliveryOptions?: boolean
  }

  export type PharmacyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    prescriptions?: boolean | Pharmacy$prescriptionsArgs<ExtArgs>
    medicines?: boolean | Pharmacy$medicinesArgs<ExtArgs>
    _count?: boolean | PharmacyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PharmacyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PharmacyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pharmacy"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      prescriptions: Prisma.$PrescriptionPayload<ExtArgs>[]
      medicines: Prisma.$MedicinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      pharmacyName: string | null
      pharmacyLicenseNumber: string | null
      pharmacyAddress: string | null
      contactName: string | null
      openingHours: string | null
      deliveryOptions: string | null
    }, ExtArgs["result"]["pharmacy"]>
    composites: {}
  }

  type PharmacyGetPayload<S extends boolean | null | undefined | PharmacyDefaultArgs> = $Result.GetResult<Prisma.$PharmacyPayload, S>

  type PharmacyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PharmacyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PharmacyCountAggregateInputType | true
    }

  export interface PharmacyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pharmacy'], meta: { name: 'Pharmacy' } }
    /**
     * Find zero or one Pharmacy that matches the filter.
     * @param {PharmacyFindUniqueArgs} args - Arguments to find a Pharmacy
     * @example
     * // Get one Pharmacy
     * const pharmacy = await prisma.pharmacy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PharmacyFindUniqueArgs>(args: SelectSubset<T, PharmacyFindUniqueArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pharmacy that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PharmacyFindUniqueOrThrowArgs} args - Arguments to find a Pharmacy
     * @example
     * // Get one Pharmacy
     * const pharmacy = await prisma.pharmacy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PharmacyFindUniqueOrThrowArgs>(args: SelectSubset<T, PharmacyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pharmacy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyFindFirstArgs} args - Arguments to find a Pharmacy
     * @example
     * // Get one Pharmacy
     * const pharmacy = await prisma.pharmacy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PharmacyFindFirstArgs>(args?: SelectSubset<T, PharmacyFindFirstArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pharmacy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyFindFirstOrThrowArgs} args - Arguments to find a Pharmacy
     * @example
     * // Get one Pharmacy
     * const pharmacy = await prisma.pharmacy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PharmacyFindFirstOrThrowArgs>(args?: SelectSubset<T, PharmacyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pharmacies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pharmacies
     * const pharmacies = await prisma.pharmacy.findMany()
     * 
     * // Get first 10 Pharmacies
     * const pharmacies = await prisma.pharmacy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pharmacyWithIdOnly = await prisma.pharmacy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PharmacyFindManyArgs>(args?: SelectSubset<T, PharmacyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pharmacy.
     * @param {PharmacyCreateArgs} args - Arguments to create a Pharmacy.
     * @example
     * // Create one Pharmacy
     * const Pharmacy = await prisma.pharmacy.create({
     *   data: {
     *     // ... data to create a Pharmacy
     *   }
     * })
     * 
     */
    create<T extends PharmacyCreateArgs>(args: SelectSubset<T, PharmacyCreateArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pharmacies.
     * @param {PharmacyCreateManyArgs} args - Arguments to create many Pharmacies.
     * @example
     * // Create many Pharmacies
     * const pharmacy = await prisma.pharmacy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PharmacyCreateManyArgs>(args?: SelectSubset<T, PharmacyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pharmacies and returns the data saved in the database.
     * @param {PharmacyCreateManyAndReturnArgs} args - Arguments to create many Pharmacies.
     * @example
     * // Create many Pharmacies
     * const pharmacy = await prisma.pharmacy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pharmacies and only return the `id`
     * const pharmacyWithIdOnly = await prisma.pharmacy.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PharmacyCreateManyAndReturnArgs>(args?: SelectSubset<T, PharmacyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Pharmacy.
     * @param {PharmacyDeleteArgs} args - Arguments to delete one Pharmacy.
     * @example
     * // Delete one Pharmacy
     * const Pharmacy = await prisma.pharmacy.delete({
     *   where: {
     *     // ... filter to delete one Pharmacy
     *   }
     * })
     * 
     */
    delete<T extends PharmacyDeleteArgs>(args: SelectSubset<T, PharmacyDeleteArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pharmacy.
     * @param {PharmacyUpdateArgs} args - Arguments to update one Pharmacy.
     * @example
     * // Update one Pharmacy
     * const pharmacy = await prisma.pharmacy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PharmacyUpdateArgs>(args: SelectSubset<T, PharmacyUpdateArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pharmacies.
     * @param {PharmacyDeleteManyArgs} args - Arguments to filter Pharmacies to delete.
     * @example
     * // Delete a few Pharmacies
     * const { count } = await prisma.pharmacy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PharmacyDeleteManyArgs>(args?: SelectSubset<T, PharmacyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pharmacies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pharmacies
     * const pharmacy = await prisma.pharmacy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PharmacyUpdateManyArgs>(args: SelectSubset<T, PharmacyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pharmacy.
     * @param {PharmacyUpsertArgs} args - Arguments to update or create a Pharmacy.
     * @example
     * // Update or create a Pharmacy
     * const pharmacy = await prisma.pharmacy.upsert({
     *   create: {
     *     // ... data to create a Pharmacy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pharmacy we want to update
     *   }
     * })
     */
    upsert<T extends PharmacyUpsertArgs>(args: SelectSubset<T, PharmacyUpsertArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pharmacies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyCountArgs} args - Arguments to filter Pharmacies to count.
     * @example
     * // Count the number of Pharmacies
     * const count = await prisma.pharmacy.count({
     *   where: {
     *     // ... the filter for the Pharmacies we want to count
     *   }
     * })
    **/
    count<T extends PharmacyCountArgs>(
      args?: Subset<T, PharmacyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PharmacyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pharmacy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PharmacyAggregateArgs>(args: Subset<T, PharmacyAggregateArgs>): Prisma.PrismaPromise<GetPharmacyAggregateType<T>>

    /**
     * Group by Pharmacy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PharmacyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PharmacyGroupByArgs['orderBy'] }
        : { orderBy?: PharmacyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PharmacyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pharmacy model
   */
  readonly fields: PharmacyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pharmacy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PharmacyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    prescriptions<T extends Pharmacy$prescriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Pharmacy$prescriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findMany"> | Null>
    medicines<T extends Pharmacy$medicinesArgs<ExtArgs> = {}>(args?: Subset<T, Pharmacy$medicinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pharmacy model
   */ 
  interface PharmacyFieldRefs {
    readonly id: FieldRef<"Pharmacy", 'String'>
    readonly userId: FieldRef<"Pharmacy", 'String'>
    readonly pharmacyName: FieldRef<"Pharmacy", 'String'>
    readonly pharmacyLicenseNumber: FieldRef<"Pharmacy", 'String'>
    readonly pharmacyAddress: FieldRef<"Pharmacy", 'String'>
    readonly contactName: FieldRef<"Pharmacy", 'String'>
    readonly openingHours: FieldRef<"Pharmacy", 'String'>
    readonly deliveryOptions: FieldRef<"Pharmacy", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Pharmacy findUnique
   */
  export type PharmacyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    /**
     * Filter, which Pharmacy to fetch.
     */
    where: PharmacyWhereUniqueInput
  }

  /**
   * Pharmacy findUniqueOrThrow
   */
  export type PharmacyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    /**
     * Filter, which Pharmacy to fetch.
     */
    where: PharmacyWhereUniqueInput
  }

  /**
   * Pharmacy findFirst
   */
  export type PharmacyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    /**
     * Filter, which Pharmacy to fetch.
     */
    where?: PharmacyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pharmacies to fetch.
     */
    orderBy?: PharmacyOrderByWithRelationInput | PharmacyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pharmacies.
     */
    cursor?: PharmacyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pharmacies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pharmacies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pharmacies.
     */
    distinct?: PharmacyScalarFieldEnum | PharmacyScalarFieldEnum[]
  }

  /**
   * Pharmacy findFirstOrThrow
   */
  export type PharmacyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    /**
     * Filter, which Pharmacy to fetch.
     */
    where?: PharmacyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pharmacies to fetch.
     */
    orderBy?: PharmacyOrderByWithRelationInput | PharmacyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pharmacies.
     */
    cursor?: PharmacyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pharmacies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pharmacies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pharmacies.
     */
    distinct?: PharmacyScalarFieldEnum | PharmacyScalarFieldEnum[]
  }

  /**
   * Pharmacy findMany
   */
  export type PharmacyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    /**
     * Filter, which Pharmacies to fetch.
     */
    where?: PharmacyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pharmacies to fetch.
     */
    orderBy?: PharmacyOrderByWithRelationInput | PharmacyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pharmacies.
     */
    cursor?: PharmacyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pharmacies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pharmacies.
     */
    skip?: number
    distinct?: PharmacyScalarFieldEnum | PharmacyScalarFieldEnum[]
  }

  /**
   * Pharmacy create
   */
  export type PharmacyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    /**
     * The data needed to create a Pharmacy.
     */
    data: XOR<PharmacyCreateInput, PharmacyUncheckedCreateInput>
  }

  /**
   * Pharmacy createMany
   */
  export type PharmacyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pharmacies.
     */
    data: PharmacyCreateManyInput | PharmacyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pharmacy createManyAndReturn
   */
  export type PharmacyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Pharmacies.
     */
    data: PharmacyCreateManyInput | PharmacyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pharmacy update
   */
  export type PharmacyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    /**
     * The data needed to update a Pharmacy.
     */
    data: XOR<PharmacyUpdateInput, PharmacyUncheckedUpdateInput>
    /**
     * Choose, which Pharmacy to update.
     */
    where: PharmacyWhereUniqueInput
  }

  /**
   * Pharmacy updateMany
   */
  export type PharmacyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pharmacies.
     */
    data: XOR<PharmacyUpdateManyMutationInput, PharmacyUncheckedUpdateManyInput>
    /**
     * Filter which Pharmacies to update
     */
    where?: PharmacyWhereInput
  }

  /**
   * Pharmacy upsert
   */
  export type PharmacyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    /**
     * The filter to search for the Pharmacy to update in case it exists.
     */
    where: PharmacyWhereUniqueInput
    /**
     * In case the Pharmacy found by the `where` argument doesn't exist, create a new Pharmacy with this data.
     */
    create: XOR<PharmacyCreateInput, PharmacyUncheckedCreateInput>
    /**
     * In case the Pharmacy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PharmacyUpdateInput, PharmacyUncheckedUpdateInput>
  }

  /**
   * Pharmacy delete
   */
  export type PharmacyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    /**
     * Filter which Pharmacy to delete.
     */
    where: PharmacyWhereUniqueInput
  }

  /**
   * Pharmacy deleteMany
   */
  export type PharmacyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pharmacies to delete
     */
    where?: PharmacyWhereInput
  }

  /**
   * Pharmacy.prescriptions
   */
  export type Pharmacy$prescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    where?: PrescriptionWhereInput
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    cursor?: PrescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Pharmacy.medicines
   */
  export type Pharmacy$medicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    where?: MedicineWhereInput
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    cursor?: MedicineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Pharmacy without action
   */
  export type PharmacyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
  }


  /**
   * Model Medicine
   */

  export type AggregateMedicine = {
    _count: MedicineCountAggregateOutputType | null
    _avg: MedicineAvgAggregateOutputType | null
    _sum: MedicineSumAggregateOutputType | null
    _min: MedicineMinAggregateOutputType | null
    _max: MedicineMaxAggregateOutputType | null
  }

  export type MedicineAvgAggregateOutputType = {
    stock: number | null
    price: number | null
  }

  export type MedicineSumAggregateOutputType = {
    stock: number | null
    price: number | null
  }

  export type MedicineMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    stock: number | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicineMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    stock: number | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicineCountAggregateOutputType = {
    id: number
    name: number
    description: number
    stock: number
    price: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicineAvgAggregateInputType = {
    stock?: true
    price?: true
  }

  export type MedicineSumAggregateInputType = {
    stock?: true
    price?: true
  }

  export type MedicineMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    stock?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicineMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    stock?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicineCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    stock?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medicine to aggregate.
     */
    where?: MedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medicines
    **/
    _count?: true | MedicineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicineMaxAggregateInputType
  }

  export type GetMedicineAggregateType<T extends MedicineAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicine[P]>
      : GetScalarType<T[P], AggregateMedicine[P]>
  }




  export type MedicineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicineWhereInput
    orderBy?: MedicineOrderByWithAggregationInput | MedicineOrderByWithAggregationInput[]
    by: MedicineScalarFieldEnum[] | MedicineScalarFieldEnum
    having?: MedicineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicineCountAggregateInputType | true
    _avg?: MedicineAvgAggregateInputType
    _sum?: MedicineSumAggregateInputType
    _min?: MedicineMinAggregateInputType
    _max?: MedicineMaxAggregateInputType
  }

  export type MedicineGroupByOutputType = {
    id: string
    name: string
    description: string | null
    stock: number
    price: number
    createdAt: Date
    updatedAt: Date
    _count: MedicineCountAggregateOutputType | null
    _avg: MedicineAvgAggregateOutputType | null
    _sum: MedicineSumAggregateOutputType | null
    _min: MedicineMinAggregateOutputType | null
    _max: MedicineMaxAggregateOutputType | null
  }

  type GetMedicineGroupByPayload<T extends MedicineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicineGroupByOutputType[P]>
            : GetScalarType<T[P], MedicineGroupByOutputType[P]>
        }
      >
    >


  export type MedicineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    stock?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    prescriptions?: boolean | Medicine$prescriptionsArgs<ExtArgs>
    pharmacies?: boolean | Medicine$pharmaciesArgs<ExtArgs>
    _count?: boolean | MedicineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicine"]>

  export type MedicineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    stock?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["medicine"]>

  export type MedicineSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    stock?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MedicineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescriptions?: boolean | Medicine$prescriptionsArgs<ExtArgs>
    pharmacies?: boolean | Medicine$pharmaciesArgs<ExtArgs>
    _count?: boolean | MedicineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MedicinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Medicine"
    objects: {
      prescriptions: Prisma.$PrescriptionPayload<ExtArgs>[]
      pharmacies: Prisma.$PharmacyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      stock: number
      price: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicine"]>
    composites: {}
  }

  type MedicineGetPayload<S extends boolean | null | undefined | MedicineDefaultArgs> = $Result.GetResult<Prisma.$MedicinePayload, S>

  type MedicineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MedicineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MedicineCountAggregateInputType | true
    }

  export interface MedicineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medicine'], meta: { name: 'Medicine' } }
    /**
     * Find zero or one Medicine that matches the filter.
     * @param {MedicineFindUniqueArgs} args - Arguments to find a Medicine
     * @example
     * // Get one Medicine
     * const medicine = await prisma.medicine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicineFindUniqueArgs>(args: SelectSubset<T, MedicineFindUniqueArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Medicine that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MedicineFindUniqueOrThrowArgs} args - Arguments to find a Medicine
     * @example
     * // Get one Medicine
     * const medicine = await prisma.medicine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicineFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Medicine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineFindFirstArgs} args - Arguments to find a Medicine
     * @example
     * // Get one Medicine
     * const medicine = await prisma.medicine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicineFindFirstArgs>(args?: SelectSubset<T, MedicineFindFirstArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Medicine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineFindFirstOrThrowArgs} args - Arguments to find a Medicine
     * @example
     * // Get one Medicine
     * const medicine = await prisma.medicine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicineFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicineFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Medicines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medicines
     * const medicines = await prisma.medicine.findMany()
     * 
     * // Get first 10 Medicines
     * const medicines = await prisma.medicine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicineWithIdOnly = await prisma.medicine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicineFindManyArgs>(args?: SelectSubset<T, MedicineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Medicine.
     * @param {MedicineCreateArgs} args - Arguments to create a Medicine.
     * @example
     * // Create one Medicine
     * const Medicine = await prisma.medicine.create({
     *   data: {
     *     // ... data to create a Medicine
     *   }
     * })
     * 
     */
    create<T extends MedicineCreateArgs>(args: SelectSubset<T, MedicineCreateArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Medicines.
     * @param {MedicineCreateManyArgs} args - Arguments to create many Medicines.
     * @example
     * // Create many Medicines
     * const medicine = await prisma.medicine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicineCreateManyArgs>(args?: SelectSubset<T, MedicineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medicines and returns the data saved in the database.
     * @param {MedicineCreateManyAndReturnArgs} args - Arguments to create many Medicines.
     * @example
     * // Create many Medicines
     * const medicine = await prisma.medicine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medicines and only return the `id`
     * const medicineWithIdOnly = await prisma.medicine.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicineCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Medicine.
     * @param {MedicineDeleteArgs} args - Arguments to delete one Medicine.
     * @example
     * // Delete one Medicine
     * const Medicine = await prisma.medicine.delete({
     *   where: {
     *     // ... filter to delete one Medicine
     *   }
     * })
     * 
     */
    delete<T extends MedicineDeleteArgs>(args: SelectSubset<T, MedicineDeleteArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Medicine.
     * @param {MedicineUpdateArgs} args - Arguments to update one Medicine.
     * @example
     * // Update one Medicine
     * const medicine = await prisma.medicine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicineUpdateArgs>(args: SelectSubset<T, MedicineUpdateArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Medicines.
     * @param {MedicineDeleteManyArgs} args - Arguments to filter Medicines to delete.
     * @example
     * // Delete a few Medicines
     * const { count } = await prisma.medicine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicineDeleteManyArgs>(args?: SelectSubset<T, MedicineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medicines
     * const medicine = await prisma.medicine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicineUpdateManyArgs>(args: SelectSubset<T, MedicineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Medicine.
     * @param {MedicineUpsertArgs} args - Arguments to update or create a Medicine.
     * @example
     * // Update or create a Medicine
     * const medicine = await prisma.medicine.upsert({
     *   create: {
     *     // ... data to create a Medicine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medicine we want to update
     *   }
     * })
     */
    upsert<T extends MedicineUpsertArgs>(args: SelectSubset<T, MedicineUpsertArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Medicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineCountArgs} args - Arguments to filter Medicines to count.
     * @example
     * // Count the number of Medicines
     * const count = await prisma.medicine.count({
     *   where: {
     *     // ... the filter for the Medicines we want to count
     *   }
     * })
    **/
    count<T extends MedicineCountArgs>(
      args?: Subset<T, MedicineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medicine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicineAggregateArgs>(args: Subset<T, MedicineAggregateArgs>): Prisma.PrismaPromise<GetMedicineAggregateType<T>>

    /**
     * Group by Medicine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicineGroupByArgs['orderBy'] }
        : { orderBy?: MedicineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Medicine model
   */
  readonly fields: MedicineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Medicine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    prescriptions<T extends Medicine$prescriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Medicine$prescriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findMany"> | Null>
    pharmacies<T extends Medicine$pharmaciesArgs<ExtArgs> = {}>(args?: Subset<T, Medicine$pharmaciesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Medicine model
   */ 
  interface MedicineFieldRefs {
    readonly id: FieldRef<"Medicine", 'String'>
    readonly name: FieldRef<"Medicine", 'String'>
    readonly description: FieldRef<"Medicine", 'String'>
    readonly stock: FieldRef<"Medicine", 'Int'>
    readonly price: FieldRef<"Medicine", 'Float'>
    readonly createdAt: FieldRef<"Medicine", 'DateTime'>
    readonly updatedAt: FieldRef<"Medicine", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Medicine findUnique
   */
  export type MedicineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicine to fetch.
     */
    where: MedicineWhereUniqueInput
  }

  /**
   * Medicine findUniqueOrThrow
   */
  export type MedicineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicine to fetch.
     */
    where: MedicineWhereUniqueInput
  }

  /**
   * Medicine findFirst
   */
  export type MedicineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicine to fetch.
     */
    where?: MedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medicines.
     */
    cursor?: MedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medicines.
     */
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Medicine findFirstOrThrow
   */
  export type MedicineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicine to fetch.
     */
    where?: MedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medicines.
     */
    cursor?: MedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medicines.
     */
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Medicine findMany
   */
  export type MedicineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicines to fetch.
     */
    where?: MedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medicines.
     */
    cursor?: MedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Medicine create
   */
  export type MedicineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * The data needed to create a Medicine.
     */
    data: XOR<MedicineCreateInput, MedicineUncheckedCreateInput>
  }

  /**
   * Medicine createMany
   */
  export type MedicineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Medicines.
     */
    data: MedicineCreateManyInput | MedicineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Medicine createManyAndReturn
   */
  export type MedicineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Medicines.
     */
    data: MedicineCreateManyInput | MedicineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Medicine update
   */
  export type MedicineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * The data needed to update a Medicine.
     */
    data: XOR<MedicineUpdateInput, MedicineUncheckedUpdateInput>
    /**
     * Choose, which Medicine to update.
     */
    where: MedicineWhereUniqueInput
  }

  /**
   * Medicine updateMany
   */
  export type MedicineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Medicines.
     */
    data: XOR<MedicineUpdateManyMutationInput, MedicineUncheckedUpdateManyInput>
    /**
     * Filter which Medicines to update
     */
    where?: MedicineWhereInput
  }

  /**
   * Medicine upsert
   */
  export type MedicineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * The filter to search for the Medicine to update in case it exists.
     */
    where: MedicineWhereUniqueInput
    /**
     * In case the Medicine found by the `where` argument doesn't exist, create a new Medicine with this data.
     */
    create: XOR<MedicineCreateInput, MedicineUncheckedCreateInput>
    /**
     * In case the Medicine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicineUpdateInput, MedicineUncheckedUpdateInput>
  }

  /**
   * Medicine delete
   */
  export type MedicineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter which Medicine to delete.
     */
    where: MedicineWhereUniqueInput
  }

  /**
   * Medicine deleteMany
   */
  export type MedicineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medicines to delete
     */
    where?: MedicineWhereInput
  }

  /**
   * Medicine.prescriptions
   */
  export type Medicine$prescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    where?: PrescriptionWhereInput
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    cursor?: PrescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Medicine.pharmacies
   */
  export type Medicine$pharmaciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    where?: PharmacyWhereInput
    orderBy?: PharmacyOrderByWithRelationInput | PharmacyOrderByWithRelationInput[]
    cursor?: PharmacyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PharmacyScalarFieldEnum | PharmacyScalarFieldEnum[]
  }

  /**
   * Medicine without action
   */
  export type MedicineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    userId: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    reports?: boolean | Admin$reportsArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    reports?: boolean | Admin$reportsArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reports<T extends Admin$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Admin$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly userId: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin.reports
   */
  export type Admin$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model Prescription
   */

  export type AggregatePrescription = {
    _count: PrescriptionCountAggregateOutputType | null
    _min: PrescriptionMinAggregateOutputType | null
    _max: PrescriptionMaxAggregateOutputType | null
  }

  export type PrescriptionMinAggregateOutputType = {
    id: string | null
    date: Date | null
    details: string | null
    approved: boolean | null
    patientId: string | null
    doctorId: string | null
    medicines_id: string | null
    pharmacyId: string | null
  }

  export type PrescriptionMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    details: string | null
    approved: boolean | null
    patientId: string | null
    doctorId: string | null
    medicines_id: string | null
    pharmacyId: string | null
  }

  export type PrescriptionCountAggregateOutputType = {
    id: number
    date: number
    details: number
    approved: number
    patientId: number
    doctorId: number
    medicines_id: number
    pharmacyId: number
    _all: number
  }


  export type PrescriptionMinAggregateInputType = {
    id?: true
    date?: true
    details?: true
    approved?: true
    patientId?: true
    doctorId?: true
    medicines_id?: true
    pharmacyId?: true
  }

  export type PrescriptionMaxAggregateInputType = {
    id?: true
    date?: true
    details?: true
    approved?: true
    patientId?: true
    doctorId?: true
    medicines_id?: true
    pharmacyId?: true
  }

  export type PrescriptionCountAggregateInputType = {
    id?: true
    date?: true
    details?: true
    approved?: true
    patientId?: true
    doctorId?: true
    medicines_id?: true
    pharmacyId?: true
    _all?: true
  }

  export type PrescriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prescription to aggregate.
     */
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     */
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prescriptions
    **/
    _count?: true | PrescriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrescriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrescriptionMaxAggregateInputType
  }

  export type GetPrescriptionAggregateType<T extends PrescriptionAggregateArgs> = {
        [P in keyof T & keyof AggregatePrescription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrescription[P]>
      : GetScalarType<T[P], AggregatePrescription[P]>
  }




  export type PrescriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescriptionWhereInput
    orderBy?: PrescriptionOrderByWithAggregationInput | PrescriptionOrderByWithAggregationInput[]
    by: PrescriptionScalarFieldEnum[] | PrescriptionScalarFieldEnum
    having?: PrescriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrescriptionCountAggregateInputType | true
    _min?: PrescriptionMinAggregateInputType
    _max?: PrescriptionMaxAggregateInputType
  }

  export type PrescriptionGroupByOutputType = {
    id: string
    date: Date
    details: string
    approved: boolean
    patientId: string
    doctorId: string
    medicines_id: string | null
    pharmacyId: string | null
    _count: PrescriptionCountAggregateOutputType | null
    _min: PrescriptionMinAggregateOutputType | null
    _max: PrescriptionMaxAggregateOutputType | null
  }

  type GetPrescriptionGroupByPayload<T extends PrescriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrescriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrescriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrescriptionGroupByOutputType[P]>
            : GetScalarType<T[P], PrescriptionGroupByOutputType[P]>
        }
      >
    >


  export type PrescriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    details?: boolean
    approved?: boolean
    patientId?: boolean
    doctorId?: boolean
    medicines_id?: boolean
    pharmacyId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    pharmacy?: boolean | Prescription$pharmacyArgs<ExtArgs>
    prescription_medicines?: boolean | Prescription$prescription_medicinesArgs<ExtArgs>
  }, ExtArgs["result"]["prescription"]>

  export type PrescriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    details?: boolean
    approved?: boolean
    patientId?: boolean
    doctorId?: boolean
    medicines_id?: boolean
    pharmacyId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    pharmacy?: boolean | Prescription$pharmacyArgs<ExtArgs>
    prescription_medicines?: boolean | Prescription$prescription_medicinesArgs<ExtArgs>
  }, ExtArgs["result"]["prescription"]>

  export type PrescriptionSelectScalar = {
    id?: boolean
    date?: boolean
    details?: boolean
    approved?: boolean
    patientId?: boolean
    doctorId?: boolean
    medicines_id?: boolean
    pharmacyId?: boolean
  }

  export type PrescriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    pharmacy?: boolean | Prescription$pharmacyArgs<ExtArgs>
    prescription_medicines?: boolean | Prescription$prescription_medicinesArgs<ExtArgs>
  }
  export type PrescriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    pharmacy?: boolean | Prescription$pharmacyArgs<ExtArgs>
    prescription_medicines?: boolean | Prescription$prescription_medicinesArgs<ExtArgs>
  }

  export type $PrescriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Prescription"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      doctor: Prisma.$DoctorPayload<ExtArgs>
      pharmacy: Prisma.$PharmacyPayload<ExtArgs> | null
      prescription_medicines: Prisma.$MedicinePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      details: string
      approved: boolean
      patientId: string
      doctorId: string
      medicines_id: string | null
      pharmacyId: string | null
    }, ExtArgs["result"]["prescription"]>
    composites: {}
  }

  type PrescriptionGetPayload<S extends boolean | null | undefined | PrescriptionDefaultArgs> = $Result.GetResult<Prisma.$PrescriptionPayload, S>

  type PrescriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrescriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PrescriptionCountAggregateInputType | true
    }

  export interface PrescriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prescription'], meta: { name: 'Prescription' } }
    /**
     * Find zero or one Prescription that matches the filter.
     * @param {PrescriptionFindUniqueArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrescriptionFindUniqueArgs>(args: SelectSubset<T, PrescriptionFindUniqueArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Prescription that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PrescriptionFindUniqueOrThrowArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrescriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, PrescriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Prescription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionFindFirstArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrescriptionFindFirstArgs>(args?: SelectSubset<T, PrescriptionFindFirstArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Prescription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionFindFirstOrThrowArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrescriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, PrescriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Prescriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prescriptions
     * const prescriptions = await prisma.prescription.findMany()
     * 
     * // Get first 10 Prescriptions
     * const prescriptions = await prisma.prescription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prescriptionWithIdOnly = await prisma.prescription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrescriptionFindManyArgs>(args?: SelectSubset<T, PrescriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Prescription.
     * @param {PrescriptionCreateArgs} args - Arguments to create a Prescription.
     * @example
     * // Create one Prescription
     * const Prescription = await prisma.prescription.create({
     *   data: {
     *     // ... data to create a Prescription
     *   }
     * })
     * 
     */
    create<T extends PrescriptionCreateArgs>(args: SelectSubset<T, PrescriptionCreateArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Prescriptions.
     * @param {PrescriptionCreateManyArgs} args - Arguments to create many Prescriptions.
     * @example
     * // Create many Prescriptions
     * const prescription = await prisma.prescription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrescriptionCreateManyArgs>(args?: SelectSubset<T, PrescriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Prescriptions and returns the data saved in the database.
     * @param {PrescriptionCreateManyAndReturnArgs} args - Arguments to create many Prescriptions.
     * @example
     * // Create many Prescriptions
     * const prescription = await prisma.prescription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Prescriptions and only return the `id`
     * const prescriptionWithIdOnly = await prisma.prescription.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrescriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, PrescriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Prescription.
     * @param {PrescriptionDeleteArgs} args - Arguments to delete one Prescription.
     * @example
     * // Delete one Prescription
     * const Prescription = await prisma.prescription.delete({
     *   where: {
     *     // ... filter to delete one Prescription
     *   }
     * })
     * 
     */
    delete<T extends PrescriptionDeleteArgs>(args: SelectSubset<T, PrescriptionDeleteArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Prescription.
     * @param {PrescriptionUpdateArgs} args - Arguments to update one Prescription.
     * @example
     * // Update one Prescription
     * const prescription = await prisma.prescription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrescriptionUpdateArgs>(args: SelectSubset<T, PrescriptionUpdateArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Prescriptions.
     * @param {PrescriptionDeleteManyArgs} args - Arguments to filter Prescriptions to delete.
     * @example
     * // Delete a few Prescriptions
     * const { count } = await prisma.prescription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrescriptionDeleteManyArgs>(args?: SelectSubset<T, PrescriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prescriptions
     * const prescription = await prisma.prescription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrescriptionUpdateManyArgs>(args: SelectSubset<T, PrescriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prescription.
     * @param {PrescriptionUpsertArgs} args - Arguments to update or create a Prescription.
     * @example
     * // Update or create a Prescription
     * const prescription = await prisma.prescription.upsert({
     *   create: {
     *     // ... data to create a Prescription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prescription we want to update
     *   }
     * })
     */
    upsert<T extends PrescriptionUpsertArgs>(args: SelectSubset<T, PrescriptionUpsertArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Prescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionCountArgs} args - Arguments to filter Prescriptions to count.
     * @example
     * // Count the number of Prescriptions
     * const count = await prisma.prescription.count({
     *   where: {
     *     // ... the filter for the Prescriptions we want to count
     *   }
     * })
    **/
    count<T extends PrescriptionCountArgs>(
      args?: Subset<T, PrescriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrescriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrescriptionAggregateArgs>(args: Subset<T, PrescriptionAggregateArgs>): Prisma.PrismaPromise<GetPrescriptionAggregateType<T>>

    /**
     * Group by Prescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrescriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrescriptionGroupByArgs['orderBy'] }
        : { orderBy?: PrescriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrescriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrescriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prescription model
   */
  readonly fields: PrescriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prescription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrescriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    pharmacy<T extends Prescription$pharmacyArgs<ExtArgs> = {}>(args?: Subset<T, Prescription$pharmacyArgs<ExtArgs>>): Prisma__PharmacyClient<$Result.GetResult<Prisma.$PharmacyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    prescription_medicines<T extends Prescription$prescription_medicinesArgs<ExtArgs> = {}>(args?: Subset<T, Prescription$prescription_medicinesArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Prescription model
   */ 
  interface PrescriptionFieldRefs {
    readonly id: FieldRef<"Prescription", 'String'>
    readonly date: FieldRef<"Prescription", 'DateTime'>
    readonly details: FieldRef<"Prescription", 'String'>
    readonly approved: FieldRef<"Prescription", 'Boolean'>
    readonly patientId: FieldRef<"Prescription", 'String'>
    readonly doctorId: FieldRef<"Prescription", 'String'>
    readonly medicines_id: FieldRef<"Prescription", 'String'>
    readonly pharmacyId: FieldRef<"Prescription", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Prescription findUnique
   */
  export type PrescriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescription to fetch.
     */
    where: PrescriptionWhereUniqueInput
  }

  /**
   * Prescription findUniqueOrThrow
   */
  export type PrescriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescription to fetch.
     */
    where: PrescriptionWhereUniqueInput
  }

  /**
   * Prescription findFirst
   */
  export type PrescriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescription to fetch.
     */
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     */
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prescriptions.
     */
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prescriptions.
     */
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Prescription findFirstOrThrow
   */
  export type PrescriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescription to fetch.
     */
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     */
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prescriptions.
     */
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prescriptions.
     */
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Prescription findMany
   */
  export type PrescriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescriptions to fetch.
     */
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     */
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prescriptions.
     */
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     */
    skip?: number
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Prescription create
   */
  export type PrescriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Prescription.
     */
    data: XOR<PrescriptionCreateInput, PrescriptionUncheckedCreateInput>
  }

  /**
   * Prescription createMany
   */
  export type PrescriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prescriptions.
     */
    data: PrescriptionCreateManyInput | PrescriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Prescription createManyAndReturn
   */
  export type PrescriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Prescriptions.
     */
    data: PrescriptionCreateManyInput | PrescriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Prescription update
   */
  export type PrescriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Prescription.
     */
    data: XOR<PrescriptionUpdateInput, PrescriptionUncheckedUpdateInput>
    /**
     * Choose, which Prescription to update.
     */
    where: PrescriptionWhereUniqueInput
  }

  /**
   * Prescription updateMany
   */
  export type PrescriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prescriptions.
     */
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyInput>
    /**
     * Filter which Prescriptions to update
     */
    where?: PrescriptionWhereInput
  }

  /**
   * Prescription upsert
   */
  export type PrescriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Prescription to update in case it exists.
     */
    where: PrescriptionWhereUniqueInput
    /**
     * In case the Prescription found by the `where` argument doesn't exist, create a new Prescription with this data.
     */
    create: XOR<PrescriptionCreateInput, PrescriptionUncheckedCreateInput>
    /**
     * In case the Prescription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrescriptionUpdateInput, PrescriptionUncheckedUpdateInput>
  }

  /**
   * Prescription delete
   */
  export type PrescriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter which Prescription to delete.
     */
    where: PrescriptionWhereUniqueInput
  }

  /**
   * Prescription deleteMany
   */
  export type PrescriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prescriptions to delete
     */
    where?: PrescriptionWhereInput
  }

  /**
   * Prescription.pharmacy
   */
  export type Prescription$pharmacyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacy
     */
    select?: PharmacySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyInclude<ExtArgs> | null
    where?: PharmacyWhereInput
  }

  /**
   * Prescription.prescription_medicines
   */
  export type Prescription$prescription_medicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    where?: MedicineWhereInput
  }

  /**
   * Prescription without action
   */
  export type PrescriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    read: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    read?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    read?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    read?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: string
    title: string
    message: string
    read: boolean
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    readBy?: boolean | Notification$readByArgs<ExtArgs>
    _count?: boolean | NotificationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    readBy?: boolean | Notification$readByArgs<ExtArgs>
    _count?: boolean | NotificationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      readBy: Prisma.$NotificationReadPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      title: string
      message: string
      read: boolean
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    readBy<T extends Notification$readByArgs<ExtArgs> = {}>(args?: Subset<T, Notification$readByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly metadata: FieldRef<"Notification", 'Json'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification.readBy
   */
  export type Notification$readByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    where?: NotificationReadWhereInput
    orderBy?: NotificationReadOrderByWithRelationInput | NotificationReadOrderByWithRelationInput[]
    cursor?: NotificationReadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationReadScalarFieldEnum | NotificationReadScalarFieldEnum[]
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model NotificationRead
   */

  export type AggregateNotificationRead = {
    _count: NotificationReadCountAggregateOutputType | null
    _min: NotificationReadMinAggregateOutputType | null
    _max: NotificationReadMaxAggregateOutputType | null
  }

  export type NotificationReadMinAggregateOutputType = {
    id: string | null
    notificationId: string | null
    userId: string | null
    readAt: Date | null
  }

  export type NotificationReadMaxAggregateOutputType = {
    id: string | null
    notificationId: string | null
    userId: string | null
    readAt: Date | null
  }

  export type NotificationReadCountAggregateOutputType = {
    id: number
    notificationId: number
    userId: number
    readAt: number
    _all: number
  }


  export type NotificationReadMinAggregateInputType = {
    id?: true
    notificationId?: true
    userId?: true
    readAt?: true
  }

  export type NotificationReadMaxAggregateInputType = {
    id?: true
    notificationId?: true
    userId?: true
    readAt?: true
  }

  export type NotificationReadCountAggregateInputType = {
    id?: true
    notificationId?: true
    userId?: true
    readAt?: true
    _all?: true
  }

  export type NotificationReadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationRead to aggregate.
     */
    where?: NotificationReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationReads to fetch.
     */
    orderBy?: NotificationReadOrderByWithRelationInput | NotificationReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationReads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationReads
    **/
    _count?: true | NotificationReadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationReadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationReadMaxAggregateInputType
  }

  export type GetNotificationReadAggregateType<T extends NotificationReadAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationRead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationRead[P]>
      : GetScalarType<T[P], AggregateNotificationRead[P]>
  }




  export type NotificationReadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationReadWhereInput
    orderBy?: NotificationReadOrderByWithAggregationInput | NotificationReadOrderByWithAggregationInput[]
    by: NotificationReadScalarFieldEnum[] | NotificationReadScalarFieldEnum
    having?: NotificationReadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationReadCountAggregateInputType | true
    _min?: NotificationReadMinAggregateInputType
    _max?: NotificationReadMaxAggregateInputType
  }

  export type NotificationReadGroupByOutputType = {
    id: string
    notificationId: string
    userId: string
    readAt: Date
    _count: NotificationReadCountAggregateOutputType | null
    _min: NotificationReadMinAggregateOutputType | null
    _max: NotificationReadMaxAggregateOutputType | null
  }

  type GetNotificationReadGroupByPayload<T extends NotificationReadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationReadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationReadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationReadGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationReadGroupByOutputType[P]>
        }
      >
    >


  export type NotificationReadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    userId?: boolean
    readAt?: boolean
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationRead"]>

  export type NotificationReadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    userId?: boolean
    readAt?: boolean
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationRead"]>

  export type NotificationReadSelectScalar = {
    id?: boolean
    notificationId?: boolean
    userId?: boolean
    readAt?: boolean
  }

  export type NotificationReadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationReadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationReadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationRead"
    objects: {
      notification: Prisma.$NotificationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      notificationId: string
      userId: string
      readAt: Date
    }, ExtArgs["result"]["notificationRead"]>
    composites: {}
  }

  type NotificationReadGetPayload<S extends boolean | null | undefined | NotificationReadDefaultArgs> = $Result.GetResult<Prisma.$NotificationReadPayload, S>

  type NotificationReadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationReadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationReadCountAggregateInputType | true
    }

  export interface NotificationReadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationRead'], meta: { name: 'NotificationRead' } }
    /**
     * Find zero or one NotificationRead that matches the filter.
     * @param {NotificationReadFindUniqueArgs} args - Arguments to find a NotificationRead
     * @example
     * // Get one NotificationRead
     * const notificationRead = await prisma.notificationRead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationReadFindUniqueArgs>(args: SelectSubset<T, NotificationReadFindUniqueArgs<ExtArgs>>): Prisma__NotificationReadClient<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NotificationRead that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationReadFindUniqueOrThrowArgs} args - Arguments to find a NotificationRead
     * @example
     * // Get one NotificationRead
     * const notificationRead = await prisma.notificationRead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationReadFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationReadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationReadClient<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NotificationRead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationReadFindFirstArgs} args - Arguments to find a NotificationRead
     * @example
     * // Get one NotificationRead
     * const notificationRead = await prisma.notificationRead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationReadFindFirstArgs>(args?: SelectSubset<T, NotificationReadFindFirstArgs<ExtArgs>>): Prisma__NotificationReadClient<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NotificationRead that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationReadFindFirstOrThrowArgs} args - Arguments to find a NotificationRead
     * @example
     * // Get one NotificationRead
     * const notificationRead = await prisma.notificationRead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationReadFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationReadFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationReadClient<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NotificationReads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationReadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationReads
     * const notificationReads = await prisma.notificationRead.findMany()
     * 
     * // Get first 10 NotificationReads
     * const notificationReads = await prisma.notificationRead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationReadWithIdOnly = await prisma.notificationRead.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationReadFindManyArgs>(args?: SelectSubset<T, NotificationReadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NotificationRead.
     * @param {NotificationReadCreateArgs} args - Arguments to create a NotificationRead.
     * @example
     * // Create one NotificationRead
     * const NotificationRead = await prisma.notificationRead.create({
     *   data: {
     *     // ... data to create a NotificationRead
     *   }
     * })
     * 
     */
    create<T extends NotificationReadCreateArgs>(args: SelectSubset<T, NotificationReadCreateArgs<ExtArgs>>): Prisma__NotificationReadClient<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NotificationReads.
     * @param {NotificationReadCreateManyArgs} args - Arguments to create many NotificationReads.
     * @example
     * // Create many NotificationReads
     * const notificationRead = await prisma.notificationRead.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationReadCreateManyArgs>(args?: SelectSubset<T, NotificationReadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationReads and returns the data saved in the database.
     * @param {NotificationReadCreateManyAndReturnArgs} args - Arguments to create many NotificationReads.
     * @example
     * // Create many NotificationReads
     * const notificationRead = await prisma.notificationRead.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationReads and only return the `id`
     * const notificationReadWithIdOnly = await prisma.notificationRead.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationReadCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationReadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NotificationRead.
     * @param {NotificationReadDeleteArgs} args - Arguments to delete one NotificationRead.
     * @example
     * // Delete one NotificationRead
     * const NotificationRead = await prisma.notificationRead.delete({
     *   where: {
     *     // ... filter to delete one NotificationRead
     *   }
     * })
     * 
     */
    delete<T extends NotificationReadDeleteArgs>(args: SelectSubset<T, NotificationReadDeleteArgs<ExtArgs>>): Prisma__NotificationReadClient<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NotificationRead.
     * @param {NotificationReadUpdateArgs} args - Arguments to update one NotificationRead.
     * @example
     * // Update one NotificationRead
     * const notificationRead = await prisma.notificationRead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationReadUpdateArgs>(args: SelectSubset<T, NotificationReadUpdateArgs<ExtArgs>>): Prisma__NotificationReadClient<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NotificationReads.
     * @param {NotificationReadDeleteManyArgs} args - Arguments to filter NotificationReads to delete.
     * @example
     * // Delete a few NotificationReads
     * const { count } = await prisma.notificationRead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationReadDeleteManyArgs>(args?: SelectSubset<T, NotificationReadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationReads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationReadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationReads
     * const notificationRead = await prisma.notificationRead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationReadUpdateManyArgs>(args: SelectSubset<T, NotificationReadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationRead.
     * @param {NotificationReadUpsertArgs} args - Arguments to update or create a NotificationRead.
     * @example
     * // Update or create a NotificationRead
     * const notificationRead = await prisma.notificationRead.upsert({
     *   create: {
     *     // ... data to create a NotificationRead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationRead we want to update
     *   }
     * })
     */
    upsert<T extends NotificationReadUpsertArgs>(args: SelectSubset<T, NotificationReadUpsertArgs<ExtArgs>>): Prisma__NotificationReadClient<$Result.GetResult<Prisma.$NotificationReadPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NotificationReads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationReadCountArgs} args - Arguments to filter NotificationReads to count.
     * @example
     * // Count the number of NotificationReads
     * const count = await prisma.notificationRead.count({
     *   where: {
     *     // ... the filter for the NotificationReads we want to count
     *   }
     * })
    **/
    count<T extends NotificationReadCountArgs>(
      args?: Subset<T, NotificationReadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationReadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationRead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationReadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationReadAggregateArgs>(args: Subset<T, NotificationReadAggregateArgs>): Prisma.PrismaPromise<GetNotificationReadAggregateType<T>>

    /**
     * Group by NotificationRead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationReadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationReadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationReadGroupByArgs['orderBy'] }
        : { orderBy?: NotificationReadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationReadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationReadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationRead model
   */
  readonly fields: NotificationReadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationRead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationReadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationRead model
   */ 
  interface NotificationReadFieldRefs {
    readonly id: FieldRef<"NotificationRead", 'String'>
    readonly notificationId: FieldRef<"NotificationRead", 'String'>
    readonly userId: FieldRef<"NotificationRead", 'String'>
    readonly readAt: FieldRef<"NotificationRead", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationRead findUnique
   */
  export type NotificationReadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRead to fetch.
     */
    where: NotificationReadWhereUniqueInput
  }

  /**
   * NotificationRead findUniqueOrThrow
   */
  export type NotificationReadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRead to fetch.
     */
    where: NotificationReadWhereUniqueInput
  }

  /**
   * NotificationRead findFirst
   */
  export type NotificationReadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRead to fetch.
     */
    where?: NotificationReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationReads to fetch.
     */
    orderBy?: NotificationReadOrderByWithRelationInput | NotificationReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationReads.
     */
    cursor?: NotificationReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationReads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationReads.
     */
    distinct?: NotificationReadScalarFieldEnum | NotificationReadScalarFieldEnum[]
  }

  /**
   * NotificationRead findFirstOrThrow
   */
  export type NotificationReadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRead to fetch.
     */
    where?: NotificationReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationReads to fetch.
     */
    orderBy?: NotificationReadOrderByWithRelationInput | NotificationReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationReads.
     */
    cursor?: NotificationReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationReads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationReads.
     */
    distinct?: NotificationReadScalarFieldEnum | NotificationReadScalarFieldEnum[]
  }

  /**
   * NotificationRead findMany
   */
  export type NotificationReadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    /**
     * Filter, which NotificationReads to fetch.
     */
    where?: NotificationReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationReads to fetch.
     */
    orderBy?: NotificationReadOrderByWithRelationInput | NotificationReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationReads.
     */
    cursor?: NotificationReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationReads.
     */
    skip?: number
    distinct?: NotificationReadScalarFieldEnum | NotificationReadScalarFieldEnum[]
  }

  /**
   * NotificationRead create
   */
  export type NotificationReadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationRead.
     */
    data: XOR<NotificationReadCreateInput, NotificationReadUncheckedCreateInput>
  }

  /**
   * NotificationRead createMany
   */
  export type NotificationReadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationReads.
     */
    data: NotificationReadCreateManyInput | NotificationReadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationRead createManyAndReturn
   */
  export type NotificationReadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NotificationReads.
     */
    data: NotificationReadCreateManyInput | NotificationReadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationRead update
   */
  export type NotificationReadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationRead.
     */
    data: XOR<NotificationReadUpdateInput, NotificationReadUncheckedUpdateInput>
    /**
     * Choose, which NotificationRead to update.
     */
    where: NotificationReadWhereUniqueInput
  }

  /**
   * NotificationRead updateMany
   */
  export type NotificationReadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationReads.
     */
    data: XOR<NotificationReadUpdateManyMutationInput, NotificationReadUncheckedUpdateManyInput>
    /**
     * Filter which NotificationReads to update
     */
    where?: NotificationReadWhereInput
  }

  /**
   * NotificationRead upsert
   */
  export type NotificationReadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationRead to update in case it exists.
     */
    where: NotificationReadWhereUniqueInput
    /**
     * In case the NotificationRead found by the `where` argument doesn't exist, create a new NotificationRead with this data.
     */
    create: XOR<NotificationReadCreateInput, NotificationReadUncheckedCreateInput>
    /**
     * In case the NotificationRead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationReadUpdateInput, NotificationReadUncheckedUpdateInput>
  }

  /**
   * NotificationRead delete
   */
  export type NotificationReadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
    /**
     * Filter which NotificationRead to delete.
     */
    where: NotificationReadWhereUniqueInput
  }

  /**
   * NotificationRead deleteMany
   */
  export type NotificationReadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationReads to delete
     */
    where?: NotificationReadWhereInput
  }

  /**
   * NotificationRead without action
   */
  export type NotificationReadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRead
     */
    select?: NotificationReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationReadInclude<ExtArgs> | null
  }


  /**
   * Model MedicalRecord
   */

  export type AggregateMedicalRecord = {
    _count: MedicalRecordCountAggregateOutputType | null
    _min: MedicalRecordMinAggregateOutputType | null
    _max: MedicalRecordMaxAggregateOutputType | null
  }

  export type MedicalRecordMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    diagnosis: string | null
    treatment: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalRecordMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    diagnosis: string | null
    treatment: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalRecordCountAggregateOutputType = {
    id: number
    patientId: number
    diagnosis: number
    treatment: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicalRecordMinAggregateInputType = {
    id?: true
    patientId?: true
    diagnosis?: true
    treatment?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalRecordMaxAggregateInputType = {
    id?: true
    patientId?: true
    diagnosis?: true
    treatment?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalRecordCountAggregateInputType = {
    id?: true
    patientId?: true
    diagnosis?: true
    treatment?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicalRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecord to aggregate.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalRecords
    **/
    _count?: true | MedicalRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalRecordMaxAggregateInputType
  }

  export type GetMedicalRecordAggregateType<T extends MedicalRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalRecord[P]>
      : GetScalarType<T[P], AggregateMedicalRecord[P]>
  }




  export type MedicalRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithAggregationInput | MedicalRecordOrderByWithAggregationInput[]
    by: MedicalRecordScalarFieldEnum[] | MedicalRecordScalarFieldEnum
    having?: MedicalRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalRecordCountAggregateInputType | true
    _min?: MedicalRecordMinAggregateInputType
    _max?: MedicalRecordMaxAggregateInputType
  }

  export type MedicalRecordGroupByOutputType = {
    id: string
    patientId: string
    diagnosis: string
    treatment: string
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: MedicalRecordCountAggregateOutputType | null
    _min: MedicalRecordMinAggregateOutputType | null
    _max: MedicalRecordMaxAggregateOutputType | null
  }

  type GetMedicalRecordGroupByPayload<T extends MedicalRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalRecordGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalRecordGroupByOutputType[P]>
        }
      >
    >


  export type MedicalRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    diagnosis?: boolean
    treatment?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    nurses?: boolean | MedicalRecord$nursesArgs<ExtArgs>
    doctors?: boolean | MedicalRecord$doctorsArgs<ExtArgs>
    _count?: boolean | MedicalRecordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecord"]>

  export type MedicalRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    diagnosis?: boolean
    treatment?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecord"]>

  export type MedicalRecordSelectScalar = {
    id?: boolean
    patientId?: boolean
    diagnosis?: boolean
    treatment?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MedicalRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    nurses?: boolean | MedicalRecord$nursesArgs<ExtArgs>
    doctors?: boolean | MedicalRecord$doctorsArgs<ExtArgs>
    _count?: boolean | MedicalRecordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicalRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $MedicalRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicalRecord"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      nurses: Prisma.$NursePayload<ExtArgs>[]
      doctors: Prisma.$DoctorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      diagnosis: string
      treatment: string
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicalRecord"]>
    composites: {}
  }

  type MedicalRecordGetPayload<S extends boolean | null | undefined | MedicalRecordDefaultArgs> = $Result.GetResult<Prisma.$MedicalRecordPayload, S>

  type MedicalRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MedicalRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MedicalRecordCountAggregateInputType | true
    }

  export interface MedicalRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalRecord'], meta: { name: 'MedicalRecord' } }
    /**
     * Find zero or one MedicalRecord that matches the filter.
     * @param {MedicalRecordFindUniqueArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicalRecordFindUniqueArgs>(args: SelectSubset<T, MedicalRecordFindUniqueArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MedicalRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MedicalRecordFindUniqueOrThrowArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicalRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicalRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MedicalRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindFirstArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicalRecordFindFirstArgs>(args?: SelectSubset<T, MedicalRecordFindFirstArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MedicalRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindFirstOrThrowArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicalRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicalRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MedicalRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalRecords
     * const medicalRecords = await prisma.medicalRecord.findMany()
     * 
     * // Get first 10 MedicalRecords
     * const medicalRecords = await prisma.medicalRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalRecordWithIdOnly = await prisma.medicalRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicalRecordFindManyArgs>(args?: SelectSubset<T, MedicalRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MedicalRecord.
     * @param {MedicalRecordCreateArgs} args - Arguments to create a MedicalRecord.
     * @example
     * // Create one MedicalRecord
     * const MedicalRecord = await prisma.medicalRecord.create({
     *   data: {
     *     // ... data to create a MedicalRecord
     *   }
     * })
     * 
     */
    create<T extends MedicalRecordCreateArgs>(args: SelectSubset<T, MedicalRecordCreateArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MedicalRecords.
     * @param {MedicalRecordCreateManyArgs} args - Arguments to create many MedicalRecords.
     * @example
     * // Create many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicalRecordCreateManyArgs>(args?: SelectSubset<T, MedicalRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicalRecords and returns the data saved in the database.
     * @param {MedicalRecordCreateManyAndReturnArgs} args - Arguments to create many MedicalRecords.
     * @example
     * // Create many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicalRecords and only return the `id`
     * const medicalRecordWithIdOnly = await prisma.medicalRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicalRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicalRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MedicalRecord.
     * @param {MedicalRecordDeleteArgs} args - Arguments to delete one MedicalRecord.
     * @example
     * // Delete one MedicalRecord
     * const MedicalRecord = await prisma.medicalRecord.delete({
     *   where: {
     *     // ... filter to delete one MedicalRecord
     *   }
     * })
     * 
     */
    delete<T extends MedicalRecordDeleteArgs>(args: SelectSubset<T, MedicalRecordDeleteArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MedicalRecord.
     * @param {MedicalRecordUpdateArgs} args - Arguments to update one MedicalRecord.
     * @example
     * // Update one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicalRecordUpdateArgs>(args: SelectSubset<T, MedicalRecordUpdateArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MedicalRecords.
     * @param {MedicalRecordDeleteManyArgs} args - Arguments to filter MedicalRecords to delete.
     * @example
     * // Delete a few MedicalRecords
     * const { count } = await prisma.medicalRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicalRecordDeleteManyArgs>(args?: SelectSubset<T, MedicalRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicalRecordUpdateManyArgs>(args: SelectSubset<T, MedicalRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MedicalRecord.
     * @param {MedicalRecordUpsertArgs} args - Arguments to update or create a MedicalRecord.
     * @example
     * // Update or create a MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.upsert({
     *   create: {
     *     // ... data to create a MedicalRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalRecord we want to update
     *   }
     * })
     */
    upsert<T extends MedicalRecordUpsertArgs>(args: SelectSubset<T, MedicalRecordUpsertArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordCountArgs} args - Arguments to filter MedicalRecords to count.
     * @example
     * // Count the number of MedicalRecords
     * const count = await prisma.medicalRecord.count({
     *   where: {
     *     // ... the filter for the MedicalRecords we want to count
     *   }
     * })
    **/
    count<T extends MedicalRecordCountArgs>(
      args?: Subset<T, MedicalRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalRecordAggregateArgs>(args: Subset<T, MedicalRecordAggregateArgs>): Prisma.PrismaPromise<GetMedicalRecordAggregateType<T>>

    /**
     * Group by MedicalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalRecordGroupByArgs['orderBy'] }
        : { orderBy?: MedicalRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalRecord model
   */
  readonly fields: MedicalRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    nurses<T extends MedicalRecord$nursesArgs<ExtArgs> = {}>(args?: Subset<T, MedicalRecord$nursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findMany"> | Null>
    doctors<T extends MedicalRecord$doctorsArgs<ExtArgs> = {}>(args?: Subset<T, MedicalRecord$doctorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicalRecord model
   */ 
  interface MedicalRecordFieldRefs {
    readonly id: FieldRef<"MedicalRecord", 'String'>
    readonly patientId: FieldRef<"MedicalRecord", 'String'>
    readonly diagnosis: FieldRef<"MedicalRecord", 'String'>
    readonly treatment: FieldRef<"MedicalRecord", 'String'>
    readonly notes: FieldRef<"MedicalRecord", 'String'>
    readonly createdAt: FieldRef<"MedicalRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MedicalRecord findUnique
   */
  export type MedicalRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord findUniqueOrThrow
   */
  export type MedicalRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord findFirst
   */
  export type MedicalRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * MedicalRecord findFirstOrThrow
   */
  export type MedicalRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * MedicalRecord findMany
   */
  export type MedicalRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecords to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * MedicalRecord create
   */
  export type MedicalRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalRecord.
     */
    data: XOR<MedicalRecordCreateInput, MedicalRecordUncheckedCreateInput>
  }

  /**
   * MedicalRecord createMany
   */
  export type MedicalRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalRecords.
     */
    data: MedicalRecordCreateManyInput | MedicalRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalRecord createManyAndReturn
   */
  export type MedicalRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MedicalRecords.
     */
    data: MedicalRecordCreateManyInput | MedicalRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalRecord update
   */
  export type MedicalRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalRecord.
     */
    data: XOR<MedicalRecordUpdateInput, MedicalRecordUncheckedUpdateInput>
    /**
     * Choose, which MedicalRecord to update.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord updateMany
   */
  export type MedicalRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalRecords.
     */
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyInput>
    /**
     * Filter which MedicalRecords to update
     */
    where?: MedicalRecordWhereInput
  }

  /**
   * MedicalRecord upsert
   */
  export type MedicalRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalRecord to update in case it exists.
     */
    where: MedicalRecordWhereUniqueInput
    /**
     * In case the MedicalRecord found by the `where` argument doesn't exist, create a new MedicalRecord with this data.
     */
    create: XOR<MedicalRecordCreateInput, MedicalRecordUncheckedCreateInput>
    /**
     * In case the MedicalRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalRecordUpdateInput, MedicalRecordUncheckedUpdateInput>
  }

  /**
   * MedicalRecord delete
   */
  export type MedicalRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter which MedicalRecord to delete.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord deleteMany
   */
  export type MedicalRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecords to delete
     */
    where?: MedicalRecordWhereInput
  }

  /**
   * MedicalRecord.nurses
   */
  export type MedicalRecord$nursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    where?: NurseWhereInput
    orderBy?: NurseOrderByWithRelationInput | NurseOrderByWithRelationInput[]
    cursor?: NurseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NurseScalarFieldEnum | NurseScalarFieldEnum[]
  }

  /**
   * MedicalRecord.doctors
   */
  export type MedicalRecord$doctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    cursor?: DoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * MedicalRecord without action
   */
  export type MedicalRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportMinAggregateOutputType = {
    id: string | null
    details: string | null
    dateGenerated: Date | null
    adminId: string | null
  }

  export type ReportMaxAggregateOutputType = {
    id: string | null
    details: string | null
    dateGenerated: Date | null
    adminId: string | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    details: number
    dateGenerated: number
    adminId: number
    _all: number
  }


  export type ReportMinAggregateInputType = {
    id?: true
    details?: true
    dateGenerated?: true
    adminId?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    details?: true
    dateGenerated?: true
    adminId?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    details?: true
    dateGenerated?: true
    adminId?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: string
    details: string
    dateGenerated: Date
    adminId: string
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    details?: boolean
    dateGenerated?: boolean
    adminId?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    details?: boolean
    dateGenerated?: boolean
    adminId?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    details?: boolean
    dateGenerated?: boolean
    adminId?: boolean
  }

  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      details: string
      dateGenerated: Date
      adminId: string
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'String'>
    readonly details: FieldRef<"Report", 'String'>
    readonly dateGenerated: FieldRef<"Report", 'DateTime'>
    readonly adminId: FieldRef<"Report", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model NurseVisit
   */

  export type AggregateNurseVisit = {
    _count: NurseVisitCountAggregateOutputType | null
    _min: NurseVisitMinAggregateOutputType | null
    _max: NurseVisitMaxAggregateOutputType | null
  }

  export type NurseVisitMinAggregateOutputType = {
    id: string | null
    date: Date | null
    notes: string | null
    nurseId: string | null
    patientId: string | null
  }

  export type NurseVisitMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    notes: string | null
    nurseId: string | null
    patientId: string | null
  }

  export type NurseVisitCountAggregateOutputType = {
    id: number
    date: number
    notes: number
    nurseId: number
    patientId: number
    _all: number
  }


  export type NurseVisitMinAggregateInputType = {
    id?: true
    date?: true
    notes?: true
    nurseId?: true
    patientId?: true
  }

  export type NurseVisitMaxAggregateInputType = {
    id?: true
    date?: true
    notes?: true
    nurseId?: true
    patientId?: true
  }

  export type NurseVisitCountAggregateInputType = {
    id?: true
    date?: true
    notes?: true
    nurseId?: true
    patientId?: true
    _all?: true
  }

  export type NurseVisitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NurseVisit to aggregate.
     */
    where?: NurseVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NurseVisits to fetch.
     */
    orderBy?: NurseVisitOrderByWithRelationInput | NurseVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NurseVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NurseVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NurseVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NurseVisits
    **/
    _count?: true | NurseVisitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NurseVisitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NurseVisitMaxAggregateInputType
  }

  export type GetNurseVisitAggregateType<T extends NurseVisitAggregateArgs> = {
        [P in keyof T & keyof AggregateNurseVisit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNurseVisit[P]>
      : GetScalarType<T[P], AggregateNurseVisit[P]>
  }




  export type NurseVisitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NurseVisitWhereInput
    orderBy?: NurseVisitOrderByWithAggregationInput | NurseVisitOrderByWithAggregationInput[]
    by: NurseVisitScalarFieldEnum[] | NurseVisitScalarFieldEnum
    having?: NurseVisitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NurseVisitCountAggregateInputType | true
    _min?: NurseVisitMinAggregateInputType
    _max?: NurseVisitMaxAggregateInputType
  }

  export type NurseVisitGroupByOutputType = {
    id: string
    date: Date
    notes: string | null
    nurseId: string
    patientId: string
    _count: NurseVisitCountAggregateOutputType | null
    _min: NurseVisitMinAggregateOutputType | null
    _max: NurseVisitMaxAggregateOutputType | null
  }

  type GetNurseVisitGroupByPayload<T extends NurseVisitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NurseVisitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NurseVisitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NurseVisitGroupByOutputType[P]>
            : GetScalarType<T[P], NurseVisitGroupByOutputType[P]>
        }
      >
    >


  export type NurseVisitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    notes?: boolean
    nurseId?: boolean
    patientId?: boolean
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nurseVisit"]>

  export type NurseVisitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    notes?: boolean
    nurseId?: boolean
    patientId?: boolean
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nurseVisit"]>

  export type NurseVisitSelectScalar = {
    id?: boolean
    date?: boolean
    notes?: boolean
    nurseId?: boolean
    patientId?: boolean
  }

  export type NurseVisitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type NurseVisitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $NurseVisitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NurseVisit"
    objects: {
      nurse: Prisma.$NursePayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      notes: string | null
      nurseId: string
      patientId: string
    }, ExtArgs["result"]["nurseVisit"]>
    composites: {}
  }

  type NurseVisitGetPayload<S extends boolean | null | undefined | NurseVisitDefaultArgs> = $Result.GetResult<Prisma.$NurseVisitPayload, S>

  type NurseVisitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NurseVisitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NurseVisitCountAggregateInputType | true
    }

  export interface NurseVisitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NurseVisit'], meta: { name: 'NurseVisit' } }
    /**
     * Find zero or one NurseVisit that matches the filter.
     * @param {NurseVisitFindUniqueArgs} args - Arguments to find a NurseVisit
     * @example
     * // Get one NurseVisit
     * const nurseVisit = await prisma.nurseVisit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NurseVisitFindUniqueArgs>(args: SelectSubset<T, NurseVisitFindUniqueArgs<ExtArgs>>): Prisma__NurseVisitClient<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NurseVisit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NurseVisitFindUniqueOrThrowArgs} args - Arguments to find a NurseVisit
     * @example
     * // Get one NurseVisit
     * const nurseVisit = await prisma.nurseVisit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NurseVisitFindUniqueOrThrowArgs>(args: SelectSubset<T, NurseVisitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NurseVisitClient<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NurseVisit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseVisitFindFirstArgs} args - Arguments to find a NurseVisit
     * @example
     * // Get one NurseVisit
     * const nurseVisit = await prisma.nurseVisit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NurseVisitFindFirstArgs>(args?: SelectSubset<T, NurseVisitFindFirstArgs<ExtArgs>>): Prisma__NurseVisitClient<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NurseVisit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseVisitFindFirstOrThrowArgs} args - Arguments to find a NurseVisit
     * @example
     * // Get one NurseVisit
     * const nurseVisit = await prisma.nurseVisit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NurseVisitFindFirstOrThrowArgs>(args?: SelectSubset<T, NurseVisitFindFirstOrThrowArgs<ExtArgs>>): Prisma__NurseVisitClient<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NurseVisits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseVisitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NurseVisits
     * const nurseVisits = await prisma.nurseVisit.findMany()
     * 
     * // Get first 10 NurseVisits
     * const nurseVisits = await prisma.nurseVisit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nurseVisitWithIdOnly = await prisma.nurseVisit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NurseVisitFindManyArgs>(args?: SelectSubset<T, NurseVisitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NurseVisit.
     * @param {NurseVisitCreateArgs} args - Arguments to create a NurseVisit.
     * @example
     * // Create one NurseVisit
     * const NurseVisit = await prisma.nurseVisit.create({
     *   data: {
     *     // ... data to create a NurseVisit
     *   }
     * })
     * 
     */
    create<T extends NurseVisitCreateArgs>(args: SelectSubset<T, NurseVisitCreateArgs<ExtArgs>>): Prisma__NurseVisitClient<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NurseVisits.
     * @param {NurseVisitCreateManyArgs} args - Arguments to create many NurseVisits.
     * @example
     * // Create many NurseVisits
     * const nurseVisit = await prisma.nurseVisit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NurseVisitCreateManyArgs>(args?: SelectSubset<T, NurseVisitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NurseVisits and returns the data saved in the database.
     * @param {NurseVisitCreateManyAndReturnArgs} args - Arguments to create many NurseVisits.
     * @example
     * // Create many NurseVisits
     * const nurseVisit = await prisma.nurseVisit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NurseVisits and only return the `id`
     * const nurseVisitWithIdOnly = await prisma.nurseVisit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NurseVisitCreateManyAndReturnArgs>(args?: SelectSubset<T, NurseVisitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NurseVisit.
     * @param {NurseVisitDeleteArgs} args - Arguments to delete one NurseVisit.
     * @example
     * // Delete one NurseVisit
     * const NurseVisit = await prisma.nurseVisit.delete({
     *   where: {
     *     // ... filter to delete one NurseVisit
     *   }
     * })
     * 
     */
    delete<T extends NurseVisitDeleteArgs>(args: SelectSubset<T, NurseVisitDeleteArgs<ExtArgs>>): Prisma__NurseVisitClient<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NurseVisit.
     * @param {NurseVisitUpdateArgs} args - Arguments to update one NurseVisit.
     * @example
     * // Update one NurseVisit
     * const nurseVisit = await prisma.nurseVisit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NurseVisitUpdateArgs>(args: SelectSubset<T, NurseVisitUpdateArgs<ExtArgs>>): Prisma__NurseVisitClient<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NurseVisits.
     * @param {NurseVisitDeleteManyArgs} args - Arguments to filter NurseVisits to delete.
     * @example
     * // Delete a few NurseVisits
     * const { count } = await prisma.nurseVisit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NurseVisitDeleteManyArgs>(args?: SelectSubset<T, NurseVisitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NurseVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseVisitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NurseVisits
     * const nurseVisit = await prisma.nurseVisit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NurseVisitUpdateManyArgs>(args: SelectSubset<T, NurseVisitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NurseVisit.
     * @param {NurseVisitUpsertArgs} args - Arguments to update or create a NurseVisit.
     * @example
     * // Update or create a NurseVisit
     * const nurseVisit = await prisma.nurseVisit.upsert({
     *   create: {
     *     // ... data to create a NurseVisit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NurseVisit we want to update
     *   }
     * })
     */
    upsert<T extends NurseVisitUpsertArgs>(args: SelectSubset<T, NurseVisitUpsertArgs<ExtArgs>>): Prisma__NurseVisitClient<$Result.GetResult<Prisma.$NurseVisitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NurseVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseVisitCountArgs} args - Arguments to filter NurseVisits to count.
     * @example
     * // Count the number of NurseVisits
     * const count = await prisma.nurseVisit.count({
     *   where: {
     *     // ... the filter for the NurseVisits we want to count
     *   }
     * })
    **/
    count<T extends NurseVisitCountArgs>(
      args?: Subset<T, NurseVisitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NurseVisitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NurseVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseVisitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NurseVisitAggregateArgs>(args: Subset<T, NurseVisitAggregateArgs>): Prisma.PrismaPromise<GetNurseVisitAggregateType<T>>

    /**
     * Group by NurseVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseVisitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NurseVisitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NurseVisitGroupByArgs['orderBy'] }
        : { orderBy?: NurseVisitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NurseVisitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNurseVisitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NurseVisit model
   */
  readonly fields: NurseVisitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NurseVisit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NurseVisitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nurse<T extends NurseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NurseDefaultArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NurseVisit model
   */ 
  interface NurseVisitFieldRefs {
    readonly id: FieldRef<"NurseVisit", 'String'>
    readonly date: FieldRef<"NurseVisit", 'DateTime'>
    readonly notes: FieldRef<"NurseVisit", 'String'>
    readonly nurseId: FieldRef<"NurseVisit", 'String'>
    readonly patientId: FieldRef<"NurseVisit", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NurseVisit findUnique
   */
  export type NurseVisitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    /**
     * Filter, which NurseVisit to fetch.
     */
    where: NurseVisitWhereUniqueInput
  }

  /**
   * NurseVisit findUniqueOrThrow
   */
  export type NurseVisitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    /**
     * Filter, which NurseVisit to fetch.
     */
    where: NurseVisitWhereUniqueInput
  }

  /**
   * NurseVisit findFirst
   */
  export type NurseVisitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    /**
     * Filter, which NurseVisit to fetch.
     */
    where?: NurseVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NurseVisits to fetch.
     */
    orderBy?: NurseVisitOrderByWithRelationInput | NurseVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NurseVisits.
     */
    cursor?: NurseVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NurseVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NurseVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NurseVisits.
     */
    distinct?: NurseVisitScalarFieldEnum | NurseVisitScalarFieldEnum[]
  }

  /**
   * NurseVisit findFirstOrThrow
   */
  export type NurseVisitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    /**
     * Filter, which NurseVisit to fetch.
     */
    where?: NurseVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NurseVisits to fetch.
     */
    orderBy?: NurseVisitOrderByWithRelationInput | NurseVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NurseVisits.
     */
    cursor?: NurseVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NurseVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NurseVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NurseVisits.
     */
    distinct?: NurseVisitScalarFieldEnum | NurseVisitScalarFieldEnum[]
  }

  /**
   * NurseVisit findMany
   */
  export type NurseVisitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    /**
     * Filter, which NurseVisits to fetch.
     */
    where?: NurseVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NurseVisits to fetch.
     */
    orderBy?: NurseVisitOrderByWithRelationInput | NurseVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NurseVisits.
     */
    cursor?: NurseVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NurseVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NurseVisits.
     */
    skip?: number
    distinct?: NurseVisitScalarFieldEnum | NurseVisitScalarFieldEnum[]
  }

  /**
   * NurseVisit create
   */
  export type NurseVisitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    /**
     * The data needed to create a NurseVisit.
     */
    data: XOR<NurseVisitCreateInput, NurseVisitUncheckedCreateInput>
  }

  /**
   * NurseVisit createMany
   */
  export type NurseVisitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NurseVisits.
     */
    data: NurseVisitCreateManyInput | NurseVisitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NurseVisit createManyAndReturn
   */
  export type NurseVisitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NurseVisits.
     */
    data: NurseVisitCreateManyInput | NurseVisitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NurseVisit update
   */
  export type NurseVisitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    /**
     * The data needed to update a NurseVisit.
     */
    data: XOR<NurseVisitUpdateInput, NurseVisitUncheckedUpdateInput>
    /**
     * Choose, which NurseVisit to update.
     */
    where: NurseVisitWhereUniqueInput
  }

  /**
   * NurseVisit updateMany
   */
  export type NurseVisitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NurseVisits.
     */
    data: XOR<NurseVisitUpdateManyMutationInput, NurseVisitUncheckedUpdateManyInput>
    /**
     * Filter which NurseVisits to update
     */
    where?: NurseVisitWhereInput
  }

  /**
   * NurseVisit upsert
   */
  export type NurseVisitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    /**
     * The filter to search for the NurseVisit to update in case it exists.
     */
    where: NurseVisitWhereUniqueInput
    /**
     * In case the NurseVisit found by the `where` argument doesn't exist, create a new NurseVisit with this data.
     */
    create: XOR<NurseVisitCreateInput, NurseVisitUncheckedCreateInput>
    /**
     * In case the NurseVisit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NurseVisitUpdateInput, NurseVisitUncheckedUpdateInput>
  }

  /**
   * NurseVisit delete
   */
  export type NurseVisitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
    /**
     * Filter which NurseVisit to delete.
     */
    where: NurseVisitWhereUniqueInput
  }

  /**
   * NurseVisit deleteMany
   */
  export type NurseVisitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NurseVisits to delete
     */
    where?: NurseVisitWhereInput
  }

  /**
   * NurseVisit without action
   */
  export type NurseVisitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NurseVisit
     */
    select?: NurseVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseVisitInclude<ExtArgs> | null
  }


  /**
   * Model ChatRoom
   */

  export type AggregateChatRoom = {
    _count: ChatRoomCountAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  export type ChatRoomMinAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    patientId: string | null
    doctorId: string | null
  }

  export type ChatRoomMaxAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    patientId: string | null
    doctorId: string | null
  }

  export type ChatRoomCountAggregateOutputType = {
    id: number
    status: number
    createdAt: number
    updatedAt: number
    patientId: number
    doctorId: number
    _all: number
  }


  export type ChatRoomMinAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
    doctorId?: true
  }

  export type ChatRoomMaxAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
    doctorId?: true
  }

  export type ChatRoomCountAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
    doctorId?: true
    _all?: true
  }

  export type ChatRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoom to aggregate.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatRooms
    **/
    _count?: true | ChatRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomMaxAggregateInputType
  }

  export type GetChatRoomAggregateType<T extends ChatRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoom[P]>
      : GetScalarType<T[P], AggregateChatRoom[P]>
  }




  export type ChatRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithAggregationInput | ChatRoomOrderByWithAggregationInput[]
    by: ChatRoomScalarFieldEnum[] | ChatRoomScalarFieldEnum
    having?: ChatRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomCountAggregateInputType | true
    _min?: ChatRoomMinAggregateInputType
    _max?: ChatRoomMaxAggregateInputType
  }

  export type ChatRoomGroupByOutputType = {
    id: string
    status: string
    createdAt: Date
    updatedAt: Date
    patientId: string
    doctorId: string
    _count: ChatRoomCountAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  type GetChatRoomGroupByPayload<T extends ChatRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
        }
      >
    >


  export type ChatRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    doctorId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    doctorId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectScalar = {
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    doctorId?: boolean
  }

  export type ChatRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatRoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }

  export type $ChatRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatRoom"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      doctor: Prisma.$DoctorPayload<ExtArgs>
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: string
      createdAt: Date
      updatedAt: Date
      patientId: string
      doctorId: string
    }, ExtArgs["result"]["chatRoom"]>
    composites: {}
  }

  type ChatRoomGetPayload<S extends boolean | null | undefined | ChatRoomDefaultArgs> = $Result.GetResult<Prisma.$ChatRoomPayload, S>

  type ChatRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatRoomFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatRoomCountAggregateInputType | true
    }

  export interface ChatRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoom'], meta: { name: 'ChatRoom' } }
    /**
     * Find zero or one ChatRoom that matches the filter.
     * @param {ChatRoomFindUniqueArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatRoomFindUniqueArgs>(args: SelectSubset<T, ChatRoomFindUniqueArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatRoom that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatRoomFindUniqueOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatRoomFindFirstArgs>(args?: SelectSubset<T, ChatRoomFindFirstArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany()
     * 
     * // Get first 10 ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatRoomFindManyArgs>(args?: SelectSubset<T, ChatRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatRoom.
     * @param {ChatRoomCreateArgs} args - Arguments to create a ChatRoom.
     * @example
     * // Create one ChatRoom
     * const ChatRoom = await prisma.chatRoom.create({
     *   data: {
     *     // ... data to create a ChatRoom
     *   }
     * })
     * 
     */
    create<T extends ChatRoomCreateArgs>(args: SelectSubset<T, ChatRoomCreateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatRooms.
     * @param {ChatRoomCreateManyArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatRoomCreateManyArgs>(args?: SelectSubset<T, ChatRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatRooms and returns the data saved in the database.
     * @param {ChatRoomCreateManyAndReturnArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatRooms and only return the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatRoomCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatRoom.
     * @param {ChatRoomDeleteArgs} args - Arguments to delete one ChatRoom.
     * @example
     * // Delete one ChatRoom
     * const ChatRoom = await prisma.chatRoom.delete({
     *   where: {
     *     // ... filter to delete one ChatRoom
     *   }
     * })
     * 
     */
    delete<T extends ChatRoomDeleteArgs>(args: SelectSubset<T, ChatRoomDeleteArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatRoom.
     * @param {ChatRoomUpdateArgs} args - Arguments to update one ChatRoom.
     * @example
     * // Update one ChatRoom
     * const chatRoom = await prisma.chatRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatRoomUpdateArgs>(args: SelectSubset<T, ChatRoomUpdateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatRooms.
     * @param {ChatRoomDeleteManyArgs} args - Arguments to filter ChatRooms to delete.
     * @example
     * // Delete a few ChatRooms
     * const { count } = await prisma.chatRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatRoomDeleteManyArgs>(args?: SelectSubset<T, ChatRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRooms
     * const chatRoom = await prisma.chatRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatRoomUpdateManyArgs>(args: SelectSubset<T, ChatRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatRoom.
     * @param {ChatRoomUpsertArgs} args - Arguments to update or create a ChatRoom.
     * @example
     * // Update or create a ChatRoom
     * const chatRoom = await prisma.chatRoom.upsert({
     *   create: {
     *     // ... data to create a ChatRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoom we want to update
     *   }
     * })
     */
    upsert<T extends ChatRoomUpsertArgs>(args: SelectSubset<T, ChatRoomUpsertArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomCountArgs} args - Arguments to filter ChatRooms to count.
     * @example
     * // Count the number of ChatRooms
     * const count = await prisma.chatRoom.count({
     *   where: {
     *     // ... the filter for the ChatRooms we want to count
     *   }
     * })
    **/
    count<T extends ChatRoomCountArgs>(
      args?: Subset<T, ChatRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomAggregateArgs>(args: Subset<T, ChatRoomAggregateArgs>): Prisma.PrismaPromise<GetChatRoomAggregateType<T>>

    /**
     * Group by ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatRoomGroupByArgs['orderBy'] }
        : { orderBy?: ChatRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatRoom model
   */
  readonly fields: ChatRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    messages<T extends ChatRoom$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatRoom model
   */ 
  interface ChatRoomFieldRefs {
    readonly id: FieldRef<"ChatRoom", 'String'>
    readonly status: FieldRef<"ChatRoom", 'String'>
    readonly createdAt: FieldRef<"ChatRoom", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatRoom", 'DateTime'>
    readonly patientId: FieldRef<"ChatRoom", 'String'>
    readonly doctorId: FieldRef<"ChatRoom", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChatRoom findUnique
   */
  export type ChatRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findUniqueOrThrow
   */
  export type ChatRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findFirst
   */
  export type ChatRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findFirstOrThrow
   */
  export type ChatRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findMany
   */
  export type ChatRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRooms to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom create
   */
  export type ChatRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatRoom.
     */
    data: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
  }

  /**
   * ChatRoom createMany
   */
  export type ChatRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatRoom createManyAndReturn
   */
  export type ChatRoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatRoom update
   */
  export type ChatRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatRoom.
     */
    data: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
    /**
     * Choose, which ChatRoom to update.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom updateMany
   */
  export type ChatRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatRooms.
     */
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which ChatRooms to update
     */
    where?: ChatRoomWhereInput
  }

  /**
   * ChatRoom upsert
   */
  export type ChatRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatRoom to update in case it exists.
     */
    where: ChatRoomWhereUniqueInput
    /**
     * In case the ChatRoom found by the `where` argument doesn't exist, create a new ChatRoom with this data.
     */
    create: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
    /**
     * In case the ChatRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
  }

  /**
   * ChatRoom delete
   */
  export type ChatRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter which ChatRoom to delete.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom deleteMany
   */
  export type ChatRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRooms to delete
     */
    where?: ChatRoomWhereInput
  }

  /**
   * ChatRoom.messages
   */
  export type ChatRoom$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * ChatRoom without action
   */
  export type ChatRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
  }


  /**
   * Model ChatRoomPatientNurse
   */

  export type AggregateChatRoomPatientNurse = {
    _count: ChatRoomPatientNurseCountAggregateOutputType | null
    _min: ChatRoomPatientNurseMinAggregateOutputType | null
    _max: ChatRoomPatientNurseMaxAggregateOutputType | null
  }

  export type ChatRoomPatientNurseMinAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    nurseId: string | null
    patientId: string | null
  }

  export type ChatRoomPatientNurseMaxAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    nurseId: string | null
    patientId: string | null
  }

  export type ChatRoomPatientNurseCountAggregateOutputType = {
    id: number
    status: number
    createdAt: number
    updatedAt: number
    nurseId: number
    patientId: number
    _all: number
  }


  export type ChatRoomPatientNurseMinAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    nurseId?: true
    patientId?: true
  }

  export type ChatRoomPatientNurseMaxAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    nurseId?: true
    patientId?: true
  }

  export type ChatRoomPatientNurseCountAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    nurseId?: true
    patientId?: true
    _all?: true
  }

  export type ChatRoomPatientNurseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoomPatientNurse to aggregate.
     */
    where?: ChatRoomPatientNurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomPatientNurses to fetch.
     */
    orderBy?: ChatRoomPatientNurseOrderByWithRelationInput | ChatRoomPatientNurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatRoomPatientNurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomPatientNurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomPatientNurses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatRoomPatientNurses
    **/
    _count?: true | ChatRoomPatientNurseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomPatientNurseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomPatientNurseMaxAggregateInputType
  }

  export type GetChatRoomPatientNurseAggregateType<T extends ChatRoomPatientNurseAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoomPatientNurse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoomPatientNurse[P]>
      : GetScalarType<T[P], AggregateChatRoomPatientNurse[P]>
  }




  export type ChatRoomPatientNurseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomPatientNurseWhereInput
    orderBy?: ChatRoomPatientNurseOrderByWithAggregationInput | ChatRoomPatientNurseOrderByWithAggregationInput[]
    by: ChatRoomPatientNurseScalarFieldEnum[] | ChatRoomPatientNurseScalarFieldEnum
    having?: ChatRoomPatientNurseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomPatientNurseCountAggregateInputType | true
    _min?: ChatRoomPatientNurseMinAggregateInputType
    _max?: ChatRoomPatientNurseMaxAggregateInputType
  }

  export type ChatRoomPatientNurseGroupByOutputType = {
    id: string
    status: string
    createdAt: Date
    updatedAt: Date
    nurseId: string
    patientId: string
    _count: ChatRoomPatientNurseCountAggregateOutputType | null
    _min: ChatRoomPatientNurseMinAggregateOutputType | null
    _max: ChatRoomPatientNurseMaxAggregateOutputType | null
  }

  type GetChatRoomPatientNurseGroupByPayload<T extends ChatRoomPatientNurseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomPatientNurseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomPatientNurseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomPatientNurseGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomPatientNurseGroupByOutputType[P]>
        }
      >
    >


  export type ChatRoomPatientNurseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nurseId?: boolean
    patientId?: boolean
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    messages?: boolean | ChatRoomPatientNurse$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomPatientNurseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoomPatientNurse"]>

  export type ChatRoomPatientNurseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nurseId?: boolean
    patientId?: boolean
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoomPatientNurse"]>

  export type ChatRoomPatientNurseSelectScalar = {
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nurseId?: boolean
    patientId?: boolean
  }

  export type ChatRoomPatientNurseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    messages?: boolean | ChatRoomPatientNurse$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomPatientNurseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatRoomPatientNurseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nurse?: boolean | NurseDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $ChatRoomPatientNursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatRoomPatientNurse"
    objects: {
      nurse: Prisma.$NursePayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: string
      createdAt: Date
      updatedAt: Date
      nurseId: string
      patientId: string
    }, ExtArgs["result"]["chatRoomPatientNurse"]>
    composites: {}
  }

  type ChatRoomPatientNurseGetPayload<S extends boolean | null | undefined | ChatRoomPatientNurseDefaultArgs> = $Result.GetResult<Prisma.$ChatRoomPatientNursePayload, S>

  type ChatRoomPatientNurseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatRoomPatientNurseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatRoomPatientNurseCountAggregateInputType | true
    }

  export interface ChatRoomPatientNurseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoomPatientNurse'], meta: { name: 'ChatRoomPatientNurse' } }
    /**
     * Find zero or one ChatRoomPatientNurse that matches the filter.
     * @param {ChatRoomPatientNurseFindUniqueArgs} args - Arguments to find a ChatRoomPatientNurse
     * @example
     * // Get one ChatRoomPatientNurse
     * const chatRoomPatientNurse = await prisma.chatRoomPatientNurse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatRoomPatientNurseFindUniqueArgs>(args: SelectSubset<T, ChatRoomPatientNurseFindUniqueArgs<ExtArgs>>): Prisma__ChatRoomPatientNurseClient<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatRoomPatientNurse that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatRoomPatientNurseFindUniqueOrThrowArgs} args - Arguments to find a ChatRoomPatientNurse
     * @example
     * // Get one ChatRoomPatientNurse
     * const chatRoomPatientNurse = await prisma.chatRoomPatientNurse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatRoomPatientNurseFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatRoomPatientNurseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatRoomPatientNurseClient<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatRoomPatientNurse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomPatientNurseFindFirstArgs} args - Arguments to find a ChatRoomPatientNurse
     * @example
     * // Get one ChatRoomPatientNurse
     * const chatRoomPatientNurse = await prisma.chatRoomPatientNurse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatRoomPatientNurseFindFirstArgs>(args?: SelectSubset<T, ChatRoomPatientNurseFindFirstArgs<ExtArgs>>): Prisma__ChatRoomPatientNurseClient<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatRoomPatientNurse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomPatientNurseFindFirstOrThrowArgs} args - Arguments to find a ChatRoomPatientNurse
     * @example
     * // Get one ChatRoomPatientNurse
     * const chatRoomPatientNurse = await prisma.chatRoomPatientNurse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatRoomPatientNurseFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatRoomPatientNurseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatRoomPatientNurseClient<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatRoomPatientNurses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomPatientNurseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRoomPatientNurses
     * const chatRoomPatientNurses = await prisma.chatRoomPatientNurse.findMany()
     * 
     * // Get first 10 ChatRoomPatientNurses
     * const chatRoomPatientNurses = await prisma.chatRoomPatientNurse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatRoomPatientNurseWithIdOnly = await prisma.chatRoomPatientNurse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatRoomPatientNurseFindManyArgs>(args?: SelectSubset<T, ChatRoomPatientNurseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatRoomPatientNurse.
     * @param {ChatRoomPatientNurseCreateArgs} args - Arguments to create a ChatRoomPatientNurse.
     * @example
     * // Create one ChatRoomPatientNurse
     * const ChatRoomPatientNurse = await prisma.chatRoomPatientNurse.create({
     *   data: {
     *     // ... data to create a ChatRoomPatientNurse
     *   }
     * })
     * 
     */
    create<T extends ChatRoomPatientNurseCreateArgs>(args: SelectSubset<T, ChatRoomPatientNurseCreateArgs<ExtArgs>>): Prisma__ChatRoomPatientNurseClient<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatRoomPatientNurses.
     * @param {ChatRoomPatientNurseCreateManyArgs} args - Arguments to create many ChatRoomPatientNurses.
     * @example
     * // Create many ChatRoomPatientNurses
     * const chatRoomPatientNurse = await prisma.chatRoomPatientNurse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatRoomPatientNurseCreateManyArgs>(args?: SelectSubset<T, ChatRoomPatientNurseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatRoomPatientNurses and returns the data saved in the database.
     * @param {ChatRoomPatientNurseCreateManyAndReturnArgs} args - Arguments to create many ChatRoomPatientNurses.
     * @example
     * // Create many ChatRoomPatientNurses
     * const chatRoomPatientNurse = await prisma.chatRoomPatientNurse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatRoomPatientNurses and only return the `id`
     * const chatRoomPatientNurseWithIdOnly = await prisma.chatRoomPatientNurse.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatRoomPatientNurseCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatRoomPatientNurseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatRoomPatientNurse.
     * @param {ChatRoomPatientNurseDeleteArgs} args - Arguments to delete one ChatRoomPatientNurse.
     * @example
     * // Delete one ChatRoomPatientNurse
     * const ChatRoomPatientNurse = await prisma.chatRoomPatientNurse.delete({
     *   where: {
     *     // ... filter to delete one ChatRoomPatientNurse
     *   }
     * })
     * 
     */
    delete<T extends ChatRoomPatientNurseDeleteArgs>(args: SelectSubset<T, ChatRoomPatientNurseDeleteArgs<ExtArgs>>): Prisma__ChatRoomPatientNurseClient<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatRoomPatientNurse.
     * @param {ChatRoomPatientNurseUpdateArgs} args - Arguments to update one ChatRoomPatientNurse.
     * @example
     * // Update one ChatRoomPatientNurse
     * const chatRoomPatientNurse = await prisma.chatRoomPatientNurse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatRoomPatientNurseUpdateArgs>(args: SelectSubset<T, ChatRoomPatientNurseUpdateArgs<ExtArgs>>): Prisma__ChatRoomPatientNurseClient<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatRoomPatientNurses.
     * @param {ChatRoomPatientNurseDeleteManyArgs} args - Arguments to filter ChatRoomPatientNurses to delete.
     * @example
     * // Delete a few ChatRoomPatientNurses
     * const { count } = await prisma.chatRoomPatientNurse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatRoomPatientNurseDeleteManyArgs>(args?: SelectSubset<T, ChatRoomPatientNurseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRoomPatientNurses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomPatientNurseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRoomPatientNurses
     * const chatRoomPatientNurse = await prisma.chatRoomPatientNurse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatRoomPatientNurseUpdateManyArgs>(args: SelectSubset<T, ChatRoomPatientNurseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatRoomPatientNurse.
     * @param {ChatRoomPatientNurseUpsertArgs} args - Arguments to update or create a ChatRoomPatientNurse.
     * @example
     * // Update or create a ChatRoomPatientNurse
     * const chatRoomPatientNurse = await prisma.chatRoomPatientNurse.upsert({
     *   create: {
     *     // ... data to create a ChatRoomPatientNurse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoomPatientNurse we want to update
     *   }
     * })
     */
    upsert<T extends ChatRoomPatientNurseUpsertArgs>(args: SelectSubset<T, ChatRoomPatientNurseUpsertArgs<ExtArgs>>): Prisma__ChatRoomPatientNurseClient<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatRoomPatientNurses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomPatientNurseCountArgs} args - Arguments to filter ChatRoomPatientNurses to count.
     * @example
     * // Count the number of ChatRoomPatientNurses
     * const count = await prisma.chatRoomPatientNurse.count({
     *   where: {
     *     // ... the filter for the ChatRoomPatientNurses we want to count
     *   }
     * })
    **/
    count<T extends ChatRoomPatientNurseCountArgs>(
      args?: Subset<T, ChatRoomPatientNurseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomPatientNurseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoomPatientNurse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomPatientNurseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomPatientNurseAggregateArgs>(args: Subset<T, ChatRoomPatientNurseAggregateArgs>): Prisma.PrismaPromise<GetChatRoomPatientNurseAggregateType<T>>

    /**
     * Group by ChatRoomPatientNurse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomPatientNurseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatRoomPatientNurseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatRoomPatientNurseGroupByArgs['orderBy'] }
        : { orderBy?: ChatRoomPatientNurseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatRoomPatientNurseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomPatientNurseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatRoomPatientNurse model
   */
  readonly fields: ChatRoomPatientNurseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatRoomPatientNurse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatRoomPatientNurseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nurse<T extends NurseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NurseDefaultArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    messages<T extends ChatRoomPatientNurse$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomPatientNurse$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatRoomPatientNurse model
   */ 
  interface ChatRoomPatientNurseFieldRefs {
    readonly id: FieldRef<"ChatRoomPatientNurse", 'String'>
    readonly status: FieldRef<"ChatRoomPatientNurse", 'String'>
    readonly createdAt: FieldRef<"ChatRoomPatientNurse", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatRoomPatientNurse", 'DateTime'>
    readonly nurseId: FieldRef<"ChatRoomPatientNurse", 'String'>
    readonly patientId: FieldRef<"ChatRoomPatientNurse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChatRoomPatientNurse findUnique
   */
  export type ChatRoomPatientNurseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomPatientNurse to fetch.
     */
    where: ChatRoomPatientNurseWhereUniqueInput
  }

  /**
   * ChatRoomPatientNurse findUniqueOrThrow
   */
  export type ChatRoomPatientNurseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomPatientNurse to fetch.
     */
    where: ChatRoomPatientNurseWhereUniqueInput
  }

  /**
   * ChatRoomPatientNurse findFirst
   */
  export type ChatRoomPatientNurseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomPatientNurse to fetch.
     */
    where?: ChatRoomPatientNurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomPatientNurses to fetch.
     */
    orderBy?: ChatRoomPatientNurseOrderByWithRelationInput | ChatRoomPatientNurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRoomPatientNurses.
     */
    cursor?: ChatRoomPatientNurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomPatientNurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomPatientNurses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRoomPatientNurses.
     */
    distinct?: ChatRoomPatientNurseScalarFieldEnum | ChatRoomPatientNurseScalarFieldEnum[]
  }

  /**
   * ChatRoomPatientNurse findFirstOrThrow
   */
  export type ChatRoomPatientNurseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomPatientNurse to fetch.
     */
    where?: ChatRoomPatientNurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomPatientNurses to fetch.
     */
    orderBy?: ChatRoomPatientNurseOrderByWithRelationInput | ChatRoomPatientNurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRoomPatientNurses.
     */
    cursor?: ChatRoomPatientNurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomPatientNurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomPatientNurses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRoomPatientNurses.
     */
    distinct?: ChatRoomPatientNurseScalarFieldEnum | ChatRoomPatientNurseScalarFieldEnum[]
  }

  /**
   * ChatRoomPatientNurse findMany
   */
  export type ChatRoomPatientNurseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomPatientNurses to fetch.
     */
    where?: ChatRoomPatientNurseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomPatientNurses to fetch.
     */
    orderBy?: ChatRoomPatientNurseOrderByWithRelationInput | ChatRoomPatientNurseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatRoomPatientNurses.
     */
    cursor?: ChatRoomPatientNurseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomPatientNurses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomPatientNurses.
     */
    skip?: number
    distinct?: ChatRoomPatientNurseScalarFieldEnum | ChatRoomPatientNurseScalarFieldEnum[]
  }

  /**
   * ChatRoomPatientNurse create
   */
  export type ChatRoomPatientNurseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatRoomPatientNurse.
     */
    data: XOR<ChatRoomPatientNurseCreateInput, ChatRoomPatientNurseUncheckedCreateInput>
  }

  /**
   * ChatRoomPatientNurse createMany
   */
  export type ChatRoomPatientNurseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatRoomPatientNurses.
     */
    data: ChatRoomPatientNurseCreateManyInput | ChatRoomPatientNurseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatRoomPatientNurse createManyAndReturn
   */
  export type ChatRoomPatientNurseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatRoomPatientNurses.
     */
    data: ChatRoomPatientNurseCreateManyInput | ChatRoomPatientNurseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatRoomPatientNurse update
   */
  export type ChatRoomPatientNurseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatRoomPatientNurse.
     */
    data: XOR<ChatRoomPatientNurseUpdateInput, ChatRoomPatientNurseUncheckedUpdateInput>
    /**
     * Choose, which ChatRoomPatientNurse to update.
     */
    where: ChatRoomPatientNurseWhereUniqueInput
  }

  /**
   * ChatRoomPatientNurse updateMany
   */
  export type ChatRoomPatientNurseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatRoomPatientNurses.
     */
    data: XOR<ChatRoomPatientNurseUpdateManyMutationInput, ChatRoomPatientNurseUncheckedUpdateManyInput>
    /**
     * Filter which ChatRoomPatientNurses to update
     */
    where?: ChatRoomPatientNurseWhereInput
  }

  /**
   * ChatRoomPatientNurse upsert
   */
  export type ChatRoomPatientNurseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatRoomPatientNurse to update in case it exists.
     */
    where: ChatRoomPatientNurseWhereUniqueInput
    /**
     * In case the ChatRoomPatientNurse found by the `where` argument doesn't exist, create a new ChatRoomPatientNurse with this data.
     */
    create: XOR<ChatRoomPatientNurseCreateInput, ChatRoomPatientNurseUncheckedCreateInput>
    /**
     * In case the ChatRoomPatientNurse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatRoomPatientNurseUpdateInput, ChatRoomPatientNurseUncheckedUpdateInput>
  }

  /**
   * ChatRoomPatientNurse delete
   */
  export type ChatRoomPatientNurseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    /**
     * Filter which ChatRoomPatientNurse to delete.
     */
    where: ChatRoomPatientNurseWhereUniqueInput
  }

  /**
   * ChatRoomPatientNurse deleteMany
   */
  export type ChatRoomPatientNurseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoomPatientNurses to delete
     */
    where?: ChatRoomPatientNurseWhereInput
  }

  /**
   * ChatRoomPatientNurse.messages
   */
  export type ChatRoomPatientNurse$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * ChatRoomPatientNurse without action
   */
  export type ChatRoomPatientNurseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
  }


  /**
   * Model ChatRoomDoctorNursePatient
   */

  export type AggregateChatRoomDoctorNursePatient = {
    _count: ChatRoomDoctorNursePatientCountAggregateOutputType | null
    _min: ChatRoomDoctorNursePatientMinAggregateOutputType | null
    _max: ChatRoomDoctorNursePatientMaxAggregateOutputType | null
  }

  export type ChatRoomDoctorNursePatientMinAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    doctorId: string | null
    nurseId: string | null
    patientId: string | null
  }

  export type ChatRoomDoctorNursePatientMaxAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    doctorId: string | null
    nurseId: string | null
    patientId: string | null
  }

  export type ChatRoomDoctorNursePatientCountAggregateOutputType = {
    id: number
    status: number
    createdAt: number
    updatedAt: number
    doctorId: number
    nurseId: number
    patientId: number
    _all: number
  }


  export type ChatRoomDoctorNursePatientMinAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    doctorId?: true
    nurseId?: true
    patientId?: true
  }

  export type ChatRoomDoctorNursePatientMaxAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    doctorId?: true
    nurseId?: true
    patientId?: true
  }

  export type ChatRoomDoctorNursePatientCountAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    doctorId?: true
    nurseId?: true
    patientId?: true
    _all?: true
  }

  export type ChatRoomDoctorNursePatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoomDoctorNursePatient to aggregate.
     */
    where?: ChatRoomDoctorNursePatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomDoctorNursePatients to fetch.
     */
    orderBy?: ChatRoomDoctorNursePatientOrderByWithRelationInput | ChatRoomDoctorNursePatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatRoomDoctorNursePatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomDoctorNursePatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomDoctorNursePatients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatRoomDoctorNursePatients
    **/
    _count?: true | ChatRoomDoctorNursePatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomDoctorNursePatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomDoctorNursePatientMaxAggregateInputType
  }

  export type GetChatRoomDoctorNursePatientAggregateType<T extends ChatRoomDoctorNursePatientAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoomDoctorNursePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoomDoctorNursePatient[P]>
      : GetScalarType<T[P], AggregateChatRoomDoctorNursePatient[P]>
  }




  export type ChatRoomDoctorNursePatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomDoctorNursePatientWhereInput
    orderBy?: ChatRoomDoctorNursePatientOrderByWithAggregationInput | ChatRoomDoctorNursePatientOrderByWithAggregationInput[]
    by: ChatRoomDoctorNursePatientScalarFieldEnum[] | ChatRoomDoctorNursePatientScalarFieldEnum
    having?: ChatRoomDoctorNursePatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomDoctorNursePatientCountAggregateInputType | true
    _min?: ChatRoomDoctorNursePatientMinAggregateInputType
    _max?: ChatRoomDoctorNursePatientMaxAggregateInputType
  }

  export type ChatRoomDoctorNursePatientGroupByOutputType = {
    id: string
    status: string
    createdAt: Date
    updatedAt: Date
    doctorId: string | null
    nurseId: string | null
    patientId: string | null
    _count: ChatRoomDoctorNursePatientCountAggregateOutputType | null
    _min: ChatRoomDoctorNursePatientMinAggregateOutputType | null
    _max: ChatRoomDoctorNursePatientMaxAggregateOutputType | null
  }

  type GetChatRoomDoctorNursePatientGroupByPayload<T extends ChatRoomDoctorNursePatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomDoctorNursePatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomDoctorNursePatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomDoctorNursePatientGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomDoctorNursePatientGroupByOutputType[P]>
        }
      >
    >


  export type ChatRoomDoctorNursePatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorId?: boolean
    nurseId?: boolean
    patientId?: boolean
    doctor?: boolean | ChatRoomDoctorNursePatient$doctorArgs<ExtArgs>
    nurse?: boolean | ChatRoomDoctorNursePatient$nurseArgs<ExtArgs>
    patient?: boolean | ChatRoomDoctorNursePatient$patientArgs<ExtArgs>
    messages?: boolean | ChatRoomDoctorNursePatient$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomDoctorNursePatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoomDoctorNursePatient"]>

  export type ChatRoomDoctorNursePatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorId?: boolean
    nurseId?: boolean
    patientId?: boolean
    doctor?: boolean | ChatRoomDoctorNursePatient$doctorArgs<ExtArgs>
    nurse?: boolean | ChatRoomDoctorNursePatient$nurseArgs<ExtArgs>
    patient?: boolean | ChatRoomDoctorNursePatient$patientArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoomDoctorNursePatient"]>

  export type ChatRoomDoctorNursePatientSelectScalar = {
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorId?: boolean
    nurseId?: boolean
    patientId?: boolean
  }

  export type ChatRoomDoctorNursePatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | ChatRoomDoctorNursePatient$doctorArgs<ExtArgs>
    nurse?: boolean | ChatRoomDoctorNursePatient$nurseArgs<ExtArgs>
    patient?: boolean | ChatRoomDoctorNursePatient$patientArgs<ExtArgs>
    messages?: boolean | ChatRoomDoctorNursePatient$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomDoctorNursePatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatRoomDoctorNursePatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | ChatRoomDoctorNursePatient$doctorArgs<ExtArgs>
    nurse?: boolean | ChatRoomDoctorNursePatient$nurseArgs<ExtArgs>
    patient?: boolean | ChatRoomDoctorNursePatient$patientArgs<ExtArgs>
  }

  export type $ChatRoomDoctorNursePatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatRoomDoctorNursePatient"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs> | null
      nurse: Prisma.$NursePayload<ExtArgs> | null
      patient: Prisma.$PatientPayload<ExtArgs> | null
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: string
      createdAt: Date
      updatedAt: Date
      doctorId: string | null
      nurseId: string | null
      patientId: string | null
    }, ExtArgs["result"]["chatRoomDoctorNursePatient"]>
    composites: {}
  }

  type ChatRoomDoctorNursePatientGetPayload<S extends boolean | null | undefined | ChatRoomDoctorNursePatientDefaultArgs> = $Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload, S>

  type ChatRoomDoctorNursePatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatRoomDoctorNursePatientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatRoomDoctorNursePatientCountAggregateInputType | true
    }

  export interface ChatRoomDoctorNursePatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoomDoctorNursePatient'], meta: { name: 'ChatRoomDoctorNursePatient' } }
    /**
     * Find zero or one ChatRoomDoctorNursePatient that matches the filter.
     * @param {ChatRoomDoctorNursePatientFindUniqueArgs} args - Arguments to find a ChatRoomDoctorNursePatient
     * @example
     * // Get one ChatRoomDoctorNursePatient
     * const chatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatRoomDoctorNursePatientFindUniqueArgs>(args: SelectSubset<T, ChatRoomDoctorNursePatientFindUniqueArgs<ExtArgs>>): Prisma__ChatRoomDoctorNursePatientClient<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatRoomDoctorNursePatient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatRoomDoctorNursePatientFindUniqueOrThrowArgs} args - Arguments to find a ChatRoomDoctorNursePatient
     * @example
     * // Get one ChatRoomDoctorNursePatient
     * const chatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatRoomDoctorNursePatientFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatRoomDoctorNursePatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatRoomDoctorNursePatientClient<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatRoomDoctorNursePatient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomDoctorNursePatientFindFirstArgs} args - Arguments to find a ChatRoomDoctorNursePatient
     * @example
     * // Get one ChatRoomDoctorNursePatient
     * const chatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatRoomDoctorNursePatientFindFirstArgs>(args?: SelectSubset<T, ChatRoomDoctorNursePatientFindFirstArgs<ExtArgs>>): Prisma__ChatRoomDoctorNursePatientClient<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatRoomDoctorNursePatient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomDoctorNursePatientFindFirstOrThrowArgs} args - Arguments to find a ChatRoomDoctorNursePatient
     * @example
     * // Get one ChatRoomDoctorNursePatient
     * const chatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatRoomDoctorNursePatientFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatRoomDoctorNursePatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatRoomDoctorNursePatientClient<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatRoomDoctorNursePatients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomDoctorNursePatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRoomDoctorNursePatients
     * const chatRoomDoctorNursePatients = await prisma.chatRoomDoctorNursePatient.findMany()
     * 
     * // Get first 10 ChatRoomDoctorNursePatients
     * const chatRoomDoctorNursePatients = await prisma.chatRoomDoctorNursePatient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatRoomDoctorNursePatientWithIdOnly = await prisma.chatRoomDoctorNursePatient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatRoomDoctorNursePatientFindManyArgs>(args?: SelectSubset<T, ChatRoomDoctorNursePatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatRoomDoctorNursePatient.
     * @param {ChatRoomDoctorNursePatientCreateArgs} args - Arguments to create a ChatRoomDoctorNursePatient.
     * @example
     * // Create one ChatRoomDoctorNursePatient
     * const ChatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.create({
     *   data: {
     *     // ... data to create a ChatRoomDoctorNursePatient
     *   }
     * })
     * 
     */
    create<T extends ChatRoomDoctorNursePatientCreateArgs>(args: SelectSubset<T, ChatRoomDoctorNursePatientCreateArgs<ExtArgs>>): Prisma__ChatRoomDoctorNursePatientClient<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatRoomDoctorNursePatients.
     * @param {ChatRoomDoctorNursePatientCreateManyArgs} args - Arguments to create many ChatRoomDoctorNursePatients.
     * @example
     * // Create many ChatRoomDoctorNursePatients
     * const chatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatRoomDoctorNursePatientCreateManyArgs>(args?: SelectSubset<T, ChatRoomDoctorNursePatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatRoomDoctorNursePatients and returns the data saved in the database.
     * @param {ChatRoomDoctorNursePatientCreateManyAndReturnArgs} args - Arguments to create many ChatRoomDoctorNursePatients.
     * @example
     * // Create many ChatRoomDoctorNursePatients
     * const chatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatRoomDoctorNursePatients and only return the `id`
     * const chatRoomDoctorNursePatientWithIdOnly = await prisma.chatRoomDoctorNursePatient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatRoomDoctorNursePatientCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatRoomDoctorNursePatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatRoomDoctorNursePatient.
     * @param {ChatRoomDoctorNursePatientDeleteArgs} args - Arguments to delete one ChatRoomDoctorNursePatient.
     * @example
     * // Delete one ChatRoomDoctorNursePatient
     * const ChatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.delete({
     *   where: {
     *     // ... filter to delete one ChatRoomDoctorNursePatient
     *   }
     * })
     * 
     */
    delete<T extends ChatRoomDoctorNursePatientDeleteArgs>(args: SelectSubset<T, ChatRoomDoctorNursePatientDeleteArgs<ExtArgs>>): Prisma__ChatRoomDoctorNursePatientClient<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatRoomDoctorNursePatient.
     * @param {ChatRoomDoctorNursePatientUpdateArgs} args - Arguments to update one ChatRoomDoctorNursePatient.
     * @example
     * // Update one ChatRoomDoctorNursePatient
     * const chatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatRoomDoctorNursePatientUpdateArgs>(args: SelectSubset<T, ChatRoomDoctorNursePatientUpdateArgs<ExtArgs>>): Prisma__ChatRoomDoctorNursePatientClient<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatRoomDoctorNursePatients.
     * @param {ChatRoomDoctorNursePatientDeleteManyArgs} args - Arguments to filter ChatRoomDoctorNursePatients to delete.
     * @example
     * // Delete a few ChatRoomDoctorNursePatients
     * const { count } = await prisma.chatRoomDoctorNursePatient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatRoomDoctorNursePatientDeleteManyArgs>(args?: SelectSubset<T, ChatRoomDoctorNursePatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRoomDoctorNursePatients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomDoctorNursePatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRoomDoctorNursePatients
     * const chatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatRoomDoctorNursePatientUpdateManyArgs>(args: SelectSubset<T, ChatRoomDoctorNursePatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatRoomDoctorNursePatient.
     * @param {ChatRoomDoctorNursePatientUpsertArgs} args - Arguments to update or create a ChatRoomDoctorNursePatient.
     * @example
     * // Update or create a ChatRoomDoctorNursePatient
     * const chatRoomDoctorNursePatient = await prisma.chatRoomDoctorNursePatient.upsert({
     *   create: {
     *     // ... data to create a ChatRoomDoctorNursePatient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoomDoctorNursePatient we want to update
     *   }
     * })
     */
    upsert<T extends ChatRoomDoctorNursePatientUpsertArgs>(args: SelectSubset<T, ChatRoomDoctorNursePatientUpsertArgs<ExtArgs>>): Prisma__ChatRoomDoctorNursePatientClient<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatRoomDoctorNursePatients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomDoctorNursePatientCountArgs} args - Arguments to filter ChatRoomDoctorNursePatients to count.
     * @example
     * // Count the number of ChatRoomDoctorNursePatients
     * const count = await prisma.chatRoomDoctorNursePatient.count({
     *   where: {
     *     // ... the filter for the ChatRoomDoctorNursePatients we want to count
     *   }
     * })
    **/
    count<T extends ChatRoomDoctorNursePatientCountArgs>(
      args?: Subset<T, ChatRoomDoctorNursePatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomDoctorNursePatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoomDoctorNursePatient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomDoctorNursePatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomDoctorNursePatientAggregateArgs>(args: Subset<T, ChatRoomDoctorNursePatientAggregateArgs>): Prisma.PrismaPromise<GetChatRoomDoctorNursePatientAggregateType<T>>

    /**
     * Group by ChatRoomDoctorNursePatient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomDoctorNursePatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatRoomDoctorNursePatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatRoomDoctorNursePatientGroupByArgs['orderBy'] }
        : { orderBy?: ChatRoomDoctorNursePatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatRoomDoctorNursePatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomDoctorNursePatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatRoomDoctorNursePatient model
   */
  readonly fields: ChatRoomDoctorNursePatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatRoomDoctorNursePatient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatRoomDoctorNursePatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends ChatRoomDoctorNursePatient$doctorArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDoctorNursePatient$doctorArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    nurse<T extends ChatRoomDoctorNursePatient$nurseArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDoctorNursePatient$nurseArgs<ExtArgs>>): Prisma__NurseClient<$Result.GetResult<Prisma.$NursePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patient<T extends ChatRoomDoctorNursePatient$patientArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDoctorNursePatient$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    messages<T extends ChatRoomDoctorNursePatient$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDoctorNursePatient$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatRoomDoctorNursePatient model
   */ 
  interface ChatRoomDoctorNursePatientFieldRefs {
    readonly id: FieldRef<"ChatRoomDoctorNursePatient", 'String'>
    readonly status: FieldRef<"ChatRoomDoctorNursePatient", 'String'>
    readonly createdAt: FieldRef<"ChatRoomDoctorNursePatient", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatRoomDoctorNursePatient", 'DateTime'>
    readonly doctorId: FieldRef<"ChatRoomDoctorNursePatient", 'String'>
    readonly nurseId: FieldRef<"ChatRoomDoctorNursePatient", 'String'>
    readonly patientId: FieldRef<"ChatRoomDoctorNursePatient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChatRoomDoctorNursePatient findUnique
   */
  export type ChatRoomDoctorNursePatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomDoctorNursePatient to fetch.
     */
    where: ChatRoomDoctorNursePatientWhereUniqueInput
  }

  /**
   * ChatRoomDoctorNursePatient findUniqueOrThrow
   */
  export type ChatRoomDoctorNursePatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomDoctorNursePatient to fetch.
     */
    where: ChatRoomDoctorNursePatientWhereUniqueInput
  }

  /**
   * ChatRoomDoctorNursePatient findFirst
   */
  export type ChatRoomDoctorNursePatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomDoctorNursePatient to fetch.
     */
    where?: ChatRoomDoctorNursePatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomDoctorNursePatients to fetch.
     */
    orderBy?: ChatRoomDoctorNursePatientOrderByWithRelationInput | ChatRoomDoctorNursePatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRoomDoctorNursePatients.
     */
    cursor?: ChatRoomDoctorNursePatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomDoctorNursePatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomDoctorNursePatients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRoomDoctorNursePatients.
     */
    distinct?: ChatRoomDoctorNursePatientScalarFieldEnum | ChatRoomDoctorNursePatientScalarFieldEnum[]
  }

  /**
   * ChatRoomDoctorNursePatient findFirstOrThrow
   */
  export type ChatRoomDoctorNursePatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomDoctorNursePatient to fetch.
     */
    where?: ChatRoomDoctorNursePatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomDoctorNursePatients to fetch.
     */
    orderBy?: ChatRoomDoctorNursePatientOrderByWithRelationInput | ChatRoomDoctorNursePatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRoomDoctorNursePatients.
     */
    cursor?: ChatRoomDoctorNursePatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomDoctorNursePatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomDoctorNursePatients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRoomDoctorNursePatients.
     */
    distinct?: ChatRoomDoctorNursePatientScalarFieldEnum | ChatRoomDoctorNursePatientScalarFieldEnum[]
  }

  /**
   * ChatRoomDoctorNursePatient findMany
   */
  export type ChatRoomDoctorNursePatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomDoctorNursePatients to fetch.
     */
    where?: ChatRoomDoctorNursePatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomDoctorNursePatients to fetch.
     */
    orderBy?: ChatRoomDoctorNursePatientOrderByWithRelationInput | ChatRoomDoctorNursePatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatRoomDoctorNursePatients.
     */
    cursor?: ChatRoomDoctorNursePatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomDoctorNursePatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomDoctorNursePatients.
     */
    skip?: number
    distinct?: ChatRoomDoctorNursePatientScalarFieldEnum | ChatRoomDoctorNursePatientScalarFieldEnum[]
  }

  /**
   * ChatRoomDoctorNursePatient create
   */
  export type ChatRoomDoctorNursePatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatRoomDoctorNursePatient.
     */
    data: XOR<ChatRoomDoctorNursePatientCreateInput, ChatRoomDoctorNursePatientUncheckedCreateInput>
  }

  /**
   * ChatRoomDoctorNursePatient createMany
   */
  export type ChatRoomDoctorNursePatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatRoomDoctorNursePatients.
     */
    data: ChatRoomDoctorNursePatientCreateManyInput | ChatRoomDoctorNursePatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatRoomDoctorNursePatient createManyAndReturn
   */
  export type ChatRoomDoctorNursePatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatRoomDoctorNursePatients.
     */
    data: ChatRoomDoctorNursePatientCreateManyInput | ChatRoomDoctorNursePatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatRoomDoctorNursePatient update
   */
  export type ChatRoomDoctorNursePatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatRoomDoctorNursePatient.
     */
    data: XOR<ChatRoomDoctorNursePatientUpdateInput, ChatRoomDoctorNursePatientUncheckedUpdateInput>
    /**
     * Choose, which ChatRoomDoctorNursePatient to update.
     */
    where: ChatRoomDoctorNursePatientWhereUniqueInput
  }

  /**
   * ChatRoomDoctorNursePatient updateMany
   */
  export type ChatRoomDoctorNursePatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatRoomDoctorNursePatients.
     */
    data: XOR<ChatRoomDoctorNursePatientUpdateManyMutationInput, ChatRoomDoctorNursePatientUncheckedUpdateManyInput>
    /**
     * Filter which ChatRoomDoctorNursePatients to update
     */
    where?: ChatRoomDoctorNursePatientWhereInput
  }

  /**
   * ChatRoomDoctorNursePatient upsert
   */
  export type ChatRoomDoctorNursePatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatRoomDoctorNursePatient to update in case it exists.
     */
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    /**
     * In case the ChatRoomDoctorNursePatient found by the `where` argument doesn't exist, create a new ChatRoomDoctorNursePatient with this data.
     */
    create: XOR<ChatRoomDoctorNursePatientCreateInput, ChatRoomDoctorNursePatientUncheckedCreateInput>
    /**
     * In case the ChatRoomDoctorNursePatient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatRoomDoctorNursePatientUpdateInput, ChatRoomDoctorNursePatientUncheckedUpdateInput>
  }

  /**
   * ChatRoomDoctorNursePatient delete
   */
  export type ChatRoomDoctorNursePatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    /**
     * Filter which ChatRoomDoctorNursePatient to delete.
     */
    where: ChatRoomDoctorNursePatientWhereUniqueInput
  }

  /**
   * ChatRoomDoctorNursePatient deleteMany
   */
  export type ChatRoomDoctorNursePatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoomDoctorNursePatients to delete
     */
    where?: ChatRoomDoctorNursePatientWhereInput
  }

  /**
   * ChatRoomDoctorNursePatient.doctor
   */
  export type ChatRoomDoctorNursePatient$doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
  }

  /**
   * ChatRoomDoctorNursePatient.nurse
   */
  export type ChatRoomDoctorNursePatient$nurseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nurse
     */
    select?: NurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NurseInclude<ExtArgs> | null
    where?: NurseWhereInput
  }

  /**
   * ChatRoomDoctorNursePatient.patient
   */
  export type ChatRoomDoctorNursePatient$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * ChatRoomDoctorNursePatient.messages
   */
  export type ChatRoomDoctorNursePatient$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * ChatRoomDoctorNursePatient without action
   */
  export type ChatRoomDoctorNursePatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    senderId: string | null
    isRead: boolean | null
    readAt: Date | null
    senderRole: $Enums.Role | null
    chatRoomId: string | null
    chatRoomPatientNurseId: string | null
    chatRoomDoctorNursePatientId: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    senderId: string | null
    isRead: boolean | null
    readAt: Date | null
    senderRole: $Enums.Role | null
    chatRoomId: string | null
    chatRoomPatientNurseId: string | null
    chatRoomDoctorNursePatientId: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    senderId: number
    isRead: number
    readAt: number
    senderRole: number
    chatRoomId: number
    chatRoomPatientNurseId: number
    chatRoomDoctorNursePatientId: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    senderId?: true
    isRead?: true
    readAt?: true
    senderRole?: true
    chatRoomId?: true
    chatRoomPatientNurseId?: true
    chatRoomDoctorNursePatientId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    senderId?: true
    isRead?: true
    readAt?: true
    senderRole?: true
    chatRoomId?: true
    chatRoomPatientNurseId?: true
    chatRoomDoctorNursePatientId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    senderId?: true
    isRead?: true
    readAt?: true
    senderRole?: true
    chatRoomId?: true
    chatRoomPatientNurseId?: true
    chatRoomDoctorNursePatientId?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    senderId: string
    isRead: boolean
    readAt: Date | null
    senderRole: $Enums.Role
    chatRoomId: string | null
    chatRoomPatientNurseId: string | null
    chatRoomDoctorNursePatientId: string | null
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    senderId?: boolean
    isRead?: boolean
    readAt?: boolean
    senderRole?: boolean
    chatRoomId?: boolean
    chatRoomPatientNurseId?: boolean
    chatRoomDoctorNursePatientId?: boolean
    chatRoom?: boolean | Message$chatRoomArgs<ExtArgs>
    chatRoomPatientNurse?: boolean | Message$chatRoomPatientNurseArgs<ExtArgs>
    chatRoomDoctorNursePatient?: boolean | Message$chatRoomDoctorNursePatientArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    senderId?: boolean
    isRead?: boolean
    readAt?: boolean
    senderRole?: boolean
    chatRoomId?: boolean
    chatRoomPatientNurseId?: boolean
    chatRoomDoctorNursePatientId?: boolean
    chatRoom?: boolean | Message$chatRoomArgs<ExtArgs>
    chatRoomPatientNurse?: boolean | Message$chatRoomPatientNurseArgs<ExtArgs>
    chatRoomDoctorNursePatient?: boolean | Message$chatRoomDoctorNursePatientArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    senderId?: boolean
    isRead?: boolean
    readAt?: boolean
    senderRole?: boolean
    chatRoomId?: boolean
    chatRoomPatientNurseId?: boolean
    chatRoomDoctorNursePatientId?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRoom?: boolean | Message$chatRoomArgs<ExtArgs>
    chatRoomPatientNurse?: boolean | Message$chatRoomPatientNurseArgs<ExtArgs>
    chatRoomDoctorNursePatient?: boolean | Message$chatRoomDoctorNursePatientArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRoom?: boolean | Message$chatRoomArgs<ExtArgs>
    chatRoomPatientNurse?: boolean | Message$chatRoomPatientNurseArgs<ExtArgs>
    chatRoomDoctorNursePatient?: boolean | Message$chatRoomDoctorNursePatientArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      chatRoom: Prisma.$ChatRoomPayload<ExtArgs> | null
      chatRoomPatientNurse: Prisma.$ChatRoomPatientNursePayload<ExtArgs> | null
      chatRoomDoctorNursePatient: Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      senderId: string
      isRead: boolean
      readAt: Date | null
      senderRole: $Enums.Role
      chatRoomId: string | null
      chatRoomPatientNurseId: string | null
      chatRoomDoctorNursePatientId: string | null
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatRoom<T extends Message$chatRoomArgs<ExtArgs> = {}>(args?: Subset<T, Message$chatRoomArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    chatRoomPatientNurse<T extends Message$chatRoomPatientNurseArgs<ExtArgs> = {}>(args?: Subset<T, Message$chatRoomPatientNurseArgs<ExtArgs>>): Prisma__ChatRoomPatientNurseClient<$Result.GetResult<Prisma.$ChatRoomPatientNursePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    chatRoomDoctorNursePatient<T extends Message$chatRoomDoctorNursePatientArgs<ExtArgs> = {}>(args?: Subset<T, Message$chatRoomDoctorNursePatientArgs<ExtArgs>>): Prisma__ChatRoomDoctorNursePatientClient<$Result.GetResult<Prisma.$ChatRoomDoctorNursePatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly isRead: FieldRef<"Message", 'Boolean'>
    readonly readAt: FieldRef<"Message", 'DateTime'>
    readonly senderRole: FieldRef<"Message", 'Role'>
    readonly chatRoomId: FieldRef<"Message", 'String'>
    readonly chatRoomPatientNurseId: FieldRef<"Message", 'String'>
    readonly chatRoomDoctorNursePatientId: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.chatRoom
   */
  export type Message$chatRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    where?: ChatRoomWhereInput
  }

  /**
   * Message.chatRoomPatientNurse
   */
  export type Message$chatRoomPatientNurseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomPatientNurse
     */
    select?: ChatRoomPatientNurseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomPatientNurseInclude<ExtArgs> | null
    where?: ChatRoomPatientNurseWhereInput
  }

  /**
   * Message.chatRoomDoctorNursePatient
   */
  export type Message$chatRoomDoctorNursePatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomDoctorNursePatient
     */
    select?: ChatRoomDoctorNursePatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomDoctorNursePatientInclude<ExtArgs> | null
    where?: ChatRoomDoctorNursePatientWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    entity: number
    entityId: number
    userId: number
    oldData: number
    newData: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    entity?: true
    entityId?: true
    userId?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    entity?: true
    entityId?: true
    userId?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    entity?: true
    entityId?: true
    userId?: true
    oldData?: true
    newData?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    action: string
    entity: string
    entityId: string
    userId: string
    oldData: JsonValue | null
    newData: JsonValue | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    userId?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    userId?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    userId?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
  }


  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      entity: string
      entityId: string
      userId: string
      oldData: Prisma.JsonValue | null
      newData: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly oldData: FieldRef<"AuditLog", 'Json'>
    readonly newData: FieldRef<"AuditLog", 'Json'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstname: 'firstname',
    lastname: 'lastname',
    password: 'password',
    role: 'role',
    telephoneNumber: 'telephoneNumber',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    address: 'address',
    profilePhoto: 'profilePhoto',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isEmailVerified: 'isEmailVerified',
    emailVerificationToken: 'emailVerificationToken',
    emailVerificationExpires: 'emailVerificationExpires'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    allergies: 'allergies',
    emergencyContactName: 'emergencyContactName',
    emergencyContactPhone: 'emergencyContactPhone',
    emergencyContactRelationship: 'emergencyContactRelationship',
    insuranceInfo: 'insuranceInfo',
    preferredPharmacy: 'preferredPharmacy'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const NurseScalarFieldEnum: {
    id: 'id',
    availability: 'availability',
    rating: 'rating',
    professionalLicenseNumber: 'professionalLicenseNumber',
    nursingCertification: 'nursingCertification',
    hospitalAffiliation: 'hospitalAffiliation',
    yearsOfExperience: 'yearsOfExperience',
    userId: 'userId'
  };

  export type NurseScalarFieldEnum = (typeof NurseScalarFieldEnum)[keyof typeof NurseScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    specialization: 'specialization',
    availability: 'availability',
    rating: 'rating',
    professionalLicenseNumber: 'professionalLicenseNumber',
    medicalDiploma: 'medicalDiploma',
    hospitalAffiliation: 'hospitalAffiliation',
    experience: 'experience',
    userId: 'userId',
    deletedAt: 'deletedAt',
    isDeleted: 'isDeleted'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const DoctorNurseScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    nurseId: 'nurseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorNurseScalarFieldEnum = (typeof DoctorNurseScalarFieldEnum)[keyof typeof DoctorNurseScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    nurseId: 'nurseId',
    details: 'details',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    completedAt: 'completedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    nurseId: 'nurseId',
    patientId: 'patientId',
    taskId: 'taskId',
    title: 'title',
    description: 'description',
    startTime: 'startTime',
    endTime: 'endTime',
    status: 'status',
    location: 'location',
    isRecurring: 'isRecurring',
    recurrencePattern: 'recurrencePattern',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const NurseServiceRequestScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    nurseId: 'nurseId',
    status: 'status',
    serviceType: 'serviceType',
    description: 'description',
    preferredDate: 'preferredDate',
    urgency: 'urgency',
    location: 'location',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    completedAt: 'completedAt',
    notes: 'notes',
    rating: 'rating',
    feedback: 'feedback'
  };

  export type NurseServiceRequestScalarFieldEnum = (typeof NurseServiceRequestScalarFieldEnum)[keyof typeof NurseServiceRequestScalarFieldEnum]


  export const DoctorPatientRequestScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    message: 'message'
  };

  export type DoctorPatientRequestScalarFieldEnum = (typeof DoctorPatientRequestScalarFieldEnum)[keyof typeof DoctorPatientRequestScalarFieldEnum]


  export const DoctorPatientScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    startDate: 'startDate',
    endDate: 'endDate',
    active: 'active'
  };

  export type DoctorPatientScalarFieldEnum = (typeof DoctorPatientScalarFieldEnum)[keyof typeof DoctorPatientScalarFieldEnum]


  export const PharmacyScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    pharmacyName: 'pharmacyName',
    pharmacyLicenseNumber: 'pharmacyLicenseNumber',
    pharmacyAddress: 'pharmacyAddress',
    contactName: 'contactName',
    openingHours: 'openingHours',
    deliveryOptions: 'deliveryOptions'
  };

  export type PharmacyScalarFieldEnum = (typeof PharmacyScalarFieldEnum)[keyof typeof PharmacyScalarFieldEnum]


  export const MedicineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    stock: 'stock',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicineScalarFieldEnum = (typeof MedicineScalarFieldEnum)[keyof typeof MedicineScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const PrescriptionScalarFieldEnum: {
    id: 'id',
    date: 'date',
    details: 'details',
    approved: 'approved',
    patientId: 'patientId',
    doctorId: 'doctorId',
    medicines_id: 'medicines_id',
    pharmacyId: 'pharmacyId'
  };

  export type PrescriptionScalarFieldEnum = (typeof PrescriptionScalarFieldEnum)[keyof typeof PrescriptionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    read: 'read',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const NotificationReadScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    userId: 'userId',
    readAt: 'readAt'
  };

  export type NotificationReadScalarFieldEnum = (typeof NotificationReadScalarFieldEnum)[keyof typeof NotificationReadScalarFieldEnum]


  export const MedicalRecordScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    diagnosis: 'diagnosis',
    treatment: 'treatment',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicalRecordScalarFieldEnum = (typeof MedicalRecordScalarFieldEnum)[keyof typeof MedicalRecordScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    details: 'details',
    dateGenerated: 'dateGenerated',
    adminId: 'adminId'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const NurseVisitScalarFieldEnum: {
    id: 'id',
    date: 'date',
    notes: 'notes',
    nurseId: 'nurseId',
    patientId: 'patientId'
  };

  export type NurseVisitScalarFieldEnum = (typeof NurseVisitScalarFieldEnum)[keyof typeof NurseVisitScalarFieldEnum]


  export const ChatRoomScalarFieldEnum: {
    id: 'id',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    patientId: 'patientId',
    doctorId: 'doctorId'
  };

  export type ChatRoomScalarFieldEnum = (typeof ChatRoomScalarFieldEnum)[keyof typeof ChatRoomScalarFieldEnum]


  export const ChatRoomPatientNurseScalarFieldEnum: {
    id: 'id',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    nurseId: 'nurseId',
    patientId: 'patientId'
  };

  export type ChatRoomPatientNurseScalarFieldEnum = (typeof ChatRoomPatientNurseScalarFieldEnum)[keyof typeof ChatRoomPatientNurseScalarFieldEnum]


  export const ChatRoomDoctorNursePatientScalarFieldEnum: {
    id: 'id',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    doctorId: 'doctorId',
    nurseId: 'nurseId',
    patientId: 'patientId'
  };

  export type ChatRoomDoctorNursePatientScalarFieldEnum = (typeof ChatRoomDoctorNursePatientScalarFieldEnum)[keyof typeof ChatRoomDoctorNursePatientScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    senderId: 'senderId',
    isRead: 'isRead',
    readAt: 'readAt',
    senderRole: 'senderRole',
    chatRoomId: 'chatRoomId',
    chatRoomPatientNurseId: 'chatRoomPatientNurseId',
    chatRoomDoctorNursePatientId: 'chatRoomDoctorNursePatientId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    userId: 'userId',
    oldData: 'oldData',
    newData: 'newData',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'ServiceStatus'
   */
  export type EnumServiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceStatus'>
    


  /**
   * Reference to a field of type 'ServiceStatus[]'
   */
  export type ListEnumServiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceStatus[]'>
    


  /**
   * Reference to a field of type 'RequestStatus'
   */
  export type EnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus'>
    


  /**
   * Reference to a field of type 'RequestStatus[]'
   */
  export type ListEnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    telephoneNumber?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isEmailVerified?: BoolFilter<"User"> | boolean
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    emailVerificationExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    nurse?: XOR<NurseNullableRelationFilter, NurseWhereInput> | null
    doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    pharmacy?: XOR<PharmacyNullableRelationFilter, PharmacyWhereInput> | null
    admin?: XOR<AdminNullableRelationFilter, AdminWhereInput> | null
    notifications?: XOR<NotificationNullableRelationFilter, NotificationWhereInput> | null
    notificationReads?: XOR<NotificationReadNullableRelationFilter, NotificationReadWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telephoneNumber?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    emailVerificationExpires?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    nurse?: NurseOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
    pharmacy?: PharmacyOrderByWithRelationInput
    admin?: AdminOrderByWithRelationInput
    notifications?: NotificationOrderByWithRelationInput
    notificationReads?: NotificationReadOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    emailVerificationToken?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    telephoneNumber?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isEmailVerified?: BoolFilter<"User"> | boolean
    emailVerificationExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    nurse?: XOR<NurseNullableRelationFilter, NurseWhereInput> | null
    doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    pharmacy?: XOR<PharmacyNullableRelationFilter, PharmacyWhereInput> | null
    admin?: XOR<AdminNullableRelationFilter, AdminWhereInput> | null
    notifications?: XOR<NotificationNullableRelationFilter, NotificationWhereInput> | null
    notificationReads?: XOR<NotificationReadNullableRelationFilter, NotificationReadWhereInput> | null
  }, "id" | "email" | "emailVerificationToken">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telephoneNumber?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    emailVerificationExpires?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstname?: StringWithAggregatesFilter<"User"> | string
    lastname?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    telephoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    gender?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    profilePhoto?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isEmailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerificationExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    userId?: StringFilter<"Patient"> | string
    allergies?: StringNullableFilter<"Patient"> | string | null
    emergencyContactName?: StringNullableFilter<"Patient"> | string | null
    emergencyContactPhone?: StringNullableFilter<"Patient"> | string | null
    emergencyContactRelationship?: StringNullableFilter<"Patient"> | string | null
    insuranceInfo?: StringNullableFilter<"Patient"> | string | null
    preferredPharmacy?: StringNullableFilter<"Patient"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    medicalRecord?: MedicalRecordListRelationFilter
    prescriptions?: PrescriptionListRelationFilter
    nurseVisits?: NurseVisitListRelationFilter
    doctorRequests?: DoctorPatientRequestListRelationFilter
    doctors?: DoctorPatientListRelationFilter
    nurseServiceRequests?: NurseServiceRequestListRelationFilter
    chatRooms?: ChatRoomListRelationFilter
    scheduledTasks?: ScheduleListRelationFilter
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientListRelationFilter
    chatRoomPatients?: ChatRoomPatientNurseListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    allergies?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    emergencyContactRelationship?: SortOrderInput | SortOrder
    insuranceInfo?: SortOrderInput | SortOrder
    preferredPharmacy?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    medicalRecord?: MedicalRecordOrderByRelationAggregateInput
    prescriptions?: PrescriptionOrderByRelationAggregateInput
    nurseVisits?: NurseVisitOrderByRelationAggregateInput
    doctorRequests?: DoctorPatientRequestOrderByRelationAggregateInput
    doctors?: DoctorPatientOrderByRelationAggregateInput
    nurseServiceRequests?: NurseServiceRequestOrderByRelationAggregateInput
    chatRooms?: ChatRoomOrderByRelationAggregateInput
    scheduledTasks?: ScheduleOrderByRelationAggregateInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientOrderByRelationAggregateInput
    chatRoomPatients?: ChatRoomPatientNurseOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    allergies?: StringNullableFilter<"Patient"> | string | null
    emergencyContactName?: StringNullableFilter<"Patient"> | string | null
    emergencyContactPhone?: StringNullableFilter<"Patient"> | string | null
    emergencyContactRelationship?: StringNullableFilter<"Patient"> | string | null
    insuranceInfo?: StringNullableFilter<"Patient"> | string | null
    preferredPharmacy?: StringNullableFilter<"Patient"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    medicalRecord?: MedicalRecordListRelationFilter
    prescriptions?: PrescriptionListRelationFilter
    nurseVisits?: NurseVisitListRelationFilter
    doctorRequests?: DoctorPatientRequestListRelationFilter
    doctors?: DoctorPatientListRelationFilter
    nurseServiceRequests?: NurseServiceRequestListRelationFilter
    chatRooms?: ChatRoomListRelationFilter
    scheduledTasks?: ScheduleListRelationFilter
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientListRelationFilter
    chatRoomPatients?: ChatRoomPatientNurseListRelationFilter
  }, "id" | "userId">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    allergies?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    emergencyContactRelationship?: SortOrderInput | SortOrder
    insuranceInfo?: SortOrderInput | SortOrder
    preferredPharmacy?: SortOrderInput | SortOrder
    _count?: PatientCountOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    userId?: StringWithAggregatesFilter<"Patient"> | string
    allergies?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    emergencyContactName?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    emergencyContactPhone?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    emergencyContactRelationship?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    insuranceInfo?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    preferredPharmacy?: StringNullableWithAggregatesFilter<"Patient"> | string | null
  }

  export type NurseWhereInput = {
    AND?: NurseWhereInput | NurseWhereInput[]
    OR?: NurseWhereInput[]
    NOT?: NurseWhereInput | NurseWhereInput[]
    id?: StringFilter<"Nurse"> | string
    availability?: BoolFilter<"Nurse"> | boolean
    rating?: FloatFilter<"Nurse"> | number
    professionalLicenseNumber?: StringNullableFilter<"Nurse"> | string | null
    nursingCertification?: StringNullableFilter<"Nurse"> | string | null
    hospitalAffiliation?: StringNullableFilter<"Nurse"> | string | null
    yearsOfExperience?: IntNullableFilter<"Nurse"> | number | null
    userId?: StringFilter<"Nurse"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    nurseVisits?: NurseVisitListRelationFilter
    medicalRecords?: MedicalRecordListRelationFilter
    serviceRequests?: NurseServiceRequestListRelationFilter
    nurseChats?: ChatRoomPatientNurseListRelationFilter
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientListRelationFilter
    doctors?: DoctorListRelationFilter
    doctorNurses?: DoctorNurseListRelationFilter
    scheduledTasks?: ScheduleListRelationFilter
    tasks?: TaskListRelationFilter
  }

  export type NurseOrderByWithRelationInput = {
    id?: SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrderInput | SortOrder
    nursingCertification?: SortOrderInput | SortOrder
    hospitalAffiliation?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    nurseVisits?: NurseVisitOrderByRelationAggregateInput
    medicalRecords?: MedicalRecordOrderByRelationAggregateInput
    serviceRequests?: NurseServiceRequestOrderByRelationAggregateInput
    nurseChats?: ChatRoomPatientNurseOrderByRelationAggregateInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientOrderByRelationAggregateInput
    doctors?: DoctorOrderByRelationAggregateInput
    doctorNurses?: DoctorNurseOrderByRelationAggregateInput
    scheduledTasks?: ScheduleOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
  }

  export type NurseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: NurseWhereInput | NurseWhereInput[]
    OR?: NurseWhereInput[]
    NOT?: NurseWhereInput | NurseWhereInput[]
    availability?: BoolFilter<"Nurse"> | boolean
    rating?: FloatFilter<"Nurse"> | number
    professionalLicenseNumber?: StringNullableFilter<"Nurse"> | string | null
    nursingCertification?: StringNullableFilter<"Nurse"> | string | null
    hospitalAffiliation?: StringNullableFilter<"Nurse"> | string | null
    yearsOfExperience?: IntNullableFilter<"Nurse"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    nurseVisits?: NurseVisitListRelationFilter
    medicalRecords?: MedicalRecordListRelationFilter
    serviceRequests?: NurseServiceRequestListRelationFilter
    nurseChats?: ChatRoomPatientNurseListRelationFilter
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientListRelationFilter
    doctors?: DoctorListRelationFilter
    doctorNurses?: DoctorNurseListRelationFilter
    scheduledTasks?: ScheduleListRelationFilter
    tasks?: TaskListRelationFilter
  }, "id" | "userId">

  export type NurseOrderByWithAggregationInput = {
    id?: SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrderInput | SortOrder
    nursingCertification?: SortOrderInput | SortOrder
    hospitalAffiliation?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: NurseCountOrderByAggregateInput
    _avg?: NurseAvgOrderByAggregateInput
    _max?: NurseMaxOrderByAggregateInput
    _min?: NurseMinOrderByAggregateInput
    _sum?: NurseSumOrderByAggregateInput
  }

  export type NurseScalarWhereWithAggregatesInput = {
    AND?: NurseScalarWhereWithAggregatesInput | NurseScalarWhereWithAggregatesInput[]
    OR?: NurseScalarWhereWithAggregatesInput[]
    NOT?: NurseScalarWhereWithAggregatesInput | NurseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Nurse"> | string
    availability?: BoolWithAggregatesFilter<"Nurse"> | boolean
    rating?: FloatWithAggregatesFilter<"Nurse"> | number
    professionalLicenseNumber?: StringNullableWithAggregatesFilter<"Nurse"> | string | null
    nursingCertification?: StringNullableWithAggregatesFilter<"Nurse"> | string | null
    hospitalAffiliation?: StringNullableWithAggregatesFilter<"Nurse"> | string | null
    yearsOfExperience?: IntNullableWithAggregatesFilter<"Nurse"> | number | null
    userId?: StringWithAggregatesFilter<"Nurse"> | string
  }

  export type DoctorWhereInput = {
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    id?: StringFilter<"Doctor"> | string
    specialization?: StringNullableFilter<"Doctor"> | string | null
    availability?: BoolFilter<"Doctor"> | boolean
    rating?: FloatFilter<"Doctor"> | number
    professionalLicenseNumber?: StringNullableFilter<"Doctor"> | string | null
    medicalDiploma?: StringNullableFilter<"Doctor"> | string | null
    hospitalAffiliation?: StringNullableFilter<"Doctor"> | string | null
    experience?: StringNullableFilter<"Doctor"> | string | null
    userId?: StringFilter<"Doctor"> | string
    deletedAt?: DateTimeNullableFilter<"Doctor"> | Date | string | null
    isDeleted?: BoolFilter<"Doctor"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    patients?: DoctorPatientListRelationFilter
    patientRequests?: DoctorPatientRequestListRelationFilter
    medicalRecords?: MedicalRecordListRelationFilter
    prescriptions?: PrescriptionListRelationFilter
    chatRooms?: ChatRoomListRelationFilter
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientListRelationFilter
    nurses?: NurseListRelationFilter
    doctorNurses?: DoctorNurseListRelationFilter
    tasks?: TaskListRelationFilter
    scheduledTasks?: ScheduleListRelationFilter
  }

  export type DoctorOrderByWithRelationInput = {
    id?: SortOrder
    specialization?: SortOrderInput | SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrderInput | SortOrder
    medicalDiploma?: SortOrderInput | SortOrder
    hospitalAffiliation?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    userId?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    user?: UserOrderByWithRelationInput
    patients?: DoctorPatientOrderByRelationAggregateInput
    patientRequests?: DoctorPatientRequestOrderByRelationAggregateInput
    medicalRecords?: MedicalRecordOrderByRelationAggregateInput
    prescriptions?: PrescriptionOrderByRelationAggregateInput
    chatRooms?: ChatRoomOrderByRelationAggregateInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientOrderByRelationAggregateInput
    nurses?: NurseOrderByRelationAggregateInput
    doctorNurses?: DoctorNurseOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
    scheduledTasks?: ScheduleOrderByRelationAggregateInput
  }

  export type DoctorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    specialization?: StringNullableFilter<"Doctor"> | string | null
    availability?: BoolFilter<"Doctor"> | boolean
    rating?: FloatFilter<"Doctor"> | number
    professionalLicenseNumber?: StringNullableFilter<"Doctor"> | string | null
    medicalDiploma?: StringNullableFilter<"Doctor"> | string | null
    hospitalAffiliation?: StringNullableFilter<"Doctor"> | string | null
    experience?: StringNullableFilter<"Doctor"> | string | null
    deletedAt?: DateTimeNullableFilter<"Doctor"> | Date | string | null
    isDeleted?: BoolFilter<"Doctor"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    patients?: DoctorPatientListRelationFilter
    patientRequests?: DoctorPatientRequestListRelationFilter
    medicalRecords?: MedicalRecordListRelationFilter
    prescriptions?: PrescriptionListRelationFilter
    chatRooms?: ChatRoomListRelationFilter
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientListRelationFilter
    nurses?: NurseListRelationFilter
    doctorNurses?: DoctorNurseListRelationFilter
    tasks?: TaskListRelationFilter
    scheduledTasks?: ScheduleListRelationFilter
  }, "id" | "userId">

  export type DoctorOrderByWithAggregationInput = {
    id?: SortOrder
    specialization?: SortOrderInput | SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrderInput | SortOrder
    medicalDiploma?: SortOrderInput | SortOrder
    hospitalAffiliation?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    userId?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _avg?: DoctorAvgOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
    _sum?: DoctorSumOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    OR?: DoctorScalarWhereWithAggregatesInput[]
    NOT?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Doctor"> | string
    specialization?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    availability?: BoolWithAggregatesFilter<"Doctor"> | boolean
    rating?: FloatWithAggregatesFilter<"Doctor"> | number
    professionalLicenseNumber?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    medicalDiploma?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    hospitalAffiliation?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    experience?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    userId?: StringWithAggregatesFilter<"Doctor"> | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Doctor"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"Doctor"> | boolean
  }

  export type DoctorNurseWhereInput = {
    AND?: DoctorNurseWhereInput | DoctorNurseWhereInput[]
    OR?: DoctorNurseWhereInput[]
    NOT?: DoctorNurseWhereInput | DoctorNurseWhereInput[]
    id?: StringFilter<"DoctorNurse"> | string
    doctorId?: StringFilter<"DoctorNurse"> | string
    nurseId?: StringFilter<"DoctorNurse"> | string
    createdAt?: DateTimeFilter<"DoctorNurse"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorNurse"> | Date | string
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    nurse?: XOR<NurseRelationFilter, NurseWhereInput>
  }

  export type DoctorNurseOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    nurse?: NurseOrderByWithRelationInput
  }

  export type DoctorNurseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    doctorId_nurseId?: DoctorNurseDoctorIdNurseIdCompoundUniqueInput
    AND?: DoctorNurseWhereInput | DoctorNurseWhereInput[]
    OR?: DoctorNurseWhereInput[]
    NOT?: DoctorNurseWhereInput | DoctorNurseWhereInput[]
    doctorId?: StringFilter<"DoctorNurse"> | string
    nurseId?: StringFilter<"DoctorNurse"> | string
    createdAt?: DateTimeFilter<"DoctorNurse"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorNurse"> | Date | string
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    nurse?: XOR<NurseRelationFilter, NurseWhereInput>
  }, "id" | "doctorId_nurseId">

  export type DoctorNurseOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorNurseCountOrderByAggregateInput
    _max?: DoctorNurseMaxOrderByAggregateInput
    _min?: DoctorNurseMinOrderByAggregateInput
  }

  export type DoctorNurseScalarWhereWithAggregatesInput = {
    AND?: DoctorNurseScalarWhereWithAggregatesInput | DoctorNurseScalarWhereWithAggregatesInput[]
    OR?: DoctorNurseScalarWhereWithAggregatesInput[]
    NOT?: DoctorNurseScalarWhereWithAggregatesInput | DoctorNurseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorNurse"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorNurse"> | string
    nurseId?: StringWithAggregatesFilter<"DoctorNurse"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DoctorNurse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DoctorNurse"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    doctorId?: StringFilter<"Task"> | string
    nurseId?: StringFilter<"Task"> | string
    details?: StringFilter<"Task"> | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    nurse?: XOR<NurseRelationFilter, NurseWhereInput>
    scheduledTasks?: ScheduleListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    details?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    doctor?: DoctorOrderByWithRelationInput
    nurse?: NurseOrderByWithRelationInput
    scheduledTasks?: ScheduleOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    doctorId?: StringFilter<"Task"> | string
    nurseId?: StringFilter<"Task"> | string
    details?: StringFilter<"Task"> | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    nurse?: XOR<NurseRelationFilter, NurseWhereInput>
    scheduledTasks?: ScheduleListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    details?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    doctorId?: StringWithAggregatesFilter<"Task"> | string
    nurseId?: StringWithAggregatesFilter<"Task"> | string
    details?: StringWithAggregatesFilter<"Task"> | string
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: StringFilter<"Schedule"> | string
    doctorId?: StringNullableFilter<"Schedule"> | string | null
    nurseId?: StringNullableFilter<"Schedule"> | string | null
    patientId?: StringNullableFilter<"Schedule"> | string | null
    taskId?: StringNullableFilter<"Schedule"> | string | null
    title?: StringFilter<"Schedule"> | string
    description?: StringNullableFilter<"Schedule"> | string | null
    startTime?: DateTimeFilter<"Schedule"> | Date | string
    endTime?: DateTimeFilter<"Schedule"> | Date | string
    status?: StringFilter<"Schedule"> | string
    location?: StringNullableFilter<"Schedule"> | string | null
    isRecurring?: BoolFilter<"Schedule"> | boolean
    recurrencePattern?: StringNullableFilter<"Schedule"> | string | null
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    nurse?: XOR<NurseNullableRelationFilter, NurseWhereInput> | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    task?: XOR<TaskNullableRelationFilter, TaskWhereInput> | null
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    nurseId?: SortOrderInput | SortOrder
    patientId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    nurse?: NurseOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    doctorId?: StringNullableFilter<"Schedule"> | string | null
    nurseId?: StringNullableFilter<"Schedule"> | string | null
    patientId?: StringNullableFilter<"Schedule"> | string | null
    taskId?: StringNullableFilter<"Schedule"> | string | null
    title?: StringFilter<"Schedule"> | string
    description?: StringNullableFilter<"Schedule"> | string | null
    startTime?: DateTimeFilter<"Schedule"> | Date | string
    endTime?: DateTimeFilter<"Schedule"> | Date | string
    status?: StringFilter<"Schedule"> | string
    location?: StringNullableFilter<"Schedule"> | string | null
    isRecurring?: BoolFilter<"Schedule"> | boolean
    recurrencePattern?: StringNullableFilter<"Schedule"> | string | null
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    nurse?: XOR<NurseNullableRelationFilter, NurseWhereInput> | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    task?: XOR<TaskNullableRelationFilter, TaskWhereInput> | null
  }, "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    nurseId?: SortOrderInput | SortOrder
    patientId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Schedule"> | string
    doctorId?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    nurseId?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    patientId?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    taskId?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    title?: StringWithAggregatesFilter<"Schedule"> | string
    description?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    startTime?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    status?: StringWithAggregatesFilter<"Schedule"> | string
    location?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    isRecurring?: BoolWithAggregatesFilter<"Schedule"> | boolean
    recurrencePattern?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
  }

  export type NurseServiceRequestWhereInput = {
    AND?: NurseServiceRequestWhereInput | NurseServiceRequestWhereInput[]
    OR?: NurseServiceRequestWhereInput[]
    NOT?: NurseServiceRequestWhereInput | NurseServiceRequestWhereInput[]
    id?: StringFilter<"NurseServiceRequest"> | string
    patientId?: StringFilter<"NurseServiceRequest"> | string
    nurseId?: StringNullableFilter<"NurseServiceRequest"> | string | null
    status?: EnumServiceStatusFilter<"NurseServiceRequest"> | $Enums.ServiceStatus
    serviceType?: StringFilter<"NurseServiceRequest"> | string
    description?: StringFilter<"NurseServiceRequest"> | string
    preferredDate?: DateTimeFilter<"NurseServiceRequest"> | Date | string
    urgency?: StringFilter<"NurseServiceRequest"> | string
    location?: StringFilter<"NurseServiceRequest"> | string
    createdAt?: DateTimeFilter<"NurseServiceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"NurseServiceRequest"> | Date | string
    completedAt?: DateTimeNullableFilter<"NurseServiceRequest"> | Date | string | null
    notes?: StringNullableFilter<"NurseServiceRequest"> | string | null
    rating?: IntNullableFilter<"NurseServiceRequest"> | number | null
    feedback?: StringNullableFilter<"NurseServiceRequest"> | string | null
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    nurse?: XOR<NurseNullableRelationFilter, NurseWhereInput> | null
  }

  export type NurseServiceRequestOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    nurseId?: SortOrderInput | SortOrder
    status?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    preferredDate?: SortOrder
    urgency?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    nurse?: NurseOrderByWithRelationInput
  }

  export type NurseServiceRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NurseServiceRequestWhereInput | NurseServiceRequestWhereInput[]
    OR?: NurseServiceRequestWhereInput[]
    NOT?: NurseServiceRequestWhereInput | NurseServiceRequestWhereInput[]
    patientId?: StringFilter<"NurseServiceRequest"> | string
    nurseId?: StringNullableFilter<"NurseServiceRequest"> | string | null
    status?: EnumServiceStatusFilter<"NurseServiceRequest"> | $Enums.ServiceStatus
    serviceType?: StringFilter<"NurseServiceRequest"> | string
    description?: StringFilter<"NurseServiceRequest"> | string
    preferredDate?: DateTimeFilter<"NurseServiceRequest"> | Date | string
    urgency?: StringFilter<"NurseServiceRequest"> | string
    location?: StringFilter<"NurseServiceRequest"> | string
    createdAt?: DateTimeFilter<"NurseServiceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"NurseServiceRequest"> | Date | string
    completedAt?: DateTimeNullableFilter<"NurseServiceRequest"> | Date | string | null
    notes?: StringNullableFilter<"NurseServiceRequest"> | string | null
    rating?: IntNullableFilter<"NurseServiceRequest"> | number | null
    feedback?: StringNullableFilter<"NurseServiceRequest"> | string | null
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    nurse?: XOR<NurseNullableRelationFilter, NurseWhereInput> | null
  }, "id">

  export type NurseServiceRequestOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    nurseId?: SortOrderInput | SortOrder
    status?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    preferredDate?: SortOrder
    urgency?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    _count?: NurseServiceRequestCountOrderByAggregateInput
    _avg?: NurseServiceRequestAvgOrderByAggregateInput
    _max?: NurseServiceRequestMaxOrderByAggregateInput
    _min?: NurseServiceRequestMinOrderByAggregateInput
    _sum?: NurseServiceRequestSumOrderByAggregateInput
  }

  export type NurseServiceRequestScalarWhereWithAggregatesInput = {
    AND?: NurseServiceRequestScalarWhereWithAggregatesInput | NurseServiceRequestScalarWhereWithAggregatesInput[]
    OR?: NurseServiceRequestScalarWhereWithAggregatesInput[]
    NOT?: NurseServiceRequestScalarWhereWithAggregatesInput | NurseServiceRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NurseServiceRequest"> | string
    patientId?: StringWithAggregatesFilter<"NurseServiceRequest"> | string
    nurseId?: StringNullableWithAggregatesFilter<"NurseServiceRequest"> | string | null
    status?: EnumServiceStatusWithAggregatesFilter<"NurseServiceRequest"> | $Enums.ServiceStatus
    serviceType?: StringWithAggregatesFilter<"NurseServiceRequest"> | string
    description?: StringWithAggregatesFilter<"NurseServiceRequest"> | string
    preferredDate?: DateTimeWithAggregatesFilter<"NurseServiceRequest"> | Date | string
    urgency?: StringWithAggregatesFilter<"NurseServiceRequest"> | string
    location?: StringWithAggregatesFilter<"NurseServiceRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"NurseServiceRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NurseServiceRequest"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"NurseServiceRequest"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"NurseServiceRequest"> | string | null
    rating?: IntNullableWithAggregatesFilter<"NurseServiceRequest"> | number | null
    feedback?: StringNullableWithAggregatesFilter<"NurseServiceRequest"> | string | null
  }

  export type DoctorPatientRequestWhereInput = {
    AND?: DoctorPatientRequestWhereInput | DoctorPatientRequestWhereInput[]
    OR?: DoctorPatientRequestWhereInput[]
    NOT?: DoctorPatientRequestWhereInput | DoctorPatientRequestWhereInput[]
    id?: StringFilter<"DoctorPatientRequest"> | string
    patientId?: StringFilter<"DoctorPatientRequest"> | string
    doctorId?: StringFilter<"DoctorPatientRequest"> | string
    status?: EnumRequestStatusFilter<"DoctorPatientRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"DoctorPatientRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorPatientRequest"> | Date | string
    message?: StringNullableFilter<"DoctorPatientRequest"> | string | null
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
  }

  export type DoctorPatientRequestOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    message?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
  }

  export type DoctorPatientRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId_doctorId?: DoctorPatientRequestPatientIdDoctorIdCompoundUniqueInput
    AND?: DoctorPatientRequestWhereInput | DoctorPatientRequestWhereInput[]
    OR?: DoctorPatientRequestWhereInput[]
    NOT?: DoctorPatientRequestWhereInput | DoctorPatientRequestWhereInput[]
    patientId?: StringFilter<"DoctorPatientRequest"> | string
    doctorId?: StringFilter<"DoctorPatientRequest"> | string
    status?: EnumRequestStatusFilter<"DoctorPatientRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"DoctorPatientRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorPatientRequest"> | Date | string
    message?: StringNullableFilter<"DoctorPatientRequest"> | string | null
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
  }, "id" | "patientId_doctorId">

  export type DoctorPatientRequestOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    message?: SortOrderInput | SortOrder
    _count?: DoctorPatientRequestCountOrderByAggregateInput
    _max?: DoctorPatientRequestMaxOrderByAggregateInput
    _min?: DoctorPatientRequestMinOrderByAggregateInput
  }

  export type DoctorPatientRequestScalarWhereWithAggregatesInput = {
    AND?: DoctorPatientRequestScalarWhereWithAggregatesInput | DoctorPatientRequestScalarWhereWithAggregatesInput[]
    OR?: DoctorPatientRequestScalarWhereWithAggregatesInput[]
    NOT?: DoctorPatientRequestScalarWhereWithAggregatesInput | DoctorPatientRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorPatientRequest"> | string
    patientId?: StringWithAggregatesFilter<"DoctorPatientRequest"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorPatientRequest"> | string
    status?: EnumRequestStatusWithAggregatesFilter<"DoctorPatientRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeWithAggregatesFilter<"DoctorPatientRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DoctorPatientRequest"> | Date | string
    message?: StringNullableWithAggregatesFilter<"DoctorPatientRequest"> | string | null
  }

  export type DoctorPatientWhereInput = {
    AND?: DoctorPatientWhereInput | DoctorPatientWhereInput[]
    OR?: DoctorPatientWhereInput[]
    NOT?: DoctorPatientWhereInput | DoctorPatientWhereInput[]
    id?: StringFilter<"DoctorPatient"> | string
    patientId?: StringFilter<"DoctorPatient"> | string
    doctorId?: StringFilter<"DoctorPatient"> | string
    startDate?: DateTimeFilter<"DoctorPatient"> | Date | string
    endDate?: DateTimeNullableFilter<"DoctorPatient"> | Date | string | null
    active?: BoolFilter<"DoctorPatient"> | boolean
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
  }

  export type DoctorPatientOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    active?: SortOrder
    patient?: PatientOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
  }

  export type DoctorPatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId_doctorId?: DoctorPatientPatientIdDoctorIdCompoundUniqueInput
    AND?: DoctorPatientWhereInput | DoctorPatientWhereInput[]
    OR?: DoctorPatientWhereInput[]
    NOT?: DoctorPatientWhereInput | DoctorPatientWhereInput[]
    patientId?: StringFilter<"DoctorPatient"> | string
    doctorId?: StringFilter<"DoctorPatient"> | string
    startDate?: DateTimeFilter<"DoctorPatient"> | Date | string
    endDate?: DateTimeNullableFilter<"DoctorPatient"> | Date | string | null
    active?: BoolFilter<"DoctorPatient"> | boolean
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
  }, "id" | "patientId_doctorId">

  export type DoctorPatientOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    active?: SortOrder
    _count?: DoctorPatientCountOrderByAggregateInput
    _max?: DoctorPatientMaxOrderByAggregateInput
    _min?: DoctorPatientMinOrderByAggregateInput
  }

  export type DoctorPatientScalarWhereWithAggregatesInput = {
    AND?: DoctorPatientScalarWhereWithAggregatesInput | DoctorPatientScalarWhereWithAggregatesInput[]
    OR?: DoctorPatientScalarWhereWithAggregatesInput[]
    NOT?: DoctorPatientScalarWhereWithAggregatesInput | DoctorPatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorPatient"> | string
    patientId?: StringWithAggregatesFilter<"DoctorPatient"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorPatient"> | string
    startDate?: DateTimeWithAggregatesFilter<"DoctorPatient"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"DoctorPatient"> | Date | string | null
    active?: BoolWithAggregatesFilter<"DoctorPatient"> | boolean
  }

  export type PharmacyWhereInput = {
    AND?: PharmacyWhereInput | PharmacyWhereInput[]
    OR?: PharmacyWhereInput[]
    NOT?: PharmacyWhereInput | PharmacyWhereInput[]
    id?: StringFilter<"Pharmacy"> | string
    userId?: StringFilter<"Pharmacy"> | string
    pharmacyName?: StringNullableFilter<"Pharmacy"> | string | null
    pharmacyLicenseNumber?: StringNullableFilter<"Pharmacy"> | string | null
    pharmacyAddress?: StringNullableFilter<"Pharmacy"> | string | null
    contactName?: StringNullableFilter<"Pharmacy"> | string | null
    openingHours?: StringNullableFilter<"Pharmacy"> | string | null
    deliveryOptions?: StringNullableFilter<"Pharmacy"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    prescriptions?: PrescriptionListRelationFilter
    medicines?: MedicineListRelationFilter
  }

  export type PharmacyOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    pharmacyName?: SortOrderInput | SortOrder
    pharmacyLicenseNumber?: SortOrderInput | SortOrder
    pharmacyAddress?: SortOrderInput | SortOrder
    contactName?: SortOrderInput | SortOrder
    openingHours?: SortOrderInput | SortOrder
    deliveryOptions?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    prescriptions?: PrescriptionOrderByRelationAggregateInput
    medicines?: MedicineOrderByRelationAggregateInput
  }

  export type PharmacyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: PharmacyWhereInput | PharmacyWhereInput[]
    OR?: PharmacyWhereInput[]
    NOT?: PharmacyWhereInput | PharmacyWhereInput[]
    pharmacyName?: StringNullableFilter<"Pharmacy"> | string | null
    pharmacyLicenseNumber?: StringNullableFilter<"Pharmacy"> | string | null
    pharmacyAddress?: StringNullableFilter<"Pharmacy"> | string | null
    contactName?: StringNullableFilter<"Pharmacy"> | string | null
    openingHours?: StringNullableFilter<"Pharmacy"> | string | null
    deliveryOptions?: StringNullableFilter<"Pharmacy"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    prescriptions?: PrescriptionListRelationFilter
    medicines?: MedicineListRelationFilter
  }, "id" | "userId">

  export type PharmacyOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    pharmacyName?: SortOrderInput | SortOrder
    pharmacyLicenseNumber?: SortOrderInput | SortOrder
    pharmacyAddress?: SortOrderInput | SortOrder
    contactName?: SortOrderInput | SortOrder
    openingHours?: SortOrderInput | SortOrder
    deliveryOptions?: SortOrderInput | SortOrder
    _count?: PharmacyCountOrderByAggregateInput
    _max?: PharmacyMaxOrderByAggregateInput
    _min?: PharmacyMinOrderByAggregateInput
  }

  export type PharmacyScalarWhereWithAggregatesInput = {
    AND?: PharmacyScalarWhereWithAggregatesInput | PharmacyScalarWhereWithAggregatesInput[]
    OR?: PharmacyScalarWhereWithAggregatesInput[]
    NOT?: PharmacyScalarWhereWithAggregatesInput | PharmacyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pharmacy"> | string
    userId?: StringWithAggregatesFilter<"Pharmacy"> | string
    pharmacyName?: StringNullableWithAggregatesFilter<"Pharmacy"> | string | null
    pharmacyLicenseNumber?: StringNullableWithAggregatesFilter<"Pharmacy"> | string | null
    pharmacyAddress?: StringNullableWithAggregatesFilter<"Pharmacy"> | string | null
    contactName?: StringNullableWithAggregatesFilter<"Pharmacy"> | string | null
    openingHours?: StringNullableWithAggregatesFilter<"Pharmacy"> | string | null
    deliveryOptions?: StringNullableWithAggregatesFilter<"Pharmacy"> | string | null
  }

  export type MedicineWhereInput = {
    AND?: MedicineWhereInput | MedicineWhereInput[]
    OR?: MedicineWhereInput[]
    NOT?: MedicineWhereInput | MedicineWhereInput[]
    id?: StringFilter<"Medicine"> | string
    name?: StringFilter<"Medicine"> | string
    description?: StringNullableFilter<"Medicine"> | string | null
    stock?: IntFilter<"Medicine"> | number
    price?: FloatFilter<"Medicine"> | number
    createdAt?: DateTimeFilter<"Medicine"> | Date | string
    updatedAt?: DateTimeFilter<"Medicine"> | Date | string
    prescriptions?: PrescriptionListRelationFilter
    pharmacies?: PharmacyListRelationFilter
  }

  export type MedicineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    stock?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    prescriptions?: PrescriptionOrderByRelationAggregateInput
    pharmacies?: PharmacyOrderByRelationAggregateInput
  }

  export type MedicineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedicineWhereInput | MedicineWhereInput[]
    OR?: MedicineWhereInput[]
    NOT?: MedicineWhereInput | MedicineWhereInput[]
    name?: StringFilter<"Medicine"> | string
    description?: StringNullableFilter<"Medicine"> | string | null
    stock?: IntFilter<"Medicine"> | number
    price?: FloatFilter<"Medicine"> | number
    createdAt?: DateTimeFilter<"Medicine"> | Date | string
    updatedAt?: DateTimeFilter<"Medicine"> | Date | string
    prescriptions?: PrescriptionListRelationFilter
    pharmacies?: PharmacyListRelationFilter
  }, "id">

  export type MedicineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    stock?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicineCountOrderByAggregateInput
    _avg?: MedicineAvgOrderByAggregateInput
    _max?: MedicineMaxOrderByAggregateInput
    _min?: MedicineMinOrderByAggregateInput
    _sum?: MedicineSumOrderByAggregateInput
  }

  export type MedicineScalarWhereWithAggregatesInput = {
    AND?: MedicineScalarWhereWithAggregatesInput | MedicineScalarWhereWithAggregatesInput[]
    OR?: MedicineScalarWhereWithAggregatesInput[]
    NOT?: MedicineScalarWhereWithAggregatesInput | MedicineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Medicine"> | string
    name?: StringWithAggregatesFilter<"Medicine"> | string
    description?: StringNullableWithAggregatesFilter<"Medicine"> | string | null
    stock?: IntWithAggregatesFilter<"Medicine"> | number
    price?: FloatWithAggregatesFilter<"Medicine"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Medicine"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Medicine"> | Date | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    userId?: StringFilter<"Admin"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    reports?: ReportListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    reports?: ReportOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    user?: XOR<UserRelationFilter, UserWhereInput>
    reports?: ReportListRelationFilter
  }, "id" | "userId">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    userId?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type PrescriptionWhereInput = {
    AND?: PrescriptionWhereInput | PrescriptionWhereInput[]
    OR?: PrescriptionWhereInput[]
    NOT?: PrescriptionWhereInput | PrescriptionWhereInput[]
    id?: StringFilter<"Prescription"> | string
    date?: DateTimeFilter<"Prescription"> | Date | string
    details?: StringFilter<"Prescription"> | string
    approved?: BoolFilter<"Prescription"> | boolean
    patientId?: StringFilter<"Prescription"> | string
    doctorId?: StringFilter<"Prescription"> | string
    medicines_id?: StringNullableFilter<"Prescription"> | string | null
    pharmacyId?: StringNullableFilter<"Prescription"> | string | null
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    pharmacy?: XOR<PharmacyNullableRelationFilter, PharmacyWhereInput> | null
    prescription_medicines?: XOR<MedicineNullableRelationFilter, MedicineWhereInput> | null
  }

  export type PrescriptionOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    details?: SortOrder
    approved?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    medicines_id?: SortOrderInput | SortOrder
    pharmacyId?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
    pharmacy?: PharmacyOrderByWithRelationInput
    prescription_medicines?: MedicineOrderByWithRelationInput
  }

  export type PrescriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PrescriptionWhereInput | PrescriptionWhereInput[]
    OR?: PrescriptionWhereInput[]
    NOT?: PrescriptionWhereInput | PrescriptionWhereInput[]
    date?: DateTimeFilter<"Prescription"> | Date | string
    details?: StringFilter<"Prescription"> | string
    approved?: BoolFilter<"Prescription"> | boolean
    patientId?: StringFilter<"Prescription"> | string
    doctorId?: StringFilter<"Prescription"> | string
    medicines_id?: StringNullableFilter<"Prescription"> | string | null
    pharmacyId?: StringNullableFilter<"Prescription"> | string | null
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    pharmacy?: XOR<PharmacyNullableRelationFilter, PharmacyWhereInput> | null
    prescription_medicines?: XOR<MedicineNullableRelationFilter, MedicineWhereInput> | null
  }, "id">

  export type PrescriptionOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    details?: SortOrder
    approved?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    medicines_id?: SortOrderInput | SortOrder
    pharmacyId?: SortOrderInput | SortOrder
    _count?: PrescriptionCountOrderByAggregateInput
    _max?: PrescriptionMaxOrderByAggregateInput
    _min?: PrescriptionMinOrderByAggregateInput
  }

  export type PrescriptionScalarWhereWithAggregatesInput = {
    AND?: PrescriptionScalarWhereWithAggregatesInput | PrescriptionScalarWhereWithAggregatesInput[]
    OR?: PrescriptionScalarWhereWithAggregatesInput[]
    NOT?: PrescriptionScalarWhereWithAggregatesInput | PrescriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Prescription"> | string
    date?: DateTimeWithAggregatesFilter<"Prescription"> | Date | string
    details?: StringWithAggregatesFilter<"Prescription"> | string
    approved?: BoolWithAggregatesFilter<"Prescription"> | boolean
    patientId?: StringWithAggregatesFilter<"Prescription"> | string
    doctorId?: StringWithAggregatesFilter<"Prescription"> | string
    medicines_id?: StringNullableWithAggregatesFilter<"Prescription"> | string | null
    pharmacyId?: StringNullableWithAggregatesFilter<"Prescription"> | string | null
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    readBy?: NotificationReadListRelationFilter
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    readBy?: NotificationReadOrderByRelationAggregateInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    readBy?: NotificationReadListRelationFilter
  }, "id" | "userId">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"Notification">
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type NotificationReadWhereInput = {
    AND?: NotificationReadWhereInput | NotificationReadWhereInput[]
    OR?: NotificationReadWhereInput[]
    NOT?: NotificationReadWhereInput | NotificationReadWhereInput[]
    id?: StringFilter<"NotificationRead"> | string
    notificationId?: StringFilter<"NotificationRead"> | string
    userId?: StringFilter<"NotificationRead"> | string
    readAt?: DateTimeFilter<"NotificationRead"> | Date | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationReadOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
    notification?: NotificationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type NotificationReadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    notificationId_userId?: NotificationReadNotificationIdUserIdCompoundUniqueInput
    AND?: NotificationReadWhereInput | NotificationReadWhereInput[]
    OR?: NotificationReadWhereInput[]
    NOT?: NotificationReadWhereInput | NotificationReadWhereInput[]
    notificationId?: StringFilter<"NotificationRead"> | string
    readAt?: DateTimeFilter<"NotificationRead"> | Date | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId" | "notificationId_userId">

  export type NotificationReadOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
    _count?: NotificationReadCountOrderByAggregateInput
    _max?: NotificationReadMaxOrderByAggregateInput
    _min?: NotificationReadMinOrderByAggregateInput
  }

  export type NotificationReadScalarWhereWithAggregatesInput = {
    AND?: NotificationReadScalarWhereWithAggregatesInput | NotificationReadScalarWhereWithAggregatesInput[]
    OR?: NotificationReadScalarWhereWithAggregatesInput[]
    NOT?: NotificationReadScalarWhereWithAggregatesInput | NotificationReadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationRead"> | string
    notificationId?: StringWithAggregatesFilter<"NotificationRead"> | string
    userId?: StringWithAggregatesFilter<"NotificationRead"> | string
    readAt?: DateTimeWithAggregatesFilter<"NotificationRead"> | Date | string
  }

  export type MedicalRecordWhereInput = {
    AND?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    OR?: MedicalRecordWhereInput[]
    NOT?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    id?: StringFilter<"MedicalRecord"> | string
    patientId?: StringFilter<"MedicalRecord"> | string
    diagnosis?: StringFilter<"MedicalRecord"> | string
    treatment?: StringFilter<"MedicalRecord"> | string
    notes?: StringNullableFilter<"MedicalRecord"> | string | null
    createdAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    nurses?: NurseListRelationFilter
    doctors?: DoctorListRelationFilter
  }

  export type MedicalRecordOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    diagnosis?: SortOrder
    treatment?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    nurses?: NurseOrderByRelationAggregateInput
    doctors?: DoctorOrderByRelationAggregateInput
  }

  export type MedicalRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    OR?: MedicalRecordWhereInput[]
    NOT?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    patientId?: StringFilter<"MedicalRecord"> | string
    diagnosis?: StringFilter<"MedicalRecord"> | string
    treatment?: StringFilter<"MedicalRecord"> | string
    notes?: StringNullableFilter<"MedicalRecord"> | string | null
    createdAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    nurses?: NurseListRelationFilter
    doctors?: DoctorListRelationFilter
  }, "id">

  export type MedicalRecordOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    diagnosis?: SortOrder
    treatment?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicalRecordCountOrderByAggregateInput
    _max?: MedicalRecordMaxOrderByAggregateInput
    _min?: MedicalRecordMinOrderByAggregateInput
  }

  export type MedicalRecordScalarWhereWithAggregatesInput = {
    AND?: MedicalRecordScalarWhereWithAggregatesInput | MedicalRecordScalarWhereWithAggregatesInput[]
    OR?: MedicalRecordScalarWhereWithAggregatesInput[]
    NOT?: MedicalRecordScalarWhereWithAggregatesInput | MedicalRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MedicalRecord"> | string
    patientId?: StringWithAggregatesFilter<"MedicalRecord"> | string
    diagnosis?: StringWithAggregatesFilter<"MedicalRecord"> | string
    treatment?: StringWithAggregatesFilter<"MedicalRecord"> | string
    notes?: StringNullableWithAggregatesFilter<"MedicalRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MedicalRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalRecord"> | Date | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: StringFilter<"Report"> | string
    details?: StringFilter<"Report"> | string
    dateGenerated?: DateTimeFilter<"Report"> | Date | string
    adminId?: StringFilter<"Report"> | string
    admin?: XOR<AdminRelationFilter, AdminWhereInput>
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    details?: SortOrder
    dateGenerated?: SortOrder
    adminId?: SortOrder
    admin?: AdminOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    details?: StringFilter<"Report"> | string
    dateGenerated?: DateTimeFilter<"Report"> | Date | string
    adminId?: StringFilter<"Report"> | string
    admin?: XOR<AdminRelationFilter, AdminWhereInput>
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    details?: SortOrder
    dateGenerated?: SortOrder
    adminId?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Report"> | string
    details?: StringWithAggregatesFilter<"Report"> | string
    dateGenerated?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    adminId?: StringWithAggregatesFilter<"Report"> | string
  }

  export type NurseVisitWhereInput = {
    AND?: NurseVisitWhereInput | NurseVisitWhereInput[]
    OR?: NurseVisitWhereInput[]
    NOT?: NurseVisitWhereInput | NurseVisitWhereInput[]
    id?: StringFilter<"NurseVisit"> | string
    date?: DateTimeFilter<"NurseVisit"> | Date | string
    notes?: StringNullableFilter<"NurseVisit"> | string | null
    nurseId?: StringFilter<"NurseVisit"> | string
    patientId?: StringFilter<"NurseVisit"> | string
    nurse?: XOR<NurseRelationFilter, NurseWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
  }

  export type NurseVisitOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    notes?: SortOrderInput | SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
    nurse?: NurseOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
  }

  export type NurseVisitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NurseVisitWhereInput | NurseVisitWhereInput[]
    OR?: NurseVisitWhereInput[]
    NOT?: NurseVisitWhereInput | NurseVisitWhereInput[]
    date?: DateTimeFilter<"NurseVisit"> | Date | string
    notes?: StringNullableFilter<"NurseVisit"> | string | null
    nurseId?: StringFilter<"NurseVisit"> | string
    patientId?: StringFilter<"NurseVisit"> | string
    nurse?: XOR<NurseRelationFilter, NurseWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
  }, "id">

  export type NurseVisitOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    notes?: SortOrderInput | SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
    _count?: NurseVisitCountOrderByAggregateInput
    _max?: NurseVisitMaxOrderByAggregateInput
    _min?: NurseVisitMinOrderByAggregateInput
  }

  export type NurseVisitScalarWhereWithAggregatesInput = {
    AND?: NurseVisitScalarWhereWithAggregatesInput | NurseVisitScalarWhereWithAggregatesInput[]
    OR?: NurseVisitScalarWhereWithAggregatesInput[]
    NOT?: NurseVisitScalarWhereWithAggregatesInput | NurseVisitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NurseVisit"> | string
    date?: DateTimeWithAggregatesFilter<"NurseVisit"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"NurseVisit"> | string | null
    nurseId?: StringWithAggregatesFilter<"NurseVisit"> | string
    patientId?: StringWithAggregatesFilter<"NurseVisit"> | string
  }

  export type ChatRoomWhereInput = {
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    id?: StringFilter<"ChatRoom"> | string
    status?: StringFilter<"ChatRoom"> | string
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
    patientId?: StringFilter<"ChatRoom"> | string
    doctorId?: StringFilter<"ChatRoom"> | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    messages?: MessageListRelationFilter
  }

  export type ChatRoomOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    patient?: PatientOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChatRoomWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId_doctorId?: ChatRoomPatientIdDoctorIdCompoundUniqueInput
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    status?: StringFilter<"ChatRoom"> | string
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
    patientId?: StringFilter<"ChatRoom"> | string
    doctorId?: StringFilter<"ChatRoom"> | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    messages?: MessageListRelationFilter
  }, "id" | "patientId_doctorId">

  export type ChatRoomOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    _count?: ChatRoomCountOrderByAggregateInput
    _max?: ChatRoomMaxOrderByAggregateInput
    _min?: ChatRoomMinOrderByAggregateInput
  }

  export type ChatRoomScalarWhereWithAggregatesInput = {
    AND?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    OR?: ChatRoomScalarWhereWithAggregatesInput[]
    NOT?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatRoom"> | string
    status?: StringWithAggregatesFilter<"ChatRoom"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
    patientId?: StringWithAggregatesFilter<"ChatRoom"> | string
    doctorId?: StringWithAggregatesFilter<"ChatRoom"> | string
  }

  export type ChatRoomPatientNurseWhereInput = {
    AND?: ChatRoomPatientNurseWhereInput | ChatRoomPatientNurseWhereInput[]
    OR?: ChatRoomPatientNurseWhereInput[]
    NOT?: ChatRoomPatientNurseWhereInput | ChatRoomPatientNurseWhereInput[]
    id?: StringFilter<"ChatRoomPatientNurse"> | string
    status?: StringFilter<"ChatRoomPatientNurse"> | string
    createdAt?: DateTimeFilter<"ChatRoomPatientNurse"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoomPatientNurse"> | Date | string
    nurseId?: StringFilter<"ChatRoomPatientNurse"> | string
    patientId?: StringFilter<"ChatRoomPatientNurse"> | string
    nurse?: XOR<NurseRelationFilter, NurseWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    messages?: MessageListRelationFilter
  }

  export type ChatRoomPatientNurseOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
    nurse?: NurseOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChatRoomPatientNurseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId_nurseId?: ChatRoomPatientNursePatientIdNurseIdCompoundUniqueInput
    AND?: ChatRoomPatientNurseWhereInput | ChatRoomPatientNurseWhereInput[]
    OR?: ChatRoomPatientNurseWhereInput[]
    NOT?: ChatRoomPatientNurseWhereInput | ChatRoomPatientNurseWhereInput[]
    status?: StringFilter<"ChatRoomPatientNurse"> | string
    createdAt?: DateTimeFilter<"ChatRoomPatientNurse"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoomPatientNurse"> | Date | string
    nurseId?: StringFilter<"ChatRoomPatientNurse"> | string
    patientId?: StringFilter<"ChatRoomPatientNurse"> | string
    nurse?: XOR<NurseRelationFilter, NurseWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    messages?: MessageListRelationFilter
  }, "id" | "patientId_nurseId">

  export type ChatRoomPatientNurseOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
    _count?: ChatRoomPatientNurseCountOrderByAggregateInput
    _max?: ChatRoomPatientNurseMaxOrderByAggregateInput
    _min?: ChatRoomPatientNurseMinOrderByAggregateInput
  }

  export type ChatRoomPatientNurseScalarWhereWithAggregatesInput = {
    AND?: ChatRoomPatientNurseScalarWhereWithAggregatesInput | ChatRoomPatientNurseScalarWhereWithAggregatesInput[]
    OR?: ChatRoomPatientNurseScalarWhereWithAggregatesInput[]
    NOT?: ChatRoomPatientNurseScalarWhereWithAggregatesInput | ChatRoomPatientNurseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatRoomPatientNurse"> | string
    status?: StringWithAggregatesFilter<"ChatRoomPatientNurse"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChatRoomPatientNurse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatRoomPatientNurse"> | Date | string
    nurseId?: StringWithAggregatesFilter<"ChatRoomPatientNurse"> | string
    patientId?: StringWithAggregatesFilter<"ChatRoomPatientNurse"> | string
  }

  export type ChatRoomDoctorNursePatientWhereInput = {
    AND?: ChatRoomDoctorNursePatientWhereInput | ChatRoomDoctorNursePatientWhereInput[]
    OR?: ChatRoomDoctorNursePatientWhereInput[]
    NOT?: ChatRoomDoctorNursePatientWhereInput | ChatRoomDoctorNursePatientWhereInput[]
    id?: StringFilter<"ChatRoomDoctorNursePatient"> | string
    status?: StringFilter<"ChatRoomDoctorNursePatient"> | string
    createdAt?: DateTimeFilter<"ChatRoomDoctorNursePatient"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoomDoctorNursePatient"> | Date | string
    doctorId?: StringNullableFilter<"ChatRoomDoctorNursePatient"> | string | null
    nurseId?: StringNullableFilter<"ChatRoomDoctorNursePatient"> | string | null
    patientId?: StringNullableFilter<"ChatRoomDoctorNursePatient"> | string | null
    doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    nurse?: XOR<NurseNullableRelationFilter, NurseWhereInput> | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    messages?: MessageListRelationFilter
  }

  export type ChatRoomDoctorNursePatientOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    nurseId?: SortOrderInput | SortOrder
    patientId?: SortOrderInput | SortOrder
    doctor?: DoctorOrderByWithRelationInput
    nurse?: NurseOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChatRoomDoctorNursePatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    doctorId_nurseId_patientId?: ChatRoomDoctorNursePatientDoctorIdNurseIdPatientIdCompoundUniqueInput
    AND?: ChatRoomDoctorNursePatientWhereInput | ChatRoomDoctorNursePatientWhereInput[]
    OR?: ChatRoomDoctorNursePatientWhereInput[]
    NOT?: ChatRoomDoctorNursePatientWhereInput | ChatRoomDoctorNursePatientWhereInput[]
    status?: StringFilter<"ChatRoomDoctorNursePatient"> | string
    createdAt?: DateTimeFilter<"ChatRoomDoctorNursePatient"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoomDoctorNursePatient"> | Date | string
    doctorId?: StringNullableFilter<"ChatRoomDoctorNursePatient"> | string | null
    nurseId?: StringNullableFilter<"ChatRoomDoctorNursePatient"> | string | null
    patientId?: StringNullableFilter<"ChatRoomDoctorNursePatient"> | string | null
    doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    nurse?: XOR<NurseNullableRelationFilter, NurseWhereInput> | null
    patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    messages?: MessageListRelationFilter
  }, "id" | "doctorId_nurseId_patientId">

  export type ChatRoomDoctorNursePatientOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    nurseId?: SortOrderInput | SortOrder
    patientId?: SortOrderInput | SortOrder
    _count?: ChatRoomDoctorNursePatientCountOrderByAggregateInput
    _max?: ChatRoomDoctorNursePatientMaxOrderByAggregateInput
    _min?: ChatRoomDoctorNursePatientMinOrderByAggregateInput
  }

  export type ChatRoomDoctorNursePatientScalarWhereWithAggregatesInput = {
    AND?: ChatRoomDoctorNursePatientScalarWhereWithAggregatesInput | ChatRoomDoctorNursePatientScalarWhereWithAggregatesInput[]
    OR?: ChatRoomDoctorNursePatientScalarWhereWithAggregatesInput[]
    NOT?: ChatRoomDoctorNursePatientScalarWhereWithAggregatesInput | ChatRoomDoctorNursePatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatRoomDoctorNursePatient"> | string
    status?: StringWithAggregatesFilter<"ChatRoomDoctorNursePatient"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChatRoomDoctorNursePatient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatRoomDoctorNursePatient"> | Date | string
    doctorId?: StringNullableWithAggregatesFilter<"ChatRoomDoctorNursePatient"> | string | null
    nurseId?: StringNullableWithAggregatesFilter<"ChatRoomDoctorNursePatient"> | string | null
    patientId?: StringNullableWithAggregatesFilter<"ChatRoomDoctorNursePatient"> | string | null
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    senderId?: StringFilter<"Message"> | string
    isRead?: BoolFilter<"Message"> | boolean
    readAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    senderRole?: EnumRoleFilter<"Message"> | $Enums.Role
    chatRoomId?: StringNullableFilter<"Message"> | string | null
    chatRoomPatientNurseId?: StringNullableFilter<"Message"> | string | null
    chatRoomDoctorNursePatientId?: StringNullableFilter<"Message"> | string | null
    chatRoom?: XOR<ChatRoomNullableRelationFilter, ChatRoomWhereInput> | null
    chatRoomPatientNurse?: XOR<ChatRoomPatientNurseNullableRelationFilter, ChatRoomPatientNurseWhereInput> | null
    chatRoomDoctorNursePatient?: XOR<ChatRoomDoctorNursePatientNullableRelationFilter, ChatRoomDoctorNursePatientWhereInput> | null
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    senderRole?: SortOrder
    chatRoomId?: SortOrderInput | SortOrder
    chatRoomPatientNurseId?: SortOrderInput | SortOrder
    chatRoomDoctorNursePatientId?: SortOrderInput | SortOrder
    chatRoom?: ChatRoomOrderByWithRelationInput
    chatRoomPatientNurse?: ChatRoomPatientNurseOrderByWithRelationInput
    chatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    senderId?: StringFilter<"Message"> | string
    isRead?: BoolFilter<"Message"> | boolean
    readAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    senderRole?: EnumRoleFilter<"Message"> | $Enums.Role
    chatRoomId?: StringNullableFilter<"Message"> | string | null
    chatRoomPatientNurseId?: StringNullableFilter<"Message"> | string | null
    chatRoomDoctorNursePatientId?: StringNullableFilter<"Message"> | string | null
    chatRoom?: XOR<ChatRoomNullableRelationFilter, ChatRoomWhereInput> | null
    chatRoomPatientNurse?: XOR<ChatRoomPatientNurseNullableRelationFilter, ChatRoomPatientNurseWhereInput> | null
    chatRoomDoctorNursePatient?: XOR<ChatRoomDoctorNursePatientNullableRelationFilter, ChatRoomDoctorNursePatientWhereInput> | null
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    senderRole?: SortOrder
    chatRoomId?: SortOrderInput | SortOrder
    chatRoomPatientNurseId?: SortOrderInput | SortOrder
    chatRoomDoctorNursePatientId?: SortOrderInput | SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    content?: StringWithAggregatesFilter<"Message"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    isRead?: BoolWithAggregatesFilter<"Message"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    senderRole?: EnumRoleWithAggregatesFilter<"Message"> | $Enums.Role
    chatRoomId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    chatRoomPatientNurseId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    chatRoomDoctorNursePatientId?: StringNullableWithAggregatesFilter<"Message"> | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    oldData?: JsonNullableFilter<"AuditLog">
    newData?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    oldData?: JsonNullableFilter<"AuditLog">
    newData?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    oldData?: JsonNullableWithAggregatesFilter<"AuditLog">
    newData?: JsonNullableWithAggregatesFilter<"AuditLog">
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    nurse?: NurseCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    nurse?: NurseUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    nurse?: NurseUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    nurse?: NurseUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientCreateInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NurseCreateInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type NurseCreateManyInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
  }

  export type NurseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NurseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorCreateInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorCreateManyInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type DoctorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorNurseCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutDoctorNursesInput
    nurse: NurseCreateNestedOneWithoutDoctorNursesInput
  }

  export type DoctorNurseUncheckedCreateInput = {
    id?: string
    doctorId: string
    nurseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorNurseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutDoctorNursesNestedInput
    nurse?: NurseUpdateOneRequiredWithoutDoctorNursesNestedInput
  }

  export type DoctorNurseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nurseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNurseCreateManyInput = {
    id?: string
    doctorId: string
    nurseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorNurseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNurseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nurseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    id?: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    doctor: DoctorCreateNestedOneWithoutTasksInput
    nurse: NurseCreateNestedOneWithoutTasksInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    doctorId: string
    nurseId: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doctor?: DoctorUpdateOneRequiredWithoutTasksNestedInput
    nurse?: NurseUpdateOneRequiredWithoutTasksNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nurseId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: string
    doctorId: string
    nurseId: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nurseId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScheduleCreateInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: DoctorCreateNestedOneWithoutScheduledTasksInput
    nurse?: NurseCreateNestedOneWithoutScheduledTasksInput
    patient?: PatientCreateNestedOneWithoutScheduledTasksInput
    task?: TaskCreateNestedOneWithoutScheduledTasksInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: string
    doctorId?: string | null
    nurseId?: string | null
    patientId?: string | null
    taskId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneWithoutScheduledTasksNestedInput
    nurse?: NurseUpdateOneWithoutScheduledTasksNestedInput
    patient?: PatientUpdateOneWithoutScheduledTasksNestedInput
    task?: TaskUpdateOneWithoutScheduledTasksNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateManyInput = {
    id?: string
    doctorId?: string | null
    nurseId?: string | null
    patientId?: string | null
    taskId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NurseServiceRequestCreateInput = {
    id?: string
    status?: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date | string
    urgency: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    feedback?: string | null
    patient: PatientCreateNestedOneWithoutNurseServiceRequestsInput
    nurse?: NurseCreateNestedOneWithoutServiceRequestsInput
  }

  export type NurseServiceRequestUncheckedCreateInput = {
    id?: string
    patientId: string
    nurseId?: string | null
    status?: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date | string
    urgency: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type NurseServiceRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneRequiredWithoutNurseServiceRequestsNestedInput
    nurse?: NurseUpdateOneWithoutServiceRequestsNestedInput
  }

  export type NurseServiceRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NurseServiceRequestCreateManyInput = {
    id?: string
    patientId: string
    nurseId?: string | null
    status?: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date | string
    urgency: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type NurseServiceRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NurseServiceRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorPatientRequestCreateInput = {
    id?: string
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    message?: string | null
    patient: PatientCreateNestedOneWithoutDoctorRequestsInput
    doctor: DoctorCreateNestedOneWithoutPatientRequestsInput
  }

  export type DoctorPatientRequestUncheckedCreateInput = {
    id?: string
    patientId: string
    doctorId: string
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    message?: string | null
  }

  export type DoctorPatientRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneRequiredWithoutDoctorRequestsNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutPatientRequestsNestedInput
  }

  export type DoctorPatientRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorPatientRequestCreateManyInput = {
    id?: string
    patientId: string
    doctorId: string
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    message?: string | null
  }

  export type DoctorPatientRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorPatientRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorPatientCreateInput = {
    id?: string
    startDate?: Date | string
    endDate?: Date | string | null
    active?: boolean
    patient: PatientCreateNestedOneWithoutDoctorsInput
    doctor: DoctorCreateNestedOneWithoutPatientsInput
  }

  export type DoctorPatientUncheckedCreateInput = {
    id?: string
    patientId: string
    doctorId: string
    startDate?: Date | string
    endDate?: Date | string | null
    active?: boolean
  }

  export type DoctorPatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    patient?: PatientUpdateOneRequiredWithoutDoctorsNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutPatientsNestedInput
  }

  export type DoctorPatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorPatientCreateManyInput = {
    id?: string
    patientId: string
    doctorId: string
    startDate?: Date | string
    endDate?: Date | string | null
    active?: boolean
  }

  export type DoctorPatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorPatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PharmacyCreateInput = {
    id?: string
    pharmacyName?: string | null
    pharmacyLicenseNumber?: string | null
    pharmacyAddress?: string | null
    contactName?: string | null
    openingHours?: string | null
    deliveryOptions?: string | null
    user: UserCreateNestedOneWithoutPharmacyInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPharmacyInput
    medicines?: MedicineCreateNestedManyWithoutPharmaciesInput
  }

  export type PharmacyUncheckedCreateInput = {
    id?: string
    userId: string
    pharmacyName?: string | null
    pharmacyLicenseNumber?: string | null
    pharmacyAddress?: string | null
    contactName?: string | null
    openingHours?: string | null
    deliveryOptions?: string | null
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPharmacyInput
    medicines?: MedicineUncheckedCreateNestedManyWithoutPharmaciesInput
  }

  export type PharmacyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPharmacyNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPharmacyNestedInput
    medicines?: MedicineUpdateManyWithoutPharmaciesNestedInput
  }

  export type PharmacyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPharmacyNestedInput
    medicines?: MedicineUncheckedUpdateManyWithoutPharmaciesNestedInput
  }

  export type PharmacyCreateManyInput = {
    id?: string
    userId: string
    pharmacyName?: string | null
    pharmacyLicenseNumber?: string | null
    pharmacyAddress?: string | null
    contactName?: string | null
    openingHours?: string | null
    deliveryOptions?: string | null
  }

  export type PharmacyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PharmacyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MedicineCreateInput = {
    id?: string
    name: string
    description?: string | null
    stock?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    prescriptions?: PrescriptionCreateNestedManyWithoutPrescription_medicinesInput
    pharmacies?: PharmacyCreateNestedManyWithoutMedicinesInput
  }

  export type MedicineUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    stock?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPrescription_medicinesInput
    pharmacies?: PharmacyUncheckedCreateNestedManyWithoutMedicinesInput
  }

  export type MedicineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prescriptions?: PrescriptionUpdateManyWithoutPrescription_medicinesNestedInput
    pharmacies?: PharmacyUpdateManyWithoutMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPrescription_medicinesNestedInput
    pharmacies?: PharmacyUncheckedUpdateManyWithoutMedicinesNestedInput
  }

  export type MedicineCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    stock?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutAdminInput
    reports?: ReportCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    userId: string
    reports?: ReportUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
    reports?: ReportUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reports?: ReportUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminCreateManyInput = {
    id?: string
    userId: string
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PrescriptionCreateInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patient: PatientCreateNestedOneWithoutPrescriptionsInput
    doctor: DoctorCreateNestedOneWithoutPrescriptionsInput
    pharmacy?: PharmacyCreateNestedOneWithoutPrescriptionsInput
    prescription_medicines?: MedicineCreateNestedOneWithoutPrescriptionsInput
  }

  export type PrescriptionUncheckedCreateInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patientId: string
    doctorId: string
    medicines_id?: string | null
    pharmacyId?: string | null
  }

  export type PrescriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patient?: PatientUpdateOneRequiredWithoutPrescriptionsNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutPrescriptionsNestedInput
    pharmacy?: PharmacyUpdateOneWithoutPrescriptionsNestedInput
    prescription_medicines?: MedicineUpdateOneWithoutPrescriptionsNestedInput
  }

  export type PrescriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    medicines_id?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PrescriptionCreateManyInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patientId: string
    doctorId: string
    medicines_id?: string | null
    pharmacyId?: string | null
  }

  export type PrescriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrescriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    medicines_id?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    title: string
    message: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    readBy?: NotificationReadCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    title: string
    message: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    readBy?: NotificationReadUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    readBy?: NotificationReadUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readBy?: NotificationReadUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: string
    title: string
    message: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationReadCreateInput = {
    id?: string
    readAt?: Date | string
    notification: NotificationCreateNestedOneWithoutReadByInput
    user: UserCreateNestedOneWithoutNotificationReadsInput
  }

  export type NotificationReadUncheckedCreateInput = {
    id?: string
    notificationId: string
    userId: string
    readAt?: Date | string
  }

  export type NotificationReadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notification?: NotificationUpdateOneRequiredWithoutReadByNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationReadsNestedInput
  }

  export type NotificationReadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationReadCreateManyInput = {
    id?: string
    notificationId: string
    userId: string
    readAt?: Date | string
  }

  export type NotificationReadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationReadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordCreateInput = {
    id?: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutMedicalRecordInput
    nurses?: NurseCreateNestedManyWithoutMedicalRecordsInput
    doctors?: DoctorCreateNestedManyWithoutMedicalRecordsInput
  }

  export type MedicalRecordUncheckedCreateInput = {
    id?: string
    patientId: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nurses?: NurseUncheckedCreateNestedManyWithoutMedicalRecordsInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutMedicalRecordsInput
  }

  export type MedicalRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutMedicalRecordNestedInput
    nurses?: NurseUpdateManyWithoutMedicalRecordsNestedInput
    doctors?: DoctorUpdateManyWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurses?: NurseUncheckedUpdateManyWithoutMedicalRecordsNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordCreateManyInput = {
    id?: string
    patientId: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateInput = {
    id?: string
    details: string
    dateGenerated?: Date | string
    admin: AdminCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateInput = {
    id?: string
    details: string
    dateGenerated?: Date | string
    adminId: string
  }

  export type ReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    dateGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    dateGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportCreateManyInput = {
    id?: string
    details: string
    dateGenerated?: Date | string
    adminId: string
  }

  export type ReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    dateGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    dateGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type NurseVisitCreateInput = {
    id?: string
    date?: Date | string
    notes?: string | null
    nurse: NurseCreateNestedOneWithoutNurseVisitsInput
    patient: PatientCreateNestedOneWithoutNurseVisitsInput
  }

  export type NurseVisitUncheckedCreateInput = {
    id?: string
    date?: Date | string
    notes?: string | null
    nurseId: string
    patientId: string
  }

  export type NurseVisitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    nurse?: NurseUpdateOneRequiredWithoutNurseVisitsNestedInput
    patient?: PatientUpdateOneRequiredWithoutNurseVisitsNestedInput
  }

  export type NurseVisitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type NurseVisitCreateManyInput = {
    id?: string
    date?: Date | string
    notes?: string | null
    nurseId: string
    patientId: string
  }

  export type NurseVisitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NurseVisitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatRoomCreateInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutChatRoomsInput
    doctor: DoctorCreateNestedOneWithoutChatRoomsInput
    messages?: MessageCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
    doctorId: string
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutChatRoomsNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutChatRoomsNestedInput
    messages?: MessageUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomCreateManyInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
    doctorId: string
  }

  export type ChatRoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatRoomPatientNurseCreateInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurse: NurseCreateNestedOneWithoutNurseChatsInput
    patient: PatientCreateNestedOneWithoutChatRoomPatientsInput
    messages?: MessageCreateNestedManyWithoutChatRoomPatientNurseInput
  }

  export type ChatRoomPatientNurseUncheckedCreateInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurseId: string
    patientId: string
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomPatientNurseInput
  }

  export type ChatRoomPatientNurseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurse?: NurseUpdateOneRequiredWithoutNurseChatsNestedInput
    patient?: PatientUpdateOneRequiredWithoutChatRoomPatientsNestedInput
    messages?: MessageUpdateManyWithoutChatRoomPatientNurseNestedInput
  }

  export type ChatRoomPatientNurseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurseId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutChatRoomPatientNurseNestedInput
  }

  export type ChatRoomPatientNurseCreateManyInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurseId: string
    patientId: string
  }

  export type ChatRoomPatientNurseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomPatientNurseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurseId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatRoomDoctorNursePatientCreateInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: DoctorCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    nurse?: NurseCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    patient?: PatientCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    messages?: MessageCreateNestedManyWithoutChatRoomDoctorNursePatientInput
  }

  export type ChatRoomDoctorNursePatientUncheckedCreateInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: string | null
    nurseId?: string | null
    patientId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomDoctorNursePatientInput
  }

  export type ChatRoomDoctorNursePatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    nurse?: NurseUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    patient?: PatientUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    messages?: MessageUpdateManyWithoutChatRoomDoctorNursePatientNestedInput
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutChatRoomDoctorNursePatientNestedInput
  }

  export type ChatRoomDoctorNursePatientCreateManyInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: string | null
    nurseId?: string | null
    patientId?: string | null
  }

  export type ChatRoomDoctorNursePatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoom?: ChatRoomCreateNestedOneWithoutMessagesInput
    chatRoomPatientNurse?: ChatRoomPatientNurseCreateNestedOneWithoutMessagesInput
    chatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoomId?: string | null
    chatRoomPatientNurseId?: string | null
    chatRoomDoctorNursePatientId?: string | null
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoom?: ChatRoomUpdateOneWithoutMessagesNestedInput
    chatRoomPatientNurse?: ChatRoomPatientNurseUpdateOneWithoutMessagesNestedInput
    chatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomPatientNurseId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomDoctorNursePatientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoomId?: string | null
    chatRoomPatientNurseId?: string | null
    chatRoomDoctorNursePatientId?: string | null
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomPatientNurseId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomDoctorNursePatientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    userId: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    userId: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: string
    entity: string
    entityId: string
    userId: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PatientNullableRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type NurseNullableRelationFilter = {
    is?: NurseWhereInput | null
    isNot?: NurseWhereInput | null
  }

  export type DoctorNullableRelationFilter = {
    is?: DoctorWhereInput | null
    isNot?: DoctorWhereInput | null
  }

  export type PharmacyNullableRelationFilter = {
    is?: PharmacyWhereInput | null
    isNot?: PharmacyWhereInput | null
  }

  export type AdminNullableRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type NotificationNullableRelationFilter = {
    is?: NotificationWhereInput | null
    isNot?: NotificationWhereInput | null
  }

  export type NotificationReadNullableRelationFilter = {
    is?: NotificationReadWhereInput | null
    isNot?: NotificationReadWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telephoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    profilePhoto?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    emailVerificationExpires?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telephoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    profilePhoto?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    emailVerificationExpires?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telephoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    profilePhoto?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    emailVerificationExpires?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MedicalRecordListRelationFilter = {
    every?: MedicalRecordWhereInput
    some?: MedicalRecordWhereInput
    none?: MedicalRecordWhereInput
  }

  export type PrescriptionListRelationFilter = {
    every?: PrescriptionWhereInput
    some?: PrescriptionWhereInput
    none?: PrescriptionWhereInput
  }

  export type NurseVisitListRelationFilter = {
    every?: NurseVisitWhereInput
    some?: NurseVisitWhereInput
    none?: NurseVisitWhereInput
  }

  export type DoctorPatientRequestListRelationFilter = {
    every?: DoctorPatientRequestWhereInput
    some?: DoctorPatientRequestWhereInput
    none?: DoctorPatientRequestWhereInput
  }

  export type DoctorPatientListRelationFilter = {
    every?: DoctorPatientWhereInput
    some?: DoctorPatientWhereInput
    none?: DoctorPatientWhereInput
  }

  export type NurseServiceRequestListRelationFilter = {
    every?: NurseServiceRequestWhereInput
    some?: NurseServiceRequestWhereInput
    none?: NurseServiceRequestWhereInput
  }

  export type ChatRoomListRelationFilter = {
    every?: ChatRoomWhereInput
    some?: ChatRoomWhereInput
    none?: ChatRoomWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type ChatRoomDoctorNursePatientListRelationFilter = {
    every?: ChatRoomDoctorNursePatientWhereInput
    some?: ChatRoomDoctorNursePatientWhereInput
    none?: ChatRoomDoctorNursePatientWhereInput
  }

  export type ChatRoomPatientNurseListRelationFilter = {
    every?: ChatRoomPatientNurseWhereInput
    some?: ChatRoomPatientNurseWhereInput
    none?: ChatRoomPatientNurseWhereInput
  }

  export type MedicalRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrescriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NurseVisitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorPatientRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorPatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NurseServiceRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatRoomDoctorNursePatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatRoomPatientNurseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    allergies?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactRelationship?: SortOrder
    insuranceInfo?: SortOrder
    preferredPharmacy?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    allergies?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactRelationship?: SortOrder
    insuranceInfo?: SortOrder
    preferredPharmacy?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    allergies?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactRelationship?: SortOrder
    insuranceInfo?: SortOrder
    preferredPharmacy?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DoctorListRelationFilter = {
    every?: DoctorWhereInput
    some?: DoctorWhereInput
    none?: DoctorWhereInput
  }

  export type DoctorNurseListRelationFilter = {
    every?: DoctorNurseWhereInput
    some?: DoctorNurseWhereInput
    none?: DoctorNurseWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type DoctorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorNurseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NurseCountOrderByAggregateInput = {
    id?: SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrder
    nursingCertification?: SortOrder
    hospitalAffiliation?: SortOrder
    yearsOfExperience?: SortOrder
    userId?: SortOrder
  }

  export type NurseAvgOrderByAggregateInput = {
    rating?: SortOrder
    yearsOfExperience?: SortOrder
  }

  export type NurseMaxOrderByAggregateInput = {
    id?: SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrder
    nursingCertification?: SortOrder
    hospitalAffiliation?: SortOrder
    yearsOfExperience?: SortOrder
    userId?: SortOrder
  }

  export type NurseMinOrderByAggregateInput = {
    id?: SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrder
    nursingCertification?: SortOrder
    hospitalAffiliation?: SortOrder
    yearsOfExperience?: SortOrder
    userId?: SortOrder
  }

  export type NurseSumOrderByAggregateInput = {
    rating?: SortOrder
    yearsOfExperience?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NurseListRelationFilter = {
    every?: NurseWhereInput
    some?: NurseWhereInput
    none?: NurseWhereInput
  }

  export type NurseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorCountOrderByAggregateInput = {
    id?: SortOrder
    specialization?: SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrder
    medicalDiploma?: SortOrder
    hospitalAffiliation?: SortOrder
    experience?: SortOrder
    userId?: SortOrder
    deletedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type DoctorAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    specialization?: SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrder
    medicalDiploma?: SortOrder
    hospitalAffiliation?: SortOrder
    experience?: SortOrder
    userId?: SortOrder
    deletedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    id?: SortOrder
    specialization?: SortOrder
    availability?: SortOrder
    rating?: SortOrder
    professionalLicenseNumber?: SortOrder
    medicalDiploma?: SortOrder
    hospitalAffiliation?: SortOrder
    experience?: SortOrder
    userId?: SortOrder
    deletedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type DoctorSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type DoctorRelationFilter = {
    is?: DoctorWhereInput
    isNot?: DoctorWhereInput
  }

  export type NurseRelationFilter = {
    is?: NurseWhereInput
    isNot?: NurseWhereInput
  }

  export type DoctorNurseDoctorIdNurseIdCompoundUniqueInput = {
    doctorId: string
    nurseId: string
  }

  export type DoctorNurseCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorNurseMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorNurseMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    details?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    details?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    details?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type TaskNullableRelationFilter = {
    is?: TaskWhereInput | null
    isNot?: TaskWhereInput | null
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
    taskId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    location?: SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
    taskId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    location?: SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
    taskId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    location?: SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumServiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceStatus | EnumServiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceStatus[] | ListEnumServiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceStatus[] | ListEnumServiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceStatusFilter<$PrismaModel> | $Enums.ServiceStatus
  }

  export type PatientRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type NurseServiceRequestCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    nurseId?: SortOrder
    status?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    preferredDate?: SortOrder
    urgency?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
  }

  export type NurseServiceRequestAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type NurseServiceRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    nurseId?: SortOrder
    status?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    preferredDate?: SortOrder
    urgency?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
  }

  export type NurseServiceRequestMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    nurseId?: SortOrder
    status?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    preferredDate?: SortOrder
    urgency?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
  }

  export type NurseServiceRequestSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EnumServiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceStatus | EnumServiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceStatus[] | ListEnumServiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceStatus[] | ListEnumServiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.ServiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceStatusFilter<$PrismaModel>
    _max?: NestedEnumServiceStatusFilter<$PrismaModel>
  }

  export type EnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type DoctorPatientRequestPatientIdDoctorIdCompoundUniqueInput = {
    patientId: string
    doctorId: string
  }

  export type DoctorPatientRequestCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    message?: SortOrder
  }

  export type DoctorPatientRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    message?: SortOrder
  }

  export type DoctorPatientRequestMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    message?: SortOrder
  }

  export type EnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type DoctorPatientPatientIdDoctorIdCompoundUniqueInput = {
    patientId: string
    doctorId: string
  }

  export type DoctorPatientCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    active?: SortOrder
  }

  export type DoctorPatientMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    active?: SortOrder
  }

  export type DoctorPatientMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    active?: SortOrder
  }

  export type MedicineListRelationFilter = {
    every?: MedicineWhereInput
    some?: MedicineWhereInput
    none?: MedicineWhereInput
  }

  export type MedicineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PharmacyCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pharmacyName?: SortOrder
    pharmacyLicenseNumber?: SortOrder
    pharmacyAddress?: SortOrder
    contactName?: SortOrder
    openingHours?: SortOrder
    deliveryOptions?: SortOrder
  }

  export type PharmacyMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pharmacyName?: SortOrder
    pharmacyLicenseNumber?: SortOrder
    pharmacyAddress?: SortOrder
    contactName?: SortOrder
    openingHours?: SortOrder
    deliveryOptions?: SortOrder
  }

  export type PharmacyMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pharmacyName?: SortOrder
    pharmacyLicenseNumber?: SortOrder
    pharmacyAddress?: SortOrder
    contactName?: SortOrder
    openingHours?: SortOrder
    deliveryOptions?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PharmacyListRelationFilter = {
    every?: PharmacyWhereInput
    some?: PharmacyWhereInput
    none?: PharmacyWhereInput
  }

  export type PharmacyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicineAvgOrderByAggregateInput = {
    stock?: SortOrder
    price?: SortOrder
  }

  export type MedicineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicineSumOrderByAggregateInput = {
    stock?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type MedicineNullableRelationFilter = {
    is?: MedicineWhereInput | null
    isNot?: MedicineWhereInput | null
  }

  export type PrescriptionCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    details?: SortOrder
    approved?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    medicines_id?: SortOrder
    pharmacyId?: SortOrder
  }

  export type PrescriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    details?: SortOrder
    approved?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    medicines_id?: SortOrder
    pharmacyId?: SortOrder
  }

  export type PrescriptionMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    details?: SortOrder
    approved?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    medicines_id?: SortOrder
    pharmacyId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NotificationReadListRelationFilter = {
    every?: NotificationReadWhereInput
    some?: NotificationReadWhereInput
    none?: NotificationReadWhereInput
  }

  export type NotificationReadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type NotificationRelationFilter = {
    is?: NotificationWhereInput
    isNot?: NotificationWhereInput
  }

  export type NotificationReadNotificationIdUserIdCompoundUniqueInput = {
    notificationId: string
    userId: string
  }

  export type NotificationReadCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type NotificationReadMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type NotificationReadMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type MedicalRecordCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    diagnosis?: SortOrder
    treatment?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    diagnosis?: SortOrder
    treatment?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalRecordMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    diagnosis?: SortOrder
    treatment?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    details?: SortOrder
    dateGenerated?: SortOrder
    adminId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    details?: SortOrder
    dateGenerated?: SortOrder
    adminId?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    details?: SortOrder
    dateGenerated?: SortOrder
    adminId?: SortOrder
  }

  export type NurseVisitCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
  }

  export type NurseVisitMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
  }

  export type NurseVisitMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatRoomPatientIdDoctorIdCompoundUniqueInput = {
    patientId: string
    doctorId: string
  }

  export type ChatRoomCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
  }

  export type ChatRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
  }

  export type ChatRoomMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
  }

  export type ChatRoomPatientNursePatientIdNurseIdCompoundUniqueInput = {
    patientId: string
    nurseId: string
  }

  export type ChatRoomPatientNurseCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
  }

  export type ChatRoomPatientNurseMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
  }

  export type ChatRoomPatientNurseMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
  }

  export type ChatRoomDoctorNursePatientDoctorIdNurseIdPatientIdCompoundUniqueInput = {
    doctorId: string
    nurseId: string
    patientId: string
  }

  export type ChatRoomDoctorNursePatientCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
  }

  export type ChatRoomDoctorNursePatientMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
  }

  export type ChatRoomDoctorNursePatientMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrder
    nurseId?: SortOrder
    patientId?: SortOrder
  }

  export type ChatRoomNullableRelationFilter = {
    is?: ChatRoomWhereInput | null
    isNot?: ChatRoomWhereInput | null
  }

  export type ChatRoomPatientNurseNullableRelationFilter = {
    is?: ChatRoomPatientNurseWhereInput | null
    isNot?: ChatRoomPatientNurseWhereInput | null
  }

  export type ChatRoomDoctorNursePatientNullableRelationFilter = {
    is?: ChatRoomDoctorNursePatientWhereInput | null
    isNot?: ChatRoomDoctorNursePatientWhereInput | null
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    senderRole?: SortOrder
    chatRoomId?: SortOrder
    chatRoomPatientNurseId?: SortOrder
    chatRoomDoctorNursePatientId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    senderRole?: SortOrder
    chatRoomId?: SortOrder
    chatRoomPatientNurseId?: SortOrder
    chatRoomDoctorNursePatientId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    senderRole?: SortOrder
    chatRoomId?: SortOrder
    chatRoomPatientNurseId?: SortOrder
    chatRoomDoctorNursePatientId?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type PatientCreateNestedOneWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    connect?: PatientWhereUniqueInput
  }

  export type NurseCreateNestedOneWithoutUserInput = {
    create?: XOR<NurseCreateWithoutUserInput, NurseUncheckedCreateWithoutUserInput>
    connectOrCreate?: NurseCreateOrConnectWithoutUserInput
    connect?: NurseWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutUserInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    connect?: DoctorWhereUniqueInput
  }

  export type PharmacyCreateNestedOneWithoutUserInput = {
    create?: XOR<PharmacyCreateWithoutUserInput, PharmacyUncheckedCreateWithoutUserInput>
    connectOrCreate?: PharmacyCreateOrConnectWithoutUserInput
    connect?: PharmacyWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type NotificationCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput
    connect?: NotificationWhereUniqueInput
  }

  export type NotificationReadCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationReadCreateWithoutUserInput, NotificationReadUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationReadCreateOrConnectWithoutUserInput
    connect?: NotificationReadWhereUniqueInput
  }

  export type PatientUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    connect?: PatientWhereUniqueInput
  }

  export type NurseUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<NurseCreateWithoutUserInput, NurseUncheckedCreateWithoutUserInput>
    connectOrCreate?: NurseCreateOrConnectWithoutUserInput
    connect?: NurseWhereUniqueInput
  }

  export type DoctorUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    connect?: DoctorWhereUniqueInput
  }

  export type PharmacyUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PharmacyCreateWithoutUserInput, PharmacyUncheckedCreateWithoutUserInput>
    connectOrCreate?: PharmacyCreateOrConnectWithoutUserInput
    connect?: PharmacyWhereUniqueInput
  }

  export type AdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type NotificationUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput
    connect?: NotificationWhereUniqueInput
  }

  export type NotificationReadUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationReadCreateWithoutUserInput, NotificationReadUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationReadCreateOrConnectWithoutUserInput
    connect?: NotificationReadWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PatientUpdateOneWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    upsert?: PatientUpsertWithoutUserInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutUserInput, PatientUpdateWithoutUserInput>, PatientUncheckedUpdateWithoutUserInput>
  }

  export type NurseUpdateOneWithoutUserNestedInput = {
    create?: XOR<NurseCreateWithoutUserInput, NurseUncheckedCreateWithoutUserInput>
    connectOrCreate?: NurseCreateOrConnectWithoutUserInput
    upsert?: NurseUpsertWithoutUserInput
    disconnect?: NurseWhereInput | boolean
    delete?: NurseWhereInput | boolean
    connect?: NurseWhereUniqueInput
    update?: XOR<XOR<NurseUpdateToOneWithWhereWithoutUserInput, NurseUpdateWithoutUserInput>, NurseUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUpdateOneWithoutUserNestedInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    upsert?: DoctorUpsertWithoutUserInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutUserInput, DoctorUpdateWithoutUserInput>, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type PharmacyUpdateOneWithoutUserNestedInput = {
    create?: XOR<PharmacyCreateWithoutUserInput, PharmacyUncheckedCreateWithoutUserInput>
    connectOrCreate?: PharmacyCreateOrConnectWithoutUserInput
    upsert?: PharmacyUpsertWithoutUserInput
    disconnect?: PharmacyWhereInput | boolean
    delete?: PharmacyWhereInput | boolean
    connect?: PharmacyWhereUniqueInput
    update?: XOR<XOR<PharmacyUpdateToOneWithWhereWithoutUserInput, PharmacyUpdateWithoutUserInput>, PharmacyUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput
    upsert?: NotificationUpsertWithoutUserInput
    disconnect?: NotificationWhereInput | boolean
    delete?: NotificationWhereInput | boolean
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutUserInput, NotificationUpdateWithoutUserInput>, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationReadUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationReadCreateWithoutUserInput, NotificationReadUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationReadCreateOrConnectWithoutUserInput
    upsert?: NotificationReadUpsertWithoutUserInput
    disconnect?: NotificationReadWhereInput | boolean
    delete?: NotificationReadWhereInput | boolean
    connect?: NotificationReadWhereUniqueInput
    update?: XOR<XOR<NotificationReadUpdateToOneWithWhereWithoutUserInput, NotificationReadUpdateWithoutUserInput>, NotificationReadUncheckedUpdateWithoutUserInput>
  }

  export type PatientUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    upsert?: PatientUpsertWithoutUserInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutUserInput, PatientUpdateWithoutUserInput>, PatientUncheckedUpdateWithoutUserInput>
  }

  export type NurseUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<NurseCreateWithoutUserInput, NurseUncheckedCreateWithoutUserInput>
    connectOrCreate?: NurseCreateOrConnectWithoutUserInput
    upsert?: NurseUpsertWithoutUserInput
    disconnect?: NurseWhereInput | boolean
    delete?: NurseWhereInput | boolean
    connect?: NurseWhereUniqueInput
    update?: XOR<XOR<NurseUpdateToOneWithWhereWithoutUserInput, NurseUpdateWithoutUserInput>, NurseUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    upsert?: DoctorUpsertWithoutUserInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutUserInput, DoctorUpdateWithoutUserInput>, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type PharmacyUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PharmacyCreateWithoutUserInput, PharmacyUncheckedCreateWithoutUserInput>
    connectOrCreate?: PharmacyCreateOrConnectWithoutUserInput
    upsert?: PharmacyUpsertWithoutUserInput
    disconnect?: PharmacyWhereInput | boolean
    delete?: PharmacyWhereInput | boolean
    connect?: PharmacyWhereUniqueInput
    update?: XOR<XOR<PharmacyUpdateToOneWithWhereWithoutUserInput, PharmacyUpdateWithoutUserInput>, PharmacyUncheckedUpdateWithoutUserInput>
  }

  export type AdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput
    upsert?: NotificationUpsertWithoutUserInput
    disconnect?: NotificationWhereInput | boolean
    delete?: NotificationWhereInput | boolean
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutUserInput, NotificationUpdateWithoutUserInput>, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationReadUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationReadCreateWithoutUserInput, NotificationReadUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationReadCreateOrConnectWithoutUserInput
    upsert?: NotificationReadUpsertWithoutUserInput
    disconnect?: NotificationReadWhereInput | boolean
    delete?: NotificationReadWhereInput | boolean
    connect?: NotificationReadWhereUniqueInput
    update?: XOR<XOR<NotificationReadUpdateToOneWithWhereWithoutUserInput, NotificationReadUpdateWithoutUserInput>, NotificationReadUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutPatientInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    connect?: UserWhereUniqueInput
  }

  export type MedicalRecordCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type PrescriptionCreateNestedManyWithoutPatientInput = {
    create?: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput> | PrescriptionCreateWithoutPatientInput[] | PrescriptionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPatientInput | PrescriptionCreateOrConnectWithoutPatientInput[]
    createMany?: PrescriptionCreateManyPatientInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type NurseVisitCreateNestedManyWithoutPatientInput = {
    create?: XOR<NurseVisitCreateWithoutPatientInput, NurseVisitUncheckedCreateWithoutPatientInput> | NurseVisitCreateWithoutPatientInput[] | NurseVisitUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NurseVisitCreateOrConnectWithoutPatientInput | NurseVisitCreateOrConnectWithoutPatientInput[]
    createMany?: NurseVisitCreateManyPatientInputEnvelope
    connect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
  }

  export type DoctorPatientRequestCreateNestedManyWithoutPatientInput = {
    create?: XOR<DoctorPatientRequestCreateWithoutPatientInput, DoctorPatientRequestUncheckedCreateWithoutPatientInput> | DoctorPatientRequestCreateWithoutPatientInput[] | DoctorPatientRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DoctorPatientRequestCreateOrConnectWithoutPatientInput | DoctorPatientRequestCreateOrConnectWithoutPatientInput[]
    createMany?: DoctorPatientRequestCreateManyPatientInputEnvelope
    connect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
  }

  export type DoctorPatientCreateNestedManyWithoutPatientInput = {
    create?: XOR<DoctorPatientCreateWithoutPatientInput, DoctorPatientUncheckedCreateWithoutPatientInput> | DoctorPatientCreateWithoutPatientInput[] | DoctorPatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DoctorPatientCreateOrConnectWithoutPatientInput | DoctorPatientCreateOrConnectWithoutPatientInput[]
    createMany?: DoctorPatientCreateManyPatientInputEnvelope
    connect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
  }

  export type NurseServiceRequestCreateNestedManyWithoutPatientInput = {
    create?: XOR<NurseServiceRequestCreateWithoutPatientInput, NurseServiceRequestUncheckedCreateWithoutPatientInput> | NurseServiceRequestCreateWithoutPatientInput[] | NurseServiceRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NurseServiceRequestCreateOrConnectWithoutPatientInput | NurseServiceRequestCreateOrConnectWithoutPatientInput[]
    createMany?: NurseServiceRequestCreateManyPatientInputEnvelope
    connect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
  }

  export type ChatRoomCreateNestedManyWithoutPatientInput = {
    create?: XOR<ChatRoomCreateWithoutPatientInput, ChatRoomUncheckedCreateWithoutPatientInput> | ChatRoomCreateWithoutPatientInput[] | ChatRoomUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutPatientInput | ChatRoomCreateOrConnectWithoutPatientInput[]
    createMany?: ChatRoomCreateManyPatientInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutPatientInput = {
    create?: XOR<ScheduleCreateWithoutPatientInput, ScheduleUncheckedCreateWithoutPatientInput> | ScheduleCreateWithoutPatientInput[] | ScheduleUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutPatientInput | ScheduleCreateOrConnectWithoutPatientInput[]
    createMany?: ScheduleCreateManyPatientInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutPatientInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput> | ChatRoomDoctorNursePatientCreateWithoutPatientInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutPatientInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutPatientInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyPatientInputEnvelope
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
  }

  export type ChatRoomPatientNurseCreateNestedManyWithoutPatientInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutPatientInput, ChatRoomPatientNurseUncheckedCreateWithoutPatientInput> | ChatRoomPatientNurseCreateWithoutPatientInput[] | ChatRoomPatientNurseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutPatientInput | ChatRoomPatientNurseCreateOrConnectWithoutPatientInput[]
    createMany?: ChatRoomPatientNurseCreateManyPatientInputEnvelope
    connect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type PrescriptionUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput> | PrescriptionCreateWithoutPatientInput[] | PrescriptionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPatientInput | PrescriptionCreateOrConnectWithoutPatientInput[]
    createMany?: PrescriptionCreateManyPatientInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type NurseVisitUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<NurseVisitCreateWithoutPatientInput, NurseVisitUncheckedCreateWithoutPatientInput> | NurseVisitCreateWithoutPatientInput[] | NurseVisitUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NurseVisitCreateOrConnectWithoutPatientInput | NurseVisitCreateOrConnectWithoutPatientInput[]
    createMany?: NurseVisitCreateManyPatientInputEnvelope
    connect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
  }

  export type DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<DoctorPatientRequestCreateWithoutPatientInput, DoctorPatientRequestUncheckedCreateWithoutPatientInput> | DoctorPatientRequestCreateWithoutPatientInput[] | DoctorPatientRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DoctorPatientRequestCreateOrConnectWithoutPatientInput | DoctorPatientRequestCreateOrConnectWithoutPatientInput[]
    createMany?: DoctorPatientRequestCreateManyPatientInputEnvelope
    connect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
  }

  export type DoctorPatientUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<DoctorPatientCreateWithoutPatientInput, DoctorPatientUncheckedCreateWithoutPatientInput> | DoctorPatientCreateWithoutPatientInput[] | DoctorPatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DoctorPatientCreateOrConnectWithoutPatientInput | DoctorPatientCreateOrConnectWithoutPatientInput[]
    createMany?: DoctorPatientCreateManyPatientInputEnvelope
    connect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
  }

  export type NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<NurseServiceRequestCreateWithoutPatientInput, NurseServiceRequestUncheckedCreateWithoutPatientInput> | NurseServiceRequestCreateWithoutPatientInput[] | NurseServiceRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NurseServiceRequestCreateOrConnectWithoutPatientInput | NurseServiceRequestCreateOrConnectWithoutPatientInput[]
    createMany?: NurseServiceRequestCreateManyPatientInputEnvelope
    connect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
  }

  export type ChatRoomUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ChatRoomCreateWithoutPatientInput, ChatRoomUncheckedCreateWithoutPatientInput> | ChatRoomCreateWithoutPatientInput[] | ChatRoomUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutPatientInput | ChatRoomCreateOrConnectWithoutPatientInput[]
    createMany?: ChatRoomCreateManyPatientInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ScheduleCreateWithoutPatientInput, ScheduleUncheckedCreateWithoutPatientInput> | ScheduleCreateWithoutPatientInput[] | ScheduleUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutPatientInput | ScheduleCreateOrConnectWithoutPatientInput[]
    createMany?: ScheduleCreateManyPatientInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutPatientInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput> | ChatRoomDoctorNursePatientCreateWithoutPatientInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutPatientInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutPatientInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyPatientInputEnvelope
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
  }

  export type ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutPatientInput, ChatRoomPatientNurseUncheckedCreateWithoutPatientInput> | ChatRoomPatientNurseCreateWithoutPatientInput[] | ChatRoomPatientNurseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutPatientInput | ChatRoomPatientNurseCreateOrConnectWithoutPatientInput[]
    createMany?: ChatRoomPatientNurseCreateManyPatientInputEnvelope
    connect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPatientNestedInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    upsert?: UserUpsertWithoutPatientInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientInput, UserUpdateWithoutPatientInput>, UserUncheckedUpdateWithoutPatientInput>
  }

  export type MedicalRecordUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutPatientInput | MedicalRecordUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutPatientInput | MedicalRecordUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutPatientInput | MedicalRecordUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type PrescriptionUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput> | PrescriptionCreateWithoutPatientInput[] | PrescriptionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPatientInput | PrescriptionCreateOrConnectWithoutPatientInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutPatientInput | PrescriptionUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PrescriptionCreateManyPatientInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutPatientInput | PrescriptionUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutPatientInput | PrescriptionUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type NurseVisitUpdateManyWithoutPatientNestedInput = {
    create?: XOR<NurseVisitCreateWithoutPatientInput, NurseVisitUncheckedCreateWithoutPatientInput> | NurseVisitCreateWithoutPatientInput[] | NurseVisitUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NurseVisitCreateOrConnectWithoutPatientInput | NurseVisitCreateOrConnectWithoutPatientInput[]
    upsert?: NurseVisitUpsertWithWhereUniqueWithoutPatientInput | NurseVisitUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: NurseVisitCreateManyPatientInputEnvelope
    set?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    disconnect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    delete?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    connect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    update?: NurseVisitUpdateWithWhereUniqueWithoutPatientInput | NurseVisitUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: NurseVisitUpdateManyWithWhereWithoutPatientInput | NurseVisitUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: NurseVisitScalarWhereInput | NurseVisitScalarWhereInput[]
  }

  export type DoctorPatientRequestUpdateManyWithoutPatientNestedInput = {
    create?: XOR<DoctorPatientRequestCreateWithoutPatientInput, DoctorPatientRequestUncheckedCreateWithoutPatientInput> | DoctorPatientRequestCreateWithoutPatientInput[] | DoctorPatientRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DoctorPatientRequestCreateOrConnectWithoutPatientInput | DoctorPatientRequestCreateOrConnectWithoutPatientInput[]
    upsert?: DoctorPatientRequestUpsertWithWhereUniqueWithoutPatientInput | DoctorPatientRequestUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: DoctorPatientRequestCreateManyPatientInputEnvelope
    set?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    disconnect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    delete?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    connect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    update?: DoctorPatientRequestUpdateWithWhereUniqueWithoutPatientInput | DoctorPatientRequestUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: DoctorPatientRequestUpdateManyWithWhereWithoutPatientInput | DoctorPatientRequestUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: DoctorPatientRequestScalarWhereInput | DoctorPatientRequestScalarWhereInput[]
  }

  export type DoctorPatientUpdateManyWithoutPatientNestedInput = {
    create?: XOR<DoctorPatientCreateWithoutPatientInput, DoctorPatientUncheckedCreateWithoutPatientInput> | DoctorPatientCreateWithoutPatientInput[] | DoctorPatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DoctorPatientCreateOrConnectWithoutPatientInput | DoctorPatientCreateOrConnectWithoutPatientInput[]
    upsert?: DoctorPatientUpsertWithWhereUniqueWithoutPatientInput | DoctorPatientUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: DoctorPatientCreateManyPatientInputEnvelope
    set?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    disconnect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    delete?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    connect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    update?: DoctorPatientUpdateWithWhereUniqueWithoutPatientInput | DoctorPatientUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: DoctorPatientUpdateManyWithWhereWithoutPatientInput | DoctorPatientUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: DoctorPatientScalarWhereInput | DoctorPatientScalarWhereInput[]
  }

  export type NurseServiceRequestUpdateManyWithoutPatientNestedInput = {
    create?: XOR<NurseServiceRequestCreateWithoutPatientInput, NurseServiceRequestUncheckedCreateWithoutPatientInput> | NurseServiceRequestCreateWithoutPatientInput[] | NurseServiceRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NurseServiceRequestCreateOrConnectWithoutPatientInput | NurseServiceRequestCreateOrConnectWithoutPatientInput[]
    upsert?: NurseServiceRequestUpsertWithWhereUniqueWithoutPatientInput | NurseServiceRequestUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: NurseServiceRequestCreateManyPatientInputEnvelope
    set?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    disconnect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    delete?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    connect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    update?: NurseServiceRequestUpdateWithWhereUniqueWithoutPatientInput | NurseServiceRequestUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: NurseServiceRequestUpdateManyWithWhereWithoutPatientInput | NurseServiceRequestUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: NurseServiceRequestScalarWhereInput | NurseServiceRequestScalarWhereInput[]
  }

  export type ChatRoomUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ChatRoomCreateWithoutPatientInput, ChatRoomUncheckedCreateWithoutPatientInput> | ChatRoomCreateWithoutPatientInput[] | ChatRoomUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutPatientInput | ChatRoomCreateOrConnectWithoutPatientInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutPatientInput | ChatRoomUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ChatRoomCreateManyPatientInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutPatientInput | ChatRoomUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutPatientInput | ChatRoomUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ScheduleCreateWithoutPatientInput, ScheduleUncheckedCreateWithoutPatientInput> | ScheduleCreateWithoutPatientInput[] | ScheduleUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutPatientInput | ScheduleCreateOrConnectWithoutPatientInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutPatientInput | ScheduleUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ScheduleCreateManyPatientInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutPatientInput | ScheduleUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutPatientInput | ScheduleUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutPatientInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput> | ChatRoomDoctorNursePatientCreateWithoutPatientInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutPatientInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutPatientInput[]
    upsert?: ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutPatientInput | ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyPatientInputEnvelope
    set?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    disconnect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    delete?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    update?: ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutPatientInput | ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutPatientInput | ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ChatRoomDoctorNursePatientScalarWhereInput | ChatRoomDoctorNursePatientScalarWhereInput[]
  }

  export type ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutPatientInput, ChatRoomPatientNurseUncheckedCreateWithoutPatientInput> | ChatRoomPatientNurseCreateWithoutPatientInput[] | ChatRoomPatientNurseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutPatientInput | ChatRoomPatientNurseCreateOrConnectWithoutPatientInput[]
    upsert?: ChatRoomPatientNurseUpsertWithWhereUniqueWithoutPatientInput | ChatRoomPatientNurseUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ChatRoomPatientNurseCreateManyPatientInputEnvelope
    set?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    disconnect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    delete?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    connect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    update?: ChatRoomPatientNurseUpdateWithWhereUniqueWithoutPatientInput | ChatRoomPatientNurseUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ChatRoomPatientNurseUpdateManyWithWhereWithoutPatientInput | ChatRoomPatientNurseUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ChatRoomPatientNurseScalarWhereInput | ChatRoomPatientNurseScalarWhereInput[]
  }

  export type MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutPatientInput | MedicalRecordUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutPatientInput | MedicalRecordUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutPatientInput | MedicalRecordUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type PrescriptionUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput> | PrescriptionCreateWithoutPatientInput[] | PrescriptionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPatientInput | PrescriptionCreateOrConnectWithoutPatientInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutPatientInput | PrescriptionUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PrescriptionCreateManyPatientInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutPatientInput | PrescriptionUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutPatientInput | PrescriptionUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type NurseVisitUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<NurseVisitCreateWithoutPatientInput, NurseVisitUncheckedCreateWithoutPatientInput> | NurseVisitCreateWithoutPatientInput[] | NurseVisitUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NurseVisitCreateOrConnectWithoutPatientInput | NurseVisitCreateOrConnectWithoutPatientInput[]
    upsert?: NurseVisitUpsertWithWhereUniqueWithoutPatientInput | NurseVisitUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: NurseVisitCreateManyPatientInputEnvelope
    set?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    disconnect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    delete?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    connect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    update?: NurseVisitUpdateWithWhereUniqueWithoutPatientInput | NurseVisitUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: NurseVisitUpdateManyWithWhereWithoutPatientInput | NurseVisitUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: NurseVisitScalarWhereInput | NurseVisitScalarWhereInput[]
  }

  export type DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<DoctorPatientRequestCreateWithoutPatientInput, DoctorPatientRequestUncheckedCreateWithoutPatientInput> | DoctorPatientRequestCreateWithoutPatientInput[] | DoctorPatientRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DoctorPatientRequestCreateOrConnectWithoutPatientInput | DoctorPatientRequestCreateOrConnectWithoutPatientInput[]
    upsert?: DoctorPatientRequestUpsertWithWhereUniqueWithoutPatientInput | DoctorPatientRequestUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: DoctorPatientRequestCreateManyPatientInputEnvelope
    set?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    disconnect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    delete?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    connect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    update?: DoctorPatientRequestUpdateWithWhereUniqueWithoutPatientInput | DoctorPatientRequestUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: DoctorPatientRequestUpdateManyWithWhereWithoutPatientInput | DoctorPatientRequestUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: DoctorPatientRequestScalarWhereInput | DoctorPatientRequestScalarWhereInput[]
  }

  export type DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<DoctorPatientCreateWithoutPatientInput, DoctorPatientUncheckedCreateWithoutPatientInput> | DoctorPatientCreateWithoutPatientInput[] | DoctorPatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: DoctorPatientCreateOrConnectWithoutPatientInput | DoctorPatientCreateOrConnectWithoutPatientInput[]
    upsert?: DoctorPatientUpsertWithWhereUniqueWithoutPatientInput | DoctorPatientUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: DoctorPatientCreateManyPatientInputEnvelope
    set?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    disconnect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    delete?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    connect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    update?: DoctorPatientUpdateWithWhereUniqueWithoutPatientInput | DoctorPatientUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: DoctorPatientUpdateManyWithWhereWithoutPatientInput | DoctorPatientUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: DoctorPatientScalarWhereInput | DoctorPatientScalarWhereInput[]
  }

  export type NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<NurseServiceRequestCreateWithoutPatientInput, NurseServiceRequestUncheckedCreateWithoutPatientInput> | NurseServiceRequestCreateWithoutPatientInput[] | NurseServiceRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NurseServiceRequestCreateOrConnectWithoutPatientInput | NurseServiceRequestCreateOrConnectWithoutPatientInput[]
    upsert?: NurseServiceRequestUpsertWithWhereUniqueWithoutPatientInput | NurseServiceRequestUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: NurseServiceRequestCreateManyPatientInputEnvelope
    set?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    disconnect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    delete?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    connect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    update?: NurseServiceRequestUpdateWithWhereUniqueWithoutPatientInput | NurseServiceRequestUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: NurseServiceRequestUpdateManyWithWhereWithoutPatientInput | NurseServiceRequestUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: NurseServiceRequestScalarWhereInput | NurseServiceRequestScalarWhereInput[]
  }

  export type ChatRoomUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ChatRoomCreateWithoutPatientInput, ChatRoomUncheckedCreateWithoutPatientInput> | ChatRoomCreateWithoutPatientInput[] | ChatRoomUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutPatientInput | ChatRoomCreateOrConnectWithoutPatientInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutPatientInput | ChatRoomUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ChatRoomCreateManyPatientInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutPatientInput | ChatRoomUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutPatientInput | ChatRoomUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ScheduleCreateWithoutPatientInput, ScheduleUncheckedCreateWithoutPatientInput> | ScheduleCreateWithoutPatientInput[] | ScheduleUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutPatientInput | ScheduleCreateOrConnectWithoutPatientInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutPatientInput | ScheduleUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ScheduleCreateManyPatientInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutPatientInput | ScheduleUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutPatientInput | ScheduleUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutPatientInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput> | ChatRoomDoctorNursePatientCreateWithoutPatientInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutPatientInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutPatientInput[]
    upsert?: ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutPatientInput | ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyPatientInputEnvelope
    set?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    disconnect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    delete?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    update?: ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutPatientInput | ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutPatientInput | ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ChatRoomDoctorNursePatientScalarWhereInput | ChatRoomDoctorNursePatientScalarWhereInput[]
  }

  export type ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutPatientInput, ChatRoomPatientNurseUncheckedCreateWithoutPatientInput> | ChatRoomPatientNurseCreateWithoutPatientInput[] | ChatRoomPatientNurseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutPatientInput | ChatRoomPatientNurseCreateOrConnectWithoutPatientInput[]
    upsert?: ChatRoomPatientNurseUpsertWithWhereUniqueWithoutPatientInput | ChatRoomPatientNurseUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ChatRoomPatientNurseCreateManyPatientInputEnvelope
    set?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    disconnect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    delete?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    connect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    update?: ChatRoomPatientNurseUpdateWithWhereUniqueWithoutPatientInput | ChatRoomPatientNurseUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ChatRoomPatientNurseUpdateManyWithWhereWithoutPatientInput | ChatRoomPatientNurseUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ChatRoomPatientNurseScalarWhereInput | ChatRoomPatientNurseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNurseInput = {
    create?: XOR<UserCreateWithoutNurseInput, UserUncheckedCreateWithoutNurseInput>
    connectOrCreate?: UserCreateOrConnectWithoutNurseInput
    connect?: UserWhereUniqueInput
  }

  export type NurseVisitCreateNestedManyWithoutNurseInput = {
    create?: XOR<NurseVisitCreateWithoutNurseInput, NurseVisitUncheckedCreateWithoutNurseInput> | NurseVisitCreateWithoutNurseInput[] | NurseVisitUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: NurseVisitCreateOrConnectWithoutNurseInput | NurseVisitCreateOrConnectWithoutNurseInput[]
    createMany?: NurseVisitCreateManyNurseInputEnvelope
    connect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
  }

  export type MedicalRecordCreateNestedManyWithoutNursesInput = {
    create?: XOR<MedicalRecordCreateWithoutNursesInput, MedicalRecordUncheckedCreateWithoutNursesInput> | MedicalRecordCreateWithoutNursesInput[] | MedicalRecordUncheckedCreateWithoutNursesInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutNursesInput | MedicalRecordCreateOrConnectWithoutNursesInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type NurseServiceRequestCreateNestedManyWithoutNurseInput = {
    create?: XOR<NurseServiceRequestCreateWithoutNurseInput, NurseServiceRequestUncheckedCreateWithoutNurseInput> | NurseServiceRequestCreateWithoutNurseInput[] | NurseServiceRequestUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: NurseServiceRequestCreateOrConnectWithoutNurseInput | NurseServiceRequestCreateOrConnectWithoutNurseInput[]
    createMany?: NurseServiceRequestCreateManyNurseInputEnvelope
    connect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
  }

  export type ChatRoomPatientNurseCreateNestedManyWithoutNurseInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutNurseInput, ChatRoomPatientNurseUncheckedCreateWithoutNurseInput> | ChatRoomPatientNurseCreateWithoutNurseInput[] | ChatRoomPatientNurseUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutNurseInput | ChatRoomPatientNurseCreateOrConnectWithoutNurseInput[]
    createMany?: ChatRoomPatientNurseCreateManyNurseInputEnvelope
    connect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
  }

  export type ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutNurseInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput> | ChatRoomDoctorNursePatientCreateWithoutNurseInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutNurseInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutNurseInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyNurseInputEnvelope
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
  }

  export type DoctorCreateNestedManyWithoutNursesInput = {
    create?: XOR<DoctorCreateWithoutNursesInput, DoctorUncheckedCreateWithoutNursesInput> | DoctorCreateWithoutNursesInput[] | DoctorUncheckedCreateWithoutNursesInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutNursesInput | DoctorCreateOrConnectWithoutNursesInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type DoctorNurseCreateNestedManyWithoutNurseInput = {
    create?: XOR<DoctorNurseCreateWithoutNurseInput, DoctorNurseUncheckedCreateWithoutNurseInput> | DoctorNurseCreateWithoutNurseInput[] | DoctorNurseUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: DoctorNurseCreateOrConnectWithoutNurseInput | DoctorNurseCreateOrConnectWithoutNurseInput[]
    createMany?: DoctorNurseCreateManyNurseInputEnvelope
    connect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutNurseInput = {
    create?: XOR<ScheduleCreateWithoutNurseInput, ScheduleUncheckedCreateWithoutNurseInput> | ScheduleCreateWithoutNurseInput[] | ScheduleUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutNurseInput | ScheduleCreateOrConnectWithoutNurseInput[]
    createMany?: ScheduleCreateManyNurseInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutNurseInput = {
    create?: XOR<TaskCreateWithoutNurseInput, TaskUncheckedCreateWithoutNurseInput> | TaskCreateWithoutNurseInput[] | TaskUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutNurseInput | TaskCreateOrConnectWithoutNurseInput[]
    createMany?: TaskCreateManyNurseInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type NurseVisitUncheckedCreateNestedManyWithoutNurseInput = {
    create?: XOR<NurseVisitCreateWithoutNurseInput, NurseVisitUncheckedCreateWithoutNurseInput> | NurseVisitCreateWithoutNurseInput[] | NurseVisitUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: NurseVisitCreateOrConnectWithoutNurseInput | NurseVisitCreateOrConnectWithoutNurseInput[]
    createMany?: NurseVisitCreateManyNurseInputEnvelope
    connect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutNursesInput = {
    create?: XOR<MedicalRecordCreateWithoutNursesInput, MedicalRecordUncheckedCreateWithoutNursesInput> | MedicalRecordCreateWithoutNursesInput[] | MedicalRecordUncheckedCreateWithoutNursesInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutNursesInput | MedicalRecordCreateOrConnectWithoutNursesInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput = {
    create?: XOR<NurseServiceRequestCreateWithoutNurseInput, NurseServiceRequestUncheckedCreateWithoutNurseInput> | NurseServiceRequestCreateWithoutNurseInput[] | NurseServiceRequestUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: NurseServiceRequestCreateOrConnectWithoutNurseInput | NurseServiceRequestCreateOrConnectWithoutNurseInput[]
    createMany?: NurseServiceRequestCreateManyNurseInputEnvelope
    connect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
  }

  export type ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutNurseInput, ChatRoomPatientNurseUncheckedCreateWithoutNurseInput> | ChatRoomPatientNurseCreateWithoutNurseInput[] | ChatRoomPatientNurseUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutNurseInput | ChatRoomPatientNurseCreateOrConnectWithoutNurseInput[]
    createMany?: ChatRoomPatientNurseCreateManyNurseInputEnvelope
    connect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
  }

  export type ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutNurseInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput> | ChatRoomDoctorNursePatientCreateWithoutNurseInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutNurseInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutNurseInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyNurseInputEnvelope
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
  }

  export type DoctorUncheckedCreateNestedManyWithoutNursesInput = {
    create?: XOR<DoctorCreateWithoutNursesInput, DoctorUncheckedCreateWithoutNursesInput> | DoctorCreateWithoutNursesInput[] | DoctorUncheckedCreateWithoutNursesInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutNursesInput | DoctorCreateOrConnectWithoutNursesInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type DoctorNurseUncheckedCreateNestedManyWithoutNurseInput = {
    create?: XOR<DoctorNurseCreateWithoutNurseInput, DoctorNurseUncheckedCreateWithoutNurseInput> | DoctorNurseCreateWithoutNurseInput[] | DoctorNurseUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: DoctorNurseCreateOrConnectWithoutNurseInput | DoctorNurseCreateOrConnectWithoutNurseInput[]
    createMany?: DoctorNurseCreateManyNurseInputEnvelope
    connect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutNurseInput = {
    create?: XOR<ScheduleCreateWithoutNurseInput, ScheduleUncheckedCreateWithoutNurseInput> | ScheduleCreateWithoutNurseInput[] | ScheduleUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutNurseInput | ScheduleCreateOrConnectWithoutNurseInput[]
    createMany?: ScheduleCreateManyNurseInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutNurseInput = {
    create?: XOR<TaskCreateWithoutNurseInput, TaskUncheckedCreateWithoutNurseInput> | TaskCreateWithoutNurseInput[] | TaskUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutNurseInput | TaskCreateOrConnectWithoutNurseInput[]
    createMany?: TaskCreateManyNurseInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutNurseNestedInput = {
    create?: XOR<UserCreateWithoutNurseInput, UserUncheckedCreateWithoutNurseInput>
    connectOrCreate?: UserCreateOrConnectWithoutNurseInput
    upsert?: UserUpsertWithoutNurseInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNurseInput, UserUpdateWithoutNurseInput>, UserUncheckedUpdateWithoutNurseInput>
  }

  export type NurseVisitUpdateManyWithoutNurseNestedInput = {
    create?: XOR<NurseVisitCreateWithoutNurseInput, NurseVisitUncheckedCreateWithoutNurseInput> | NurseVisitCreateWithoutNurseInput[] | NurseVisitUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: NurseVisitCreateOrConnectWithoutNurseInput | NurseVisitCreateOrConnectWithoutNurseInput[]
    upsert?: NurseVisitUpsertWithWhereUniqueWithoutNurseInput | NurseVisitUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: NurseVisitCreateManyNurseInputEnvelope
    set?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    disconnect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    delete?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    connect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    update?: NurseVisitUpdateWithWhereUniqueWithoutNurseInput | NurseVisitUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: NurseVisitUpdateManyWithWhereWithoutNurseInput | NurseVisitUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: NurseVisitScalarWhereInput | NurseVisitScalarWhereInput[]
  }

  export type MedicalRecordUpdateManyWithoutNursesNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutNursesInput, MedicalRecordUncheckedCreateWithoutNursesInput> | MedicalRecordCreateWithoutNursesInput[] | MedicalRecordUncheckedCreateWithoutNursesInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutNursesInput | MedicalRecordCreateOrConnectWithoutNursesInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutNursesInput | MedicalRecordUpsertWithWhereUniqueWithoutNursesInput[]
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutNursesInput | MedicalRecordUpdateWithWhereUniqueWithoutNursesInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutNursesInput | MedicalRecordUpdateManyWithWhereWithoutNursesInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type NurseServiceRequestUpdateManyWithoutNurseNestedInput = {
    create?: XOR<NurseServiceRequestCreateWithoutNurseInput, NurseServiceRequestUncheckedCreateWithoutNurseInput> | NurseServiceRequestCreateWithoutNurseInput[] | NurseServiceRequestUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: NurseServiceRequestCreateOrConnectWithoutNurseInput | NurseServiceRequestCreateOrConnectWithoutNurseInput[]
    upsert?: NurseServiceRequestUpsertWithWhereUniqueWithoutNurseInput | NurseServiceRequestUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: NurseServiceRequestCreateManyNurseInputEnvelope
    set?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    disconnect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    delete?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    connect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    update?: NurseServiceRequestUpdateWithWhereUniqueWithoutNurseInput | NurseServiceRequestUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: NurseServiceRequestUpdateManyWithWhereWithoutNurseInput | NurseServiceRequestUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: NurseServiceRequestScalarWhereInput | NurseServiceRequestScalarWhereInput[]
  }

  export type ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutNurseInput, ChatRoomPatientNurseUncheckedCreateWithoutNurseInput> | ChatRoomPatientNurseCreateWithoutNurseInput[] | ChatRoomPatientNurseUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutNurseInput | ChatRoomPatientNurseCreateOrConnectWithoutNurseInput[]
    upsert?: ChatRoomPatientNurseUpsertWithWhereUniqueWithoutNurseInput | ChatRoomPatientNurseUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: ChatRoomPatientNurseCreateManyNurseInputEnvelope
    set?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    disconnect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    delete?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    connect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    update?: ChatRoomPatientNurseUpdateWithWhereUniqueWithoutNurseInput | ChatRoomPatientNurseUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: ChatRoomPatientNurseUpdateManyWithWhereWithoutNurseInput | ChatRoomPatientNurseUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: ChatRoomPatientNurseScalarWhereInput | ChatRoomPatientNurseScalarWhereInput[]
  }

  export type ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutNurseInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput> | ChatRoomDoctorNursePatientCreateWithoutNurseInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutNurseInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutNurseInput[]
    upsert?: ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutNurseInput | ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyNurseInputEnvelope
    set?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    disconnect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    delete?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    update?: ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutNurseInput | ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutNurseInput | ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: ChatRoomDoctorNursePatientScalarWhereInput | ChatRoomDoctorNursePatientScalarWhereInput[]
  }

  export type DoctorUpdateManyWithoutNursesNestedInput = {
    create?: XOR<DoctorCreateWithoutNursesInput, DoctorUncheckedCreateWithoutNursesInput> | DoctorCreateWithoutNursesInput[] | DoctorUncheckedCreateWithoutNursesInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutNursesInput | DoctorCreateOrConnectWithoutNursesInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutNursesInput | DoctorUpsertWithWhereUniqueWithoutNursesInput[]
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutNursesInput | DoctorUpdateWithWhereUniqueWithoutNursesInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutNursesInput | DoctorUpdateManyWithWhereWithoutNursesInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type DoctorNurseUpdateManyWithoutNurseNestedInput = {
    create?: XOR<DoctorNurseCreateWithoutNurseInput, DoctorNurseUncheckedCreateWithoutNurseInput> | DoctorNurseCreateWithoutNurseInput[] | DoctorNurseUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: DoctorNurseCreateOrConnectWithoutNurseInput | DoctorNurseCreateOrConnectWithoutNurseInput[]
    upsert?: DoctorNurseUpsertWithWhereUniqueWithoutNurseInput | DoctorNurseUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: DoctorNurseCreateManyNurseInputEnvelope
    set?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    disconnect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    delete?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    connect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    update?: DoctorNurseUpdateWithWhereUniqueWithoutNurseInput | DoctorNurseUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: DoctorNurseUpdateManyWithWhereWithoutNurseInput | DoctorNurseUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: DoctorNurseScalarWhereInput | DoctorNurseScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutNurseNestedInput = {
    create?: XOR<ScheduleCreateWithoutNurseInput, ScheduleUncheckedCreateWithoutNurseInput> | ScheduleCreateWithoutNurseInput[] | ScheduleUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutNurseInput | ScheduleCreateOrConnectWithoutNurseInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutNurseInput | ScheduleUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: ScheduleCreateManyNurseInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutNurseInput | ScheduleUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutNurseInput | ScheduleUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutNurseNestedInput = {
    create?: XOR<TaskCreateWithoutNurseInput, TaskUncheckedCreateWithoutNurseInput> | TaskCreateWithoutNurseInput[] | TaskUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutNurseInput | TaskCreateOrConnectWithoutNurseInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutNurseInput | TaskUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: TaskCreateManyNurseInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutNurseInput | TaskUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutNurseInput | TaskUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type NurseVisitUncheckedUpdateManyWithoutNurseNestedInput = {
    create?: XOR<NurseVisitCreateWithoutNurseInput, NurseVisitUncheckedCreateWithoutNurseInput> | NurseVisitCreateWithoutNurseInput[] | NurseVisitUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: NurseVisitCreateOrConnectWithoutNurseInput | NurseVisitCreateOrConnectWithoutNurseInput[]
    upsert?: NurseVisitUpsertWithWhereUniqueWithoutNurseInput | NurseVisitUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: NurseVisitCreateManyNurseInputEnvelope
    set?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    disconnect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    delete?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    connect?: NurseVisitWhereUniqueInput | NurseVisitWhereUniqueInput[]
    update?: NurseVisitUpdateWithWhereUniqueWithoutNurseInput | NurseVisitUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: NurseVisitUpdateManyWithWhereWithoutNurseInput | NurseVisitUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: NurseVisitScalarWhereInput | NurseVisitScalarWhereInput[]
  }

  export type MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutNursesInput, MedicalRecordUncheckedCreateWithoutNursesInput> | MedicalRecordCreateWithoutNursesInput[] | MedicalRecordUncheckedCreateWithoutNursesInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutNursesInput | MedicalRecordCreateOrConnectWithoutNursesInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutNursesInput | MedicalRecordUpsertWithWhereUniqueWithoutNursesInput[]
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutNursesInput | MedicalRecordUpdateWithWhereUniqueWithoutNursesInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutNursesInput | MedicalRecordUpdateManyWithWhereWithoutNursesInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput = {
    create?: XOR<NurseServiceRequestCreateWithoutNurseInput, NurseServiceRequestUncheckedCreateWithoutNurseInput> | NurseServiceRequestCreateWithoutNurseInput[] | NurseServiceRequestUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: NurseServiceRequestCreateOrConnectWithoutNurseInput | NurseServiceRequestCreateOrConnectWithoutNurseInput[]
    upsert?: NurseServiceRequestUpsertWithWhereUniqueWithoutNurseInput | NurseServiceRequestUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: NurseServiceRequestCreateManyNurseInputEnvelope
    set?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    disconnect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    delete?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    connect?: NurseServiceRequestWhereUniqueInput | NurseServiceRequestWhereUniqueInput[]
    update?: NurseServiceRequestUpdateWithWhereUniqueWithoutNurseInput | NurseServiceRequestUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: NurseServiceRequestUpdateManyWithWhereWithoutNurseInput | NurseServiceRequestUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: NurseServiceRequestScalarWhereInput | NurseServiceRequestScalarWhereInput[]
  }

  export type ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutNurseInput, ChatRoomPatientNurseUncheckedCreateWithoutNurseInput> | ChatRoomPatientNurseCreateWithoutNurseInput[] | ChatRoomPatientNurseUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutNurseInput | ChatRoomPatientNurseCreateOrConnectWithoutNurseInput[]
    upsert?: ChatRoomPatientNurseUpsertWithWhereUniqueWithoutNurseInput | ChatRoomPatientNurseUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: ChatRoomPatientNurseCreateManyNurseInputEnvelope
    set?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    disconnect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    delete?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    connect?: ChatRoomPatientNurseWhereUniqueInput | ChatRoomPatientNurseWhereUniqueInput[]
    update?: ChatRoomPatientNurseUpdateWithWhereUniqueWithoutNurseInput | ChatRoomPatientNurseUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: ChatRoomPatientNurseUpdateManyWithWhereWithoutNurseInput | ChatRoomPatientNurseUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: ChatRoomPatientNurseScalarWhereInput | ChatRoomPatientNurseScalarWhereInput[]
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutNurseInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput> | ChatRoomDoctorNursePatientCreateWithoutNurseInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutNurseInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutNurseInput[]
    upsert?: ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutNurseInput | ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyNurseInputEnvelope
    set?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    disconnect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    delete?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    update?: ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutNurseInput | ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutNurseInput | ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: ChatRoomDoctorNursePatientScalarWhereInput | ChatRoomDoctorNursePatientScalarWhereInput[]
  }

  export type DoctorUncheckedUpdateManyWithoutNursesNestedInput = {
    create?: XOR<DoctorCreateWithoutNursesInput, DoctorUncheckedCreateWithoutNursesInput> | DoctorCreateWithoutNursesInput[] | DoctorUncheckedCreateWithoutNursesInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutNursesInput | DoctorCreateOrConnectWithoutNursesInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutNursesInput | DoctorUpsertWithWhereUniqueWithoutNursesInput[]
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutNursesInput | DoctorUpdateWithWhereUniqueWithoutNursesInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutNursesInput | DoctorUpdateManyWithWhereWithoutNursesInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput = {
    create?: XOR<DoctorNurseCreateWithoutNurseInput, DoctorNurseUncheckedCreateWithoutNurseInput> | DoctorNurseCreateWithoutNurseInput[] | DoctorNurseUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: DoctorNurseCreateOrConnectWithoutNurseInput | DoctorNurseCreateOrConnectWithoutNurseInput[]
    upsert?: DoctorNurseUpsertWithWhereUniqueWithoutNurseInput | DoctorNurseUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: DoctorNurseCreateManyNurseInputEnvelope
    set?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    disconnect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    delete?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    connect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    update?: DoctorNurseUpdateWithWhereUniqueWithoutNurseInput | DoctorNurseUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: DoctorNurseUpdateManyWithWhereWithoutNurseInput | DoctorNurseUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: DoctorNurseScalarWhereInput | DoctorNurseScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutNurseNestedInput = {
    create?: XOR<ScheduleCreateWithoutNurseInput, ScheduleUncheckedCreateWithoutNurseInput> | ScheduleCreateWithoutNurseInput[] | ScheduleUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutNurseInput | ScheduleCreateOrConnectWithoutNurseInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutNurseInput | ScheduleUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: ScheduleCreateManyNurseInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutNurseInput | ScheduleUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutNurseInput | ScheduleUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutNurseNestedInput = {
    create?: XOR<TaskCreateWithoutNurseInput, TaskUncheckedCreateWithoutNurseInput> | TaskCreateWithoutNurseInput[] | TaskUncheckedCreateWithoutNurseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutNurseInput | TaskCreateOrConnectWithoutNurseInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutNurseInput | TaskUpsertWithWhereUniqueWithoutNurseInput[]
    createMany?: TaskCreateManyNurseInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutNurseInput | TaskUpdateWithWhereUniqueWithoutNurseInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutNurseInput | TaskUpdateManyWithWhereWithoutNurseInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDoctorInput = {
    create?: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorInput
    connect?: UserWhereUniqueInput
  }

  export type DoctorPatientCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorPatientCreateWithoutDoctorInput, DoctorPatientUncheckedCreateWithoutDoctorInput> | DoctorPatientCreateWithoutDoctorInput[] | DoctorPatientUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorPatientCreateOrConnectWithoutDoctorInput | DoctorPatientCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorPatientCreateManyDoctorInputEnvelope
    connect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
  }

  export type DoctorPatientRequestCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorPatientRequestCreateWithoutDoctorInput, DoctorPatientRequestUncheckedCreateWithoutDoctorInput> | DoctorPatientRequestCreateWithoutDoctorInput[] | DoctorPatientRequestUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorPatientRequestCreateOrConnectWithoutDoctorInput | DoctorPatientRequestCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorPatientRequestCreateManyDoctorInputEnvelope
    connect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
  }

  export type MedicalRecordCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<MedicalRecordCreateWithoutDoctorsInput, MedicalRecordUncheckedCreateWithoutDoctorsInput> | MedicalRecordCreateWithoutDoctorsInput[] | MedicalRecordUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutDoctorsInput | MedicalRecordCreateOrConnectWithoutDoctorsInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type PrescriptionCreateNestedManyWithoutDoctorInput = {
    create?: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput> | PrescriptionCreateWithoutDoctorInput[] | PrescriptionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutDoctorInput | PrescriptionCreateOrConnectWithoutDoctorInput[]
    createMany?: PrescriptionCreateManyDoctorInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type ChatRoomCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ChatRoomCreateWithoutDoctorInput, ChatRoomUncheckedCreateWithoutDoctorInput> | ChatRoomCreateWithoutDoctorInput[] | ChatRoomUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutDoctorInput | ChatRoomCreateOrConnectWithoutDoctorInput[]
    createMany?: ChatRoomCreateManyDoctorInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutDoctorInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput> | ChatRoomDoctorNursePatientCreateWithoutDoctorInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutDoctorInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutDoctorInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyDoctorInputEnvelope
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
  }

  export type NurseCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<NurseCreateWithoutDoctorsInput, NurseUncheckedCreateWithoutDoctorsInput> | NurseCreateWithoutDoctorsInput[] | NurseUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: NurseCreateOrConnectWithoutDoctorsInput | NurseCreateOrConnectWithoutDoctorsInput[]
    connect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
  }

  export type DoctorNurseCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorNurseCreateWithoutDoctorInput, DoctorNurseUncheckedCreateWithoutDoctorInput> | DoctorNurseCreateWithoutDoctorInput[] | DoctorNurseUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorNurseCreateOrConnectWithoutDoctorInput | DoctorNurseCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorNurseCreateManyDoctorInputEnvelope
    connect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutDoctorInput = {
    create?: XOR<TaskCreateWithoutDoctorInput, TaskUncheckedCreateWithoutDoctorInput> | TaskCreateWithoutDoctorInput[] | TaskUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutDoctorInput | TaskCreateOrConnectWithoutDoctorInput[]
    createMany?: TaskCreateManyDoctorInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ScheduleCreateWithoutDoctorInput, ScheduleUncheckedCreateWithoutDoctorInput> | ScheduleCreateWithoutDoctorInput[] | ScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutDoctorInput | ScheduleCreateOrConnectWithoutDoctorInput[]
    createMany?: ScheduleCreateManyDoctorInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorPatientCreateWithoutDoctorInput, DoctorPatientUncheckedCreateWithoutDoctorInput> | DoctorPatientCreateWithoutDoctorInput[] | DoctorPatientUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorPatientCreateOrConnectWithoutDoctorInput | DoctorPatientCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorPatientCreateManyDoctorInputEnvelope
    connect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
  }

  export type DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorPatientRequestCreateWithoutDoctorInput, DoctorPatientRequestUncheckedCreateWithoutDoctorInput> | DoctorPatientRequestCreateWithoutDoctorInput[] | DoctorPatientRequestUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorPatientRequestCreateOrConnectWithoutDoctorInput | DoctorPatientRequestCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorPatientRequestCreateManyDoctorInputEnvelope
    connect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<MedicalRecordCreateWithoutDoctorsInput, MedicalRecordUncheckedCreateWithoutDoctorsInput> | MedicalRecordCreateWithoutDoctorsInput[] | MedicalRecordUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutDoctorsInput | MedicalRecordCreateOrConnectWithoutDoctorsInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type PrescriptionUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput> | PrescriptionCreateWithoutDoctorInput[] | PrescriptionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutDoctorInput | PrescriptionCreateOrConnectWithoutDoctorInput[]
    createMany?: PrescriptionCreateManyDoctorInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type ChatRoomUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ChatRoomCreateWithoutDoctorInput, ChatRoomUncheckedCreateWithoutDoctorInput> | ChatRoomCreateWithoutDoctorInput[] | ChatRoomUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutDoctorInput | ChatRoomCreateOrConnectWithoutDoctorInput[]
    createMany?: ChatRoomCreateManyDoctorInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutDoctorInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput> | ChatRoomDoctorNursePatientCreateWithoutDoctorInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutDoctorInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutDoctorInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyDoctorInputEnvelope
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
  }

  export type NurseUncheckedCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<NurseCreateWithoutDoctorsInput, NurseUncheckedCreateWithoutDoctorsInput> | NurseCreateWithoutDoctorsInput[] | NurseUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: NurseCreateOrConnectWithoutDoctorsInput | NurseCreateOrConnectWithoutDoctorsInput[]
    connect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
  }

  export type DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorNurseCreateWithoutDoctorInput, DoctorNurseUncheckedCreateWithoutDoctorInput> | DoctorNurseCreateWithoutDoctorInput[] | DoctorNurseUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorNurseCreateOrConnectWithoutDoctorInput | DoctorNurseCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorNurseCreateManyDoctorInputEnvelope
    connect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<TaskCreateWithoutDoctorInput, TaskUncheckedCreateWithoutDoctorInput> | TaskCreateWithoutDoctorInput[] | TaskUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutDoctorInput | TaskCreateOrConnectWithoutDoctorInput[]
    createMany?: TaskCreateManyDoctorInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ScheduleCreateWithoutDoctorInput, ScheduleUncheckedCreateWithoutDoctorInput> | ScheduleCreateWithoutDoctorInput[] | ScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutDoctorInput | ScheduleCreateOrConnectWithoutDoctorInput[]
    createMany?: ScheduleCreateManyDoctorInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutDoctorNestedInput = {
    create?: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorInput
    upsert?: UserUpsertWithoutDoctorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDoctorInput, UserUpdateWithoutDoctorInput>, UserUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorPatientUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorPatientCreateWithoutDoctorInput, DoctorPatientUncheckedCreateWithoutDoctorInput> | DoctorPatientCreateWithoutDoctorInput[] | DoctorPatientUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorPatientCreateOrConnectWithoutDoctorInput | DoctorPatientCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorPatientUpsertWithWhereUniqueWithoutDoctorInput | DoctorPatientUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorPatientCreateManyDoctorInputEnvelope
    set?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    disconnect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    delete?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    connect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    update?: DoctorPatientUpdateWithWhereUniqueWithoutDoctorInput | DoctorPatientUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorPatientUpdateManyWithWhereWithoutDoctorInput | DoctorPatientUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorPatientScalarWhereInput | DoctorPatientScalarWhereInput[]
  }

  export type DoctorPatientRequestUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorPatientRequestCreateWithoutDoctorInput, DoctorPatientRequestUncheckedCreateWithoutDoctorInput> | DoctorPatientRequestCreateWithoutDoctorInput[] | DoctorPatientRequestUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorPatientRequestCreateOrConnectWithoutDoctorInput | DoctorPatientRequestCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorPatientRequestUpsertWithWhereUniqueWithoutDoctorInput | DoctorPatientRequestUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorPatientRequestCreateManyDoctorInputEnvelope
    set?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    disconnect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    delete?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    connect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    update?: DoctorPatientRequestUpdateWithWhereUniqueWithoutDoctorInput | DoctorPatientRequestUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorPatientRequestUpdateManyWithWhereWithoutDoctorInput | DoctorPatientRequestUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorPatientRequestScalarWhereInput | DoctorPatientRequestScalarWhereInput[]
  }

  export type MedicalRecordUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutDoctorsInput, MedicalRecordUncheckedCreateWithoutDoctorsInput> | MedicalRecordCreateWithoutDoctorsInput[] | MedicalRecordUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutDoctorsInput | MedicalRecordCreateOrConnectWithoutDoctorsInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutDoctorsInput | MedicalRecordUpsertWithWhereUniqueWithoutDoctorsInput[]
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutDoctorsInput | MedicalRecordUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutDoctorsInput | MedicalRecordUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type PrescriptionUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput> | PrescriptionCreateWithoutDoctorInput[] | PrescriptionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutDoctorInput | PrescriptionCreateOrConnectWithoutDoctorInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutDoctorInput | PrescriptionUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: PrescriptionCreateManyDoctorInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutDoctorInput | PrescriptionUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutDoctorInput | PrescriptionUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type ChatRoomUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ChatRoomCreateWithoutDoctorInput, ChatRoomUncheckedCreateWithoutDoctorInput> | ChatRoomCreateWithoutDoctorInput[] | ChatRoomUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutDoctorInput | ChatRoomCreateOrConnectWithoutDoctorInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutDoctorInput | ChatRoomUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ChatRoomCreateManyDoctorInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutDoctorInput | ChatRoomUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutDoctorInput | ChatRoomUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutDoctorInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput> | ChatRoomDoctorNursePatientCreateWithoutDoctorInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutDoctorInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutDoctorInput[]
    upsert?: ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutDoctorInput | ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyDoctorInputEnvelope
    set?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    disconnect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    delete?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    update?: ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutDoctorInput | ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutDoctorInput | ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ChatRoomDoctorNursePatientScalarWhereInput | ChatRoomDoctorNursePatientScalarWhereInput[]
  }

  export type NurseUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<NurseCreateWithoutDoctorsInput, NurseUncheckedCreateWithoutDoctorsInput> | NurseCreateWithoutDoctorsInput[] | NurseUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: NurseCreateOrConnectWithoutDoctorsInput | NurseCreateOrConnectWithoutDoctorsInput[]
    upsert?: NurseUpsertWithWhereUniqueWithoutDoctorsInput | NurseUpsertWithWhereUniqueWithoutDoctorsInput[]
    set?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    disconnect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    delete?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    connect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    update?: NurseUpdateWithWhereUniqueWithoutDoctorsInput | NurseUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: NurseUpdateManyWithWhereWithoutDoctorsInput | NurseUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: NurseScalarWhereInput | NurseScalarWhereInput[]
  }

  export type DoctorNurseUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorNurseCreateWithoutDoctorInput, DoctorNurseUncheckedCreateWithoutDoctorInput> | DoctorNurseCreateWithoutDoctorInput[] | DoctorNurseUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorNurseCreateOrConnectWithoutDoctorInput | DoctorNurseCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorNurseUpsertWithWhereUniqueWithoutDoctorInput | DoctorNurseUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorNurseCreateManyDoctorInputEnvelope
    set?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    disconnect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    delete?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    connect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    update?: DoctorNurseUpdateWithWhereUniqueWithoutDoctorInput | DoctorNurseUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorNurseUpdateManyWithWhereWithoutDoctorInput | DoctorNurseUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorNurseScalarWhereInput | DoctorNurseScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<TaskCreateWithoutDoctorInput, TaskUncheckedCreateWithoutDoctorInput> | TaskCreateWithoutDoctorInput[] | TaskUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutDoctorInput | TaskCreateOrConnectWithoutDoctorInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutDoctorInput | TaskUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: TaskCreateManyDoctorInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutDoctorInput | TaskUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutDoctorInput | TaskUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ScheduleCreateWithoutDoctorInput, ScheduleUncheckedCreateWithoutDoctorInput> | ScheduleCreateWithoutDoctorInput[] | ScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutDoctorInput | ScheduleCreateOrConnectWithoutDoctorInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutDoctorInput | ScheduleUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ScheduleCreateManyDoctorInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutDoctorInput | ScheduleUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutDoctorInput | ScheduleUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorPatientCreateWithoutDoctorInput, DoctorPatientUncheckedCreateWithoutDoctorInput> | DoctorPatientCreateWithoutDoctorInput[] | DoctorPatientUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorPatientCreateOrConnectWithoutDoctorInput | DoctorPatientCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorPatientUpsertWithWhereUniqueWithoutDoctorInput | DoctorPatientUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorPatientCreateManyDoctorInputEnvelope
    set?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    disconnect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    delete?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    connect?: DoctorPatientWhereUniqueInput | DoctorPatientWhereUniqueInput[]
    update?: DoctorPatientUpdateWithWhereUniqueWithoutDoctorInput | DoctorPatientUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorPatientUpdateManyWithWhereWithoutDoctorInput | DoctorPatientUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorPatientScalarWhereInput | DoctorPatientScalarWhereInput[]
  }

  export type DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorPatientRequestCreateWithoutDoctorInput, DoctorPatientRequestUncheckedCreateWithoutDoctorInput> | DoctorPatientRequestCreateWithoutDoctorInput[] | DoctorPatientRequestUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorPatientRequestCreateOrConnectWithoutDoctorInput | DoctorPatientRequestCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorPatientRequestUpsertWithWhereUniqueWithoutDoctorInput | DoctorPatientRequestUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorPatientRequestCreateManyDoctorInputEnvelope
    set?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    disconnect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    delete?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    connect?: DoctorPatientRequestWhereUniqueInput | DoctorPatientRequestWhereUniqueInput[]
    update?: DoctorPatientRequestUpdateWithWhereUniqueWithoutDoctorInput | DoctorPatientRequestUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorPatientRequestUpdateManyWithWhereWithoutDoctorInput | DoctorPatientRequestUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorPatientRequestScalarWhereInput | DoctorPatientRequestScalarWhereInput[]
  }

  export type MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutDoctorsInput, MedicalRecordUncheckedCreateWithoutDoctorsInput> | MedicalRecordCreateWithoutDoctorsInput[] | MedicalRecordUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutDoctorsInput | MedicalRecordCreateOrConnectWithoutDoctorsInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutDoctorsInput | MedicalRecordUpsertWithWhereUniqueWithoutDoctorsInput[]
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutDoctorsInput | MedicalRecordUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutDoctorsInput | MedicalRecordUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput> | PrescriptionCreateWithoutDoctorInput[] | PrescriptionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutDoctorInput | PrescriptionCreateOrConnectWithoutDoctorInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutDoctorInput | PrescriptionUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: PrescriptionCreateManyDoctorInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutDoctorInput | PrescriptionUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutDoctorInput | PrescriptionUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ChatRoomCreateWithoutDoctorInput, ChatRoomUncheckedCreateWithoutDoctorInput> | ChatRoomCreateWithoutDoctorInput[] | ChatRoomUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutDoctorInput | ChatRoomCreateOrConnectWithoutDoctorInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutDoctorInput | ChatRoomUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ChatRoomCreateManyDoctorInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutDoctorInput | ChatRoomUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutDoctorInput | ChatRoomUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutDoctorInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput> | ChatRoomDoctorNursePatientCreateWithoutDoctorInput[] | ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutDoctorInput | ChatRoomDoctorNursePatientCreateOrConnectWithoutDoctorInput[]
    upsert?: ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutDoctorInput | ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ChatRoomDoctorNursePatientCreateManyDoctorInputEnvelope
    set?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    disconnect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    delete?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput | ChatRoomDoctorNursePatientWhereUniqueInput[]
    update?: ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutDoctorInput | ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutDoctorInput | ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ChatRoomDoctorNursePatientScalarWhereInput | ChatRoomDoctorNursePatientScalarWhereInput[]
  }

  export type NurseUncheckedUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<NurseCreateWithoutDoctorsInput, NurseUncheckedCreateWithoutDoctorsInput> | NurseCreateWithoutDoctorsInput[] | NurseUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: NurseCreateOrConnectWithoutDoctorsInput | NurseCreateOrConnectWithoutDoctorsInput[]
    upsert?: NurseUpsertWithWhereUniqueWithoutDoctorsInput | NurseUpsertWithWhereUniqueWithoutDoctorsInput[]
    set?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    disconnect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    delete?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    connect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    update?: NurseUpdateWithWhereUniqueWithoutDoctorsInput | NurseUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: NurseUpdateManyWithWhereWithoutDoctorsInput | NurseUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: NurseScalarWhereInput | NurseScalarWhereInput[]
  }

  export type DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorNurseCreateWithoutDoctorInput, DoctorNurseUncheckedCreateWithoutDoctorInput> | DoctorNurseCreateWithoutDoctorInput[] | DoctorNurseUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorNurseCreateOrConnectWithoutDoctorInput | DoctorNurseCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorNurseUpsertWithWhereUniqueWithoutDoctorInput | DoctorNurseUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorNurseCreateManyDoctorInputEnvelope
    set?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    disconnect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    delete?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    connect?: DoctorNurseWhereUniqueInput | DoctorNurseWhereUniqueInput[]
    update?: DoctorNurseUpdateWithWhereUniqueWithoutDoctorInput | DoctorNurseUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorNurseUpdateManyWithWhereWithoutDoctorInput | DoctorNurseUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorNurseScalarWhereInput | DoctorNurseScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<TaskCreateWithoutDoctorInput, TaskUncheckedCreateWithoutDoctorInput> | TaskCreateWithoutDoctorInput[] | TaskUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutDoctorInput | TaskCreateOrConnectWithoutDoctorInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutDoctorInput | TaskUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: TaskCreateManyDoctorInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutDoctorInput | TaskUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutDoctorInput | TaskUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ScheduleCreateWithoutDoctorInput, ScheduleUncheckedCreateWithoutDoctorInput> | ScheduleCreateWithoutDoctorInput[] | ScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutDoctorInput | ScheduleCreateOrConnectWithoutDoctorInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutDoctorInput | ScheduleUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ScheduleCreateManyDoctorInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutDoctorInput | ScheduleUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutDoctorInput | ScheduleUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutDoctorNursesInput = {
    create?: XOR<DoctorCreateWithoutDoctorNursesInput, DoctorUncheckedCreateWithoutDoctorNursesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutDoctorNursesInput
    connect?: DoctorWhereUniqueInput
  }

  export type NurseCreateNestedOneWithoutDoctorNursesInput = {
    create?: XOR<NurseCreateWithoutDoctorNursesInput, NurseUncheckedCreateWithoutDoctorNursesInput>
    connectOrCreate?: NurseCreateOrConnectWithoutDoctorNursesInput
    connect?: NurseWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutDoctorNursesNestedInput = {
    create?: XOR<DoctorCreateWithoutDoctorNursesInput, DoctorUncheckedCreateWithoutDoctorNursesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutDoctorNursesInput
    upsert?: DoctorUpsertWithoutDoctorNursesInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutDoctorNursesInput, DoctorUpdateWithoutDoctorNursesInput>, DoctorUncheckedUpdateWithoutDoctorNursesInput>
  }

  export type NurseUpdateOneRequiredWithoutDoctorNursesNestedInput = {
    create?: XOR<NurseCreateWithoutDoctorNursesInput, NurseUncheckedCreateWithoutDoctorNursesInput>
    connectOrCreate?: NurseCreateOrConnectWithoutDoctorNursesInput
    upsert?: NurseUpsertWithoutDoctorNursesInput
    connect?: NurseWhereUniqueInput
    update?: XOR<XOR<NurseUpdateToOneWithWhereWithoutDoctorNursesInput, NurseUpdateWithoutDoctorNursesInput>, NurseUncheckedUpdateWithoutDoctorNursesInput>
  }

  export type DoctorCreateNestedOneWithoutTasksInput = {
    create?: XOR<DoctorCreateWithoutTasksInput, DoctorUncheckedCreateWithoutTasksInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutTasksInput
    connect?: DoctorWhereUniqueInput
  }

  export type NurseCreateNestedOneWithoutTasksInput = {
    create?: XOR<NurseCreateWithoutTasksInput, NurseUncheckedCreateWithoutTasksInput>
    connectOrCreate?: NurseCreateOrConnectWithoutTasksInput
    connect?: NurseWhereUniqueInput
  }

  export type ScheduleCreateNestedManyWithoutTaskInput = {
    create?: XOR<ScheduleCreateWithoutTaskInput, ScheduleUncheckedCreateWithoutTaskInput> | ScheduleCreateWithoutTaskInput[] | ScheduleUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTaskInput | ScheduleCreateOrConnectWithoutTaskInput[]
    createMany?: ScheduleCreateManyTaskInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<ScheduleCreateWithoutTaskInput, ScheduleUncheckedCreateWithoutTaskInput> | ScheduleCreateWithoutTaskInput[] | ScheduleUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTaskInput | ScheduleCreateOrConnectWithoutTaskInput[]
    createMany?: ScheduleCreateManyTaskInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type DoctorUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<DoctorCreateWithoutTasksInput, DoctorUncheckedCreateWithoutTasksInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutTasksInput
    upsert?: DoctorUpsertWithoutTasksInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutTasksInput, DoctorUpdateWithoutTasksInput>, DoctorUncheckedUpdateWithoutTasksInput>
  }

  export type NurseUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<NurseCreateWithoutTasksInput, NurseUncheckedCreateWithoutTasksInput>
    connectOrCreate?: NurseCreateOrConnectWithoutTasksInput
    upsert?: NurseUpsertWithoutTasksInput
    connect?: NurseWhereUniqueInput
    update?: XOR<XOR<NurseUpdateToOneWithWhereWithoutTasksInput, NurseUpdateWithoutTasksInput>, NurseUncheckedUpdateWithoutTasksInput>
  }

  export type ScheduleUpdateManyWithoutTaskNestedInput = {
    create?: XOR<ScheduleCreateWithoutTaskInput, ScheduleUncheckedCreateWithoutTaskInput> | ScheduleCreateWithoutTaskInput[] | ScheduleUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTaskInput | ScheduleCreateOrConnectWithoutTaskInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTaskInput | ScheduleUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: ScheduleCreateManyTaskInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTaskInput | ScheduleUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTaskInput | ScheduleUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<ScheduleCreateWithoutTaskInput, ScheduleUncheckedCreateWithoutTaskInput> | ScheduleCreateWithoutTaskInput[] | ScheduleUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTaskInput | ScheduleCreateOrConnectWithoutTaskInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTaskInput | ScheduleUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: ScheduleCreateManyTaskInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTaskInput | ScheduleUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTaskInput | ScheduleUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutScheduledTasksInput = {
    create?: XOR<DoctorCreateWithoutScheduledTasksInput, DoctorUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutScheduledTasksInput
    connect?: DoctorWhereUniqueInput
  }

  export type NurseCreateNestedOneWithoutScheduledTasksInput = {
    create?: XOR<NurseCreateWithoutScheduledTasksInput, NurseUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: NurseCreateOrConnectWithoutScheduledTasksInput
    connect?: NurseWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutScheduledTasksInput = {
    create?: XOR<PatientCreateWithoutScheduledTasksInput, PatientUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: PatientCreateOrConnectWithoutScheduledTasksInput
    connect?: PatientWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutScheduledTasksInput = {
    create?: XOR<TaskCreateWithoutScheduledTasksInput, TaskUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutScheduledTasksInput
    connect?: TaskWhereUniqueInput
  }

  export type DoctorUpdateOneWithoutScheduledTasksNestedInput = {
    create?: XOR<DoctorCreateWithoutScheduledTasksInput, DoctorUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutScheduledTasksInput
    upsert?: DoctorUpsertWithoutScheduledTasksInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutScheduledTasksInput, DoctorUpdateWithoutScheduledTasksInput>, DoctorUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type NurseUpdateOneWithoutScheduledTasksNestedInput = {
    create?: XOR<NurseCreateWithoutScheduledTasksInput, NurseUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: NurseCreateOrConnectWithoutScheduledTasksInput
    upsert?: NurseUpsertWithoutScheduledTasksInput
    disconnect?: NurseWhereInput | boolean
    delete?: NurseWhereInput | boolean
    connect?: NurseWhereUniqueInput
    update?: XOR<XOR<NurseUpdateToOneWithWhereWithoutScheduledTasksInput, NurseUpdateWithoutScheduledTasksInput>, NurseUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type PatientUpdateOneWithoutScheduledTasksNestedInput = {
    create?: XOR<PatientCreateWithoutScheduledTasksInput, PatientUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: PatientCreateOrConnectWithoutScheduledTasksInput
    upsert?: PatientUpsertWithoutScheduledTasksInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutScheduledTasksInput, PatientUpdateWithoutScheduledTasksInput>, PatientUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type TaskUpdateOneWithoutScheduledTasksNestedInput = {
    create?: XOR<TaskCreateWithoutScheduledTasksInput, TaskUncheckedCreateWithoutScheduledTasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutScheduledTasksInput
    upsert?: TaskUpsertWithoutScheduledTasksInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutScheduledTasksInput, TaskUpdateWithoutScheduledTasksInput>, TaskUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type PatientCreateNestedOneWithoutNurseServiceRequestsInput = {
    create?: XOR<PatientCreateWithoutNurseServiceRequestsInput, PatientUncheckedCreateWithoutNurseServiceRequestsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNurseServiceRequestsInput
    connect?: PatientWhereUniqueInput
  }

  export type NurseCreateNestedOneWithoutServiceRequestsInput = {
    create?: XOR<NurseCreateWithoutServiceRequestsInput, NurseUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: NurseCreateOrConnectWithoutServiceRequestsInput
    connect?: NurseWhereUniqueInput
  }

  export type EnumServiceStatusFieldUpdateOperationsInput = {
    set?: $Enums.ServiceStatus
  }

  export type PatientUpdateOneRequiredWithoutNurseServiceRequestsNestedInput = {
    create?: XOR<PatientCreateWithoutNurseServiceRequestsInput, PatientUncheckedCreateWithoutNurseServiceRequestsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNurseServiceRequestsInput
    upsert?: PatientUpsertWithoutNurseServiceRequestsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutNurseServiceRequestsInput, PatientUpdateWithoutNurseServiceRequestsInput>, PatientUncheckedUpdateWithoutNurseServiceRequestsInput>
  }

  export type NurseUpdateOneWithoutServiceRequestsNestedInput = {
    create?: XOR<NurseCreateWithoutServiceRequestsInput, NurseUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: NurseCreateOrConnectWithoutServiceRequestsInput
    upsert?: NurseUpsertWithoutServiceRequestsInput
    disconnect?: NurseWhereInput | boolean
    delete?: NurseWhereInput | boolean
    connect?: NurseWhereUniqueInput
    update?: XOR<XOR<NurseUpdateToOneWithWhereWithoutServiceRequestsInput, NurseUpdateWithoutServiceRequestsInput>, NurseUncheckedUpdateWithoutServiceRequestsInput>
  }

  export type PatientCreateNestedOneWithoutDoctorRequestsInput = {
    create?: XOR<PatientCreateWithoutDoctorRequestsInput, PatientUncheckedCreateWithoutDoctorRequestsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorRequestsInput
    connect?: PatientWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutPatientRequestsInput = {
    create?: XOR<DoctorCreateWithoutPatientRequestsInput, DoctorUncheckedCreateWithoutPatientRequestsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPatientRequestsInput
    connect?: DoctorWhereUniqueInput
  }

  export type EnumRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.RequestStatus
  }

  export type PatientUpdateOneRequiredWithoutDoctorRequestsNestedInput = {
    create?: XOR<PatientCreateWithoutDoctorRequestsInput, PatientUncheckedCreateWithoutDoctorRequestsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorRequestsInput
    upsert?: PatientUpsertWithoutDoctorRequestsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutDoctorRequestsInput, PatientUpdateWithoutDoctorRequestsInput>, PatientUncheckedUpdateWithoutDoctorRequestsInput>
  }

  export type DoctorUpdateOneRequiredWithoutPatientRequestsNestedInput = {
    create?: XOR<DoctorCreateWithoutPatientRequestsInput, DoctorUncheckedCreateWithoutPatientRequestsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPatientRequestsInput
    upsert?: DoctorUpsertWithoutPatientRequestsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutPatientRequestsInput, DoctorUpdateWithoutPatientRequestsInput>, DoctorUncheckedUpdateWithoutPatientRequestsInput>
  }

  export type PatientCreateNestedOneWithoutDoctorsInput = {
    create?: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorsInput
    connect?: PatientWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutPatientsInput = {
    create?: XOR<DoctorCreateWithoutPatientsInput, DoctorUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPatientsInput
    connect?: DoctorWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutDoctorsNestedInput = {
    create?: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorsInput
    upsert?: PatientUpsertWithoutDoctorsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutDoctorsInput, PatientUpdateWithoutDoctorsInput>, PatientUncheckedUpdateWithoutDoctorsInput>
  }

  export type DoctorUpdateOneRequiredWithoutPatientsNestedInput = {
    create?: XOR<DoctorCreateWithoutPatientsInput, DoctorUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPatientsInput
    upsert?: DoctorUpsertWithoutPatientsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutPatientsInput, DoctorUpdateWithoutPatientsInput>, DoctorUncheckedUpdateWithoutPatientsInput>
  }

  export type UserCreateNestedOneWithoutPharmacyInput = {
    create?: XOR<UserCreateWithoutPharmacyInput, UserUncheckedCreateWithoutPharmacyInput>
    connectOrCreate?: UserCreateOrConnectWithoutPharmacyInput
    connect?: UserWhereUniqueInput
  }

  export type PrescriptionCreateNestedManyWithoutPharmacyInput = {
    create?: XOR<PrescriptionCreateWithoutPharmacyInput, PrescriptionUncheckedCreateWithoutPharmacyInput> | PrescriptionCreateWithoutPharmacyInput[] | PrescriptionUncheckedCreateWithoutPharmacyInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPharmacyInput | PrescriptionCreateOrConnectWithoutPharmacyInput[]
    createMany?: PrescriptionCreateManyPharmacyInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type MedicineCreateNestedManyWithoutPharmaciesInput = {
    create?: XOR<MedicineCreateWithoutPharmaciesInput, MedicineUncheckedCreateWithoutPharmaciesInput> | MedicineCreateWithoutPharmaciesInput[] | MedicineUncheckedCreateWithoutPharmaciesInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutPharmaciesInput | MedicineCreateOrConnectWithoutPharmaciesInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type PrescriptionUncheckedCreateNestedManyWithoutPharmacyInput = {
    create?: XOR<PrescriptionCreateWithoutPharmacyInput, PrescriptionUncheckedCreateWithoutPharmacyInput> | PrescriptionCreateWithoutPharmacyInput[] | PrescriptionUncheckedCreateWithoutPharmacyInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPharmacyInput | PrescriptionCreateOrConnectWithoutPharmacyInput[]
    createMany?: PrescriptionCreateManyPharmacyInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type MedicineUncheckedCreateNestedManyWithoutPharmaciesInput = {
    create?: XOR<MedicineCreateWithoutPharmaciesInput, MedicineUncheckedCreateWithoutPharmaciesInput> | MedicineCreateWithoutPharmaciesInput[] | MedicineUncheckedCreateWithoutPharmaciesInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutPharmaciesInput | MedicineCreateOrConnectWithoutPharmaciesInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPharmacyNestedInput = {
    create?: XOR<UserCreateWithoutPharmacyInput, UserUncheckedCreateWithoutPharmacyInput>
    connectOrCreate?: UserCreateOrConnectWithoutPharmacyInput
    upsert?: UserUpsertWithoutPharmacyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPharmacyInput, UserUpdateWithoutPharmacyInput>, UserUncheckedUpdateWithoutPharmacyInput>
  }

  export type PrescriptionUpdateManyWithoutPharmacyNestedInput = {
    create?: XOR<PrescriptionCreateWithoutPharmacyInput, PrescriptionUncheckedCreateWithoutPharmacyInput> | PrescriptionCreateWithoutPharmacyInput[] | PrescriptionUncheckedCreateWithoutPharmacyInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPharmacyInput | PrescriptionCreateOrConnectWithoutPharmacyInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutPharmacyInput | PrescriptionUpsertWithWhereUniqueWithoutPharmacyInput[]
    createMany?: PrescriptionCreateManyPharmacyInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutPharmacyInput | PrescriptionUpdateWithWhereUniqueWithoutPharmacyInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutPharmacyInput | PrescriptionUpdateManyWithWhereWithoutPharmacyInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type MedicineUpdateManyWithoutPharmaciesNestedInput = {
    create?: XOR<MedicineCreateWithoutPharmaciesInput, MedicineUncheckedCreateWithoutPharmaciesInput> | MedicineCreateWithoutPharmaciesInput[] | MedicineUncheckedCreateWithoutPharmaciesInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutPharmaciesInput | MedicineCreateOrConnectWithoutPharmaciesInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutPharmaciesInput | MedicineUpsertWithWhereUniqueWithoutPharmaciesInput[]
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutPharmaciesInput | MedicineUpdateWithWhereUniqueWithoutPharmaciesInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutPharmaciesInput | MedicineUpdateManyWithWhereWithoutPharmaciesInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type PrescriptionUncheckedUpdateManyWithoutPharmacyNestedInput = {
    create?: XOR<PrescriptionCreateWithoutPharmacyInput, PrescriptionUncheckedCreateWithoutPharmacyInput> | PrescriptionCreateWithoutPharmacyInput[] | PrescriptionUncheckedCreateWithoutPharmacyInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPharmacyInput | PrescriptionCreateOrConnectWithoutPharmacyInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutPharmacyInput | PrescriptionUpsertWithWhereUniqueWithoutPharmacyInput[]
    createMany?: PrescriptionCreateManyPharmacyInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutPharmacyInput | PrescriptionUpdateWithWhereUniqueWithoutPharmacyInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutPharmacyInput | PrescriptionUpdateManyWithWhereWithoutPharmacyInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type MedicineUncheckedUpdateManyWithoutPharmaciesNestedInput = {
    create?: XOR<MedicineCreateWithoutPharmaciesInput, MedicineUncheckedCreateWithoutPharmaciesInput> | MedicineCreateWithoutPharmaciesInput[] | MedicineUncheckedCreateWithoutPharmaciesInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutPharmaciesInput | MedicineCreateOrConnectWithoutPharmaciesInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutPharmaciesInput | MedicineUpsertWithWhereUniqueWithoutPharmaciesInput[]
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutPharmaciesInput | MedicineUpdateWithWhereUniqueWithoutPharmaciesInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutPharmaciesInput | MedicineUpdateManyWithWhereWithoutPharmaciesInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type PrescriptionCreateNestedManyWithoutPrescription_medicinesInput = {
    create?: XOR<PrescriptionCreateWithoutPrescription_medicinesInput, PrescriptionUncheckedCreateWithoutPrescription_medicinesInput> | PrescriptionCreateWithoutPrescription_medicinesInput[] | PrescriptionUncheckedCreateWithoutPrescription_medicinesInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPrescription_medicinesInput | PrescriptionCreateOrConnectWithoutPrescription_medicinesInput[]
    createMany?: PrescriptionCreateManyPrescription_medicinesInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type PharmacyCreateNestedManyWithoutMedicinesInput = {
    create?: XOR<PharmacyCreateWithoutMedicinesInput, PharmacyUncheckedCreateWithoutMedicinesInput> | PharmacyCreateWithoutMedicinesInput[] | PharmacyUncheckedCreateWithoutMedicinesInput[]
    connectOrCreate?: PharmacyCreateOrConnectWithoutMedicinesInput | PharmacyCreateOrConnectWithoutMedicinesInput[]
    connect?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
  }

  export type PrescriptionUncheckedCreateNestedManyWithoutPrescription_medicinesInput = {
    create?: XOR<PrescriptionCreateWithoutPrescription_medicinesInput, PrescriptionUncheckedCreateWithoutPrescription_medicinesInput> | PrescriptionCreateWithoutPrescription_medicinesInput[] | PrescriptionUncheckedCreateWithoutPrescription_medicinesInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPrescription_medicinesInput | PrescriptionCreateOrConnectWithoutPrescription_medicinesInput[]
    createMany?: PrescriptionCreateManyPrescription_medicinesInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type PharmacyUncheckedCreateNestedManyWithoutMedicinesInput = {
    create?: XOR<PharmacyCreateWithoutMedicinesInput, PharmacyUncheckedCreateWithoutMedicinesInput> | PharmacyCreateWithoutMedicinesInput[] | PharmacyUncheckedCreateWithoutMedicinesInput[]
    connectOrCreate?: PharmacyCreateOrConnectWithoutMedicinesInput | PharmacyCreateOrConnectWithoutMedicinesInput[]
    connect?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PrescriptionUpdateManyWithoutPrescription_medicinesNestedInput = {
    create?: XOR<PrescriptionCreateWithoutPrescription_medicinesInput, PrescriptionUncheckedCreateWithoutPrescription_medicinesInput> | PrescriptionCreateWithoutPrescription_medicinesInput[] | PrescriptionUncheckedCreateWithoutPrescription_medicinesInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPrescription_medicinesInput | PrescriptionCreateOrConnectWithoutPrescription_medicinesInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutPrescription_medicinesInput | PrescriptionUpsertWithWhereUniqueWithoutPrescription_medicinesInput[]
    createMany?: PrescriptionCreateManyPrescription_medicinesInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutPrescription_medicinesInput | PrescriptionUpdateWithWhereUniqueWithoutPrescription_medicinesInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutPrescription_medicinesInput | PrescriptionUpdateManyWithWhereWithoutPrescription_medicinesInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type PharmacyUpdateManyWithoutMedicinesNestedInput = {
    create?: XOR<PharmacyCreateWithoutMedicinesInput, PharmacyUncheckedCreateWithoutMedicinesInput> | PharmacyCreateWithoutMedicinesInput[] | PharmacyUncheckedCreateWithoutMedicinesInput[]
    connectOrCreate?: PharmacyCreateOrConnectWithoutMedicinesInput | PharmacyCreateOrConnectWithoutMedicinesInput[]
    upsert?: PharmacyUpsertWithWhereUniqueWithoutMedicinesInput | PharmacyUpsertWithWhereUniqueWithoutMedicinesInput[]
    set?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
    disconnect?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
    delete?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
    connect?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
    update?: PharmacyUpdateWithWhereUniqueWithoutMedicinesInput | PharmacyUpdateWithWhereUniqueWithoutMedicinesInput[]
    updateMany?: PharmacyUpdateManyWithWhereWithoutMedicinesInput | PharmacyUpdateManyWithWhereWithoutMedicinesInput[]
    deleteMany?: PharmacyScalarWhereInput | PharmacyScalarWhereInput[]
  }

  export type PrescriptionUncheckedUpdateManyWithoutPrescription_medicinesNestedInput = {
    create?: XOR<PrescriptionCreateWithoutPrescription_medicinesInput, PrescriptionUncheckedCreateWithoutPrescription_medicinesInput> | PrescriptionCreateWithoutPrescription_medicinesInput[] | PrescriptionUncheckedCreateWithoutPrescription_medicinesInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPrescription_medicinesInput | PrescriptionCreateOrConnectWithoutPrescription_medicinesInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutPrescription_medicinesInput | PrescriptionUpsertWithWhereUniqueWithoutPrescription_medicinesInput[]
    createMany?: PrescriptionCreateManyPrescription_medicinesInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutPrescription_medicinesInput | PrescriptionUpdateWithWhereUniqueWithoutPrescription_medicinesInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutPrescription_medicinesInput | PrescriptionUpdateManyWithWhereWithoutPrescription_medicinesInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type PharmacyUncheckedUpdateManyWithoutMedicinesNestedInput = {
    create?: XOR<PharmacyCreateWithoutMedicinesInput, PharmacyUncheckedCreateWithoutMedicinesInput> | PharmacyCreateWithoutMedicinesInput[] | PharmacyUncheckedCreateWithoutMedicinesInput[]
    connectOrCreate?: PharmacyCreateOrConnectWithoutMedicinesInput | PharmacyCreateOrConnectWithoutMedicinesInput[]
    upsert?: PharmacyUpsertWithWhereUniqueWithoutMedicinesInput | PharmacyUpsertWithWhereUniqueWithoutMedicinesInput[]
    set?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
    disconnect?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
    delete?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
    connect?: PharmacyWhereUniqueInput | PharmacyWhereUniqueInput[]
    update?: PharmacyUpdateWithWhereUniqueWithoutMedicinesInput | PharmacyUpdateWithWhereUniqueWithoutMedicinesInput[]
    updateMany?: PharmacyUpdateManyWithWhereWithoutMedicinesInput | PharmacyUpdateManyWithWhereWithoutMedicinesInput[]
    deleteMany?: PharmacyScalarWhereInput | PharmacyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    connect?: UserWhereUniqueInput
  }

  export type ReportCreateNestedManyWithoutAdminInput = {
    create?: XOR<ReportCreateWithoutAdminInput, ReportUncheckedCreateWithoutAdminInput> | ReportCreateWithoutAdminInput[] | ReportUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutAdminInput | ReportCreateOrConnectWithoutAdminInput[]
    createMany?: ReportCreateManyAdminInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<ReportCreateWithoutAdminInput, ReportUncheckedCreateWithoutAdminInput> | ReportCreateWithoutAdminInput[] | ReportUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutAdminInput | ReportCreateOrConnectWithoutAdminInput[]
    createMany?: ReportCreateManyAdminInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    upsert?: UserUpsertWithoutAdminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminInput, UserUpdateWithoutAdminInput>, UserUncheckedUpdateWithoutAdminInput>
  }

  export type ReportUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ReportCreateWithoutAdminInput, ReportUncheckedCreateWithoutAdminInput> | ReportCreateWithoutAdminInput[] | ReportUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutAdminInput | ReportCreateOrConnectWithoutAdminInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutAdminInput | ReportUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ReportCreateManyAdminInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutAdminInput | ReportUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutAdminInput | ReportUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ReportCreateWithoutAdminInput, ReportUncheckedCreateWithoutAdminInput> | ReportCreateWithoutAdminInput[] | ReportUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutAdminInput | ReportCreateOrConnectWithoutAdminInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutAdminInput | ReportUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ReportCreateManyAdminInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutAdminInput | ReportUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutAdminInput | ReportUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutPrescriptionsInput = {
    create?: XOR<PatientCreateWithoutPrescriptionsInput, PatientUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPrescriptionsInput
    connect?: PatientWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutPrescriptionsInput = {
    create?: XOR<DoctorCreateWithoutPrescriptionsInput, DoctorUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPrescriptionsInput
    connect?: DoctorWhereUniqueInput
  }

  export type PharmacyCreateNestedOneWithoutPrescriptionsInput = {
    create?: XOR<PharmacyCreateWithoutPrescriptionsInput, PharmacyUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: PharmacyCreateOrConnectWithoutPrescriptionsInput
    connect?: PharmacyWhereUniqueInput
  }

  export type MedicineCreateNestedOneWithoutPrescriptionsInput = {
    create?: XOR<MedicineCreateWithoutPrescriptionsInput, MedicineUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutPrescriptionsInput
    connect?: MedicineWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutPrescriptionsNestedInput = {
    create?: XOR<PatientCreateWithoutPrescriptionsInput, PatientUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPrescriptionsInput
    upsert?: PatientUpsertWithoutPrescriptionsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPrescriptionsInput, PatientUpdateWithoutPrescriptionsInput>, PatientUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type DoctorUpdateOneRequiredWithoutPrescriptionsNestedInput = {
    create?: XOR<DoctorCreateWithoutPrescriptionsInput, DoctorUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPrescriptionsInput
    upsert?: DoctorUpsertWithoutPrescriptionsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutPrescriptionsInput, DoctorUpdateWithoutPrescriptionsInput>, DoctorUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type PharmacyUpdateOneWithoutPrescriptionsNestedInput = {
    create?: XOR<PharmacyCreateWithoutPrescriptionsInput, PharmacyUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: PharmacyCreateOrConnectWithoutPrescriptionsInput
    upsert?: PharmacyUpsertWithoutPrescriptionsInput
    disconnect?: PharmacyWhereInput | boolean
    delete?: PharmacyWhereInput | boolean
    connect?: PharmacyWhereUniqueInput
    update?: XOR<XOR<PharmacyUpdateToOneWithWhereWithoutPrescriptionsInput, PharmacyUpdateWithoutPrescriptionsInput>, PharmacyUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type MedicineUpdateOneWithoutPrescriptionsNestedInput = {
    create?: XOR<MedicineCreateWithoutPrescriptionsInput, MedicineUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutPrescriptionsInput
    upsert?: MedicineUpsertWithoutPrescriptionsInput
    disconnect?: MedicineWhereInput | boolean
    delete?: MedicineWhereInput | boolean
    connect?: MedicineWhereUniqueInput
    update?: XOR<XOR<MedicineUpdateToOneWithWhereWithoutPrescriptionsInput, MedicineUpdateWithoutPrescriptionsInput>, MedicineUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationReadCreateNestedManyWithoutNotificationInput = {
    create?: XOR<NotificationReadCreateWithoutNotificationInput, NotificationReadUncheckedCreateWithoutNotificationInput> | NotificationReadCreateWithoutNotificationInput[] | NotificationReadUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotificationReadCreateOrConnectWithoutNotificationInput | NotificationReadCreateOrConnectWithoutNotificationInput[]
    createMany?: NotificationReadCreateManyNotificationInputEnvelope
    connect?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
  }

  export type NotificationReadUncheckedCreateNestedManyWithoutNotificationInput = {
    create?: XOR<NotificationReadCreateWithoutNotificationInput, NotificationReadUncheckedCreateWithoutNotificationInput> | NotificationReadCreateWithoutNotificationInput[] | NotificationReadUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotificationReadCreateOrConnectWithoutNotificationInput | NotificationReadCreateOrConnectWithoutNotificationInput[]
    createMany?: NotificationReadCreateManyNotificationInputEnvelope
    connect?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type NotificationReadUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<NotificationReadCreateWithoutNotificationInput, NotificationReadUncheckedCreateWithoutNotificationInput> | NotificationReadCreateWithoutNotificationInput[] | NotificationReadUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotificationReadCreateOrConnectWithoutNotificationInput | NotificationReadCreateOrConnectWithoutNotificationInput[]
    upsert?: NotificationReadUpsertWithWhereUniqueWithoutNotificationInput | NotificationReadUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: NotificationReadCreateManyNotificationInputEnvelope
    set?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
    disconnect?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
    delete?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
    connect?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
    update?: NotificationReadUpdateWithWhereUniqueWithoutNotificationInput | NotificationReadUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: NotificationReadUpdateManyWithWhereWithoutNotificationInput | NotificationReadUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: NotificationReadScalarWhereInput | NotificationReadScalarWhereInput[]
  }

  export type NotificationReadUncheckedUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<NotificationReadCreateWithoutNotificationInput, NotificationReadUncheckedCreateWithoutNotificationInput> | NotificationReadCreateWithoutNotificationInput[] | NotificationReadUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotificationReadCreateOrConnectWithoutNotificationInput | NotificationReadCreateOrConnectWithoutNotificationInput[]
    upsert?: NotificationReadUpsertWithWhereUniqueWithoutNotificationInput | NotificationReadUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: NotificationReadCreateManyNotificationInputEnvelope
    set?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
    disconnect?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
    delete?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
    connect?: NotificationReadWhereUniqueInput | NotificationReadWhereUniqueInput[]
    update?: NotificationReadUpdateWithWhereUniqueWithoutNotificationInput | NotificationReadUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: NotificationReadUpdateManyWithWhereWithoutNotificationInput | NotificationReadUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: NotificationReadScalarWhereInput | NotificationReadScalarWhereInput[]
  }

  export type NotificationCreateNestedOneWithoutReadByInput = {
    create?: XOR<NotificationCreateWithoutReadByInput, NotificationUncheckedCreateWithoutReadByInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutReadByInput
    connect?: NotificationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNotificationReadsInput = {
    create?: XOR<UserCreateWithoutNotificationReadsInput, UserUncheckedCreateWithoutNotificationReadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationReadsInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationUpdateOneRequiredWithoutReadByNestedInput = {
    create?: XOR<NotificationCreateWithoutReadByInput, NotificationUncheckedCreateWithoutReadByInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutReadByInput
    upsert?: NotificationUpsertWithoutReadByInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutReadByInput, NotificationUpdateWithoutReadByInput>, NotificationUncheckedUpdateWithoutReadByInput>
  }

  export type UserUpdateOneRequiredWithoutNotificationReadsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationReadsInput, UserUncheckedCreateWithoutNotificationReadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationReadsInput
    upsert?: UserUpsertWithoutNotificationReadsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationReadsInput, UserUpdateWithoutNotificationReadsInput>, UserUncheckedUpdateWithoutNotificationReadsInput>
  }

  export type PatientCreateNestedOneWithoutMedicalRecordInput = {
    create?: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalRecordInput
    connect?: PatientWhereUniqueInput
  }

  export type NurseCreateNestedManyWithoutMedicalRecordsInput = {
    create?: XOR<NurseCreateWithoutMedicalRecordsInput, NurseUncheckedCreateWithoutMedicalRecordsInput> | NurseCreateWithoutMedicalRecordsInput[] | NurseUncheckedCreateWithoutMedicalRecordsInput[]
    connectOrCreate?: NurseCreateOrConnectWithoutMedicalRecordsInput | NurseCreateOrConnectWithoutMedicalRecordsInput[]
    connect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
  }

  export type DoctorCreateNestedManyWithoutMedicalRecordsInput = {
    create?: XOR<DoctorCreateWithoutMedicalRecordsInput, DoctorUncheckedCreateWithoutMedicalRecordsInput> | DoctorCreateWithoutMedicalRecordsInput[] | DoctorUncheckedCreateWithoutMedicalRecordsInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalRecordsInput | DoctorCreateOrConnectWithoutMedicalRecordsInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type NurseUncheckedCreateNestedManyWithoutMedicalRecordsInput = {
    create?: XOR<NurseCreateWithoutMedicalRecordsInput, NurseUncheckedCreateWithoutMedicalRecordsInput> | NurseCreateWithoutMedicalRecordsInput[] | NurseUncheckedCreateWithoutMedicalRecordsInput[]
    connectOrCreate?: NurseCreateOrConnectWithoutMedicalRecordsInput | NurseCreateOrConnectWithoutMedicalRecordsInput[]
    connect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
  }

  export type DoctorUncheckedCreateNestedManyWithoutMedicalRecordsInput = {
    create?: XOR<DoctorCreateWithoutMedicalRecordsInput, DoctorUncheckedCreateWithoutMedicalRecordsInput> | DoctorCreateWithoutMedicalRecordsInput[] | DoctorUncheckedCreateWithoutMedicalRecordsInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalRecordsInput | DoctorCreateOrConnectWithoutMedicalRecordsInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type PatientUpdateOneRequiredWithoutMedicalRecordNestedInput = {
    create?: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalRecordInput
    upsert?: PatientUpsertWithoutMedicalRecordInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMedicalRecordInput, PatientUpdateWithoutMedicalRecordInput>, PatientUncheckedUpdateWithoutMedicalRecordInput>
  }

  export type NurseUpdateManyWithoutMedicalRecordsNestedInput = {
    create?: XOR<NurseCreateWithoutMedicalRecordsInput, NurseUncheckedCreateWithoutMedicalRecordsInput> | NurseCreateWithoutMedicalRecordsInput[] | NurseUncheckedCreateWithoutMedicalRecordsInput[]
    connectOrCreate?: NurseCreateOrConnectWithoutMedicalRecordsInput | NurseCreateOrConnectWithoutMedicalRecordsInput[]
    upsert?: NurseUpsertWithWhereUniqueWithoutMedicalRecordsInput | NurseUpsertWithWhereUniqueWithoutMedicalRecordsInput[]
    set?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    disconnect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    delete?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    connect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    update?: NurseUpdateWithWhereUniqueWithoutMedicalRecordsInput | NurseUpdateWithWhereUniqueWithoutMedicalRecordsInput[]
    updateMany?: NurseUpdateManyWithWhereWithoutMedicalRecordsInput | NurseUpdateManyWithWhereWithoutMedicalRecordsInput[]
    deleteMany?: NurseScalarWhereInput | NurseScalarWhereInput[]
  }

  export type DoctorUpdateManyWithoutMedicalRecordsNestedInput = {
    create?: XOR<DoctorCreateWithoutMedicalRecordsInput, DoctorUncheckedCreateWithoutMedicalRecordsInput> | DoctorCreateWithoutMedicalRecordsInput[] | DoctorUncheckedCreateWithoutMedicalRecordsInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalRecordsInput | DoctorCreateOrConnectWithoutMedicalRecordsInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutMedicalRecordsInput | DoctorUpsertWithWhereUniqueWithoutMedicalRecordsInput[]
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutMedicalRecordsInput | DoctorUpdateWithWhereUniqueWithoutMedicalRecordsInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutMedicalRecordsInput | DoctorUpdateManyWithWhereWithoutMedicalRecordsInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type NurseUncheckedUpdateManyWithoutMedicalRecordsNestedInput = {
    create?: XOR<NurseCreateWithoutMedicalRecordsInput, NurseUncheckedCreateWithoutMedicalRecordsInput> | NurseCreateWithoutMedicalRecordsInput[] | NurseUncheckedCreateWithoutMedicalRecordsInput[]
    connectOrCreate?: NurseCreateOrConnectWithoutMedicalRecordsInput | NurseCreateOrConnectWithoutMedicalRecordsInput[]
    upsert?: NurseUpsertWithWhereUniqueWithoutMedicalRecordsInput | NurseUpsertWithWhereUniqueWithoutMedicalRecordsInput[]
    set?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    disconnect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    delete?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    connect?: NurseWhereUniqueInput | NurseWhereUniqueInput[]
    update?: NurseUpdateWithWhereUniqueWithoutMedicalRecordsInput | NurseUpdateWithWhereUniqueWithoutMedicalRecordsInput[]
    updateMany?: NurseUpdateManyWithWhereWithoutMedicalRecordsInput | NurseUpdateManyWithWhereWithoutMedicalRecordsInput[]
    deleteMany?: NurseScalarWhereInput | NurseScalarWhereInput[]
  }

  export type DoctorUncheckedUpdateManyWithoutMedicalRecordsNestedInput = {
    create?: XOR<DoctorCreateWithoutMedicalRecordsInput, DoctorUncheckedCreateWithoutMedicalRecordsInput> | DoctorCreateWithoutMedicalRecordsInput[] | DoctorUncheckedCreateWithoutMedicalRecordsInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalRecordsInput | DoctorCreateOrConnectWithoutMedicalRecordsInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutMedicalRecordsInput | DoctorUpsertWithWhereUniqueWithoutMedicalRecordsInput[]
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutMedicalRecordsInput | DoctorUpdateWithWhereUniqueWithoutMedicalRecordsInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutMedicalRecordsInput | DoctorUpdateManyWithWhereWithoutMedicalRecordsInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type AdminCreateNestedOneWithoutReportsInput = {
    create?: XOR<AdminCreateWithoutReportsInput, AdminUncheckedCreateWithoutReportsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutReportsInput
    connect?: AdminWhereUniqueInput
  }

  export type AdminUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<AdminCreateWithoutReportsInput, AdminUncheckedCreateWithoutReportsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutReportsInput
    upsert?: AdminUpsertWithoutReportsInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutReportsInput, AdminUpdateWithoutReportsInput>, AdminUncheckedUpdateWithoutReportsInput>
  }

  export type NurseCreateNestedOneWithoutNurseVisitsInput = {
    create?: XOR<NurseCreateWithoutNurseVisitsInput, NurseUncheckedCreateWithoutNurseVisitsInput>
    connectOrCreate?: NurseCreateOrConnectWithoutNurseVisitsInput
    connect?: NurseWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutNurseVisitsInput = {
    create?: XOR<PatientCreateWithoutNurseVisitsInput, PatientUncheckedCreateWithoutNurseVisitsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNurseVisitsInput
    connect?: PatientWhereUniqueInput
  }

  export type NurseUpdateOneRequiredWithoutNurseVisitsNestedInput = {
    create?: XOR<NurseCreateWithoutNurseVisitsInput, NurseUncheckedCreateWithoutNurseVisitsInput>
    connectOrCreate?: NurseCreateOrConnectWithoutNurseVisitsInput
    upsert?: NurseUpsertWithoutNurseVisitsInput
    connect?: NurseWhereUniqueInput
    update?: XOR<XOR<NurseUpdateToOneWithWhereWithoutNurseVisitsInput, NurseUpdateWithoutNurseVisitsInput>, NurseUncheckedUpdateWithoutNurseVisitsInput>
  }

  export type PatientUpdateOneRequiredWithoutNurseVisitsNestedInput = {
    create?: XOR<PatientCreateWithoutNurseVisitsInput, PatientUncheckedCreateWithoutNurseVisitsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNurseVisitsInput
    upsert?: PatientUpsertWithoutNurseVisitsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutNurseVisitsInput, PatientUpdateWithoutNurseVisitsInput>, PatientUncheckedUpdateWithoutNurseVisitsInput>
  }

  export type PatientCreateNestedOneWithoutChatRoomsInput = {
    create?: XOR<PatientCreateWithoutChatRoomsInput, PatientUncheckedCreateWithoutChatRoomsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutChatRoomsInput
    connect?: PatientWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutChatRoomsInput = {
    create?: XOR<DoctorCreateWithoutChatRoomsInput, DoctorUncheckedCreateWithoutChatRoomsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutChatRoomsInput
    connect?: DoctorWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput> | MessageCreateWithoutChatRoomInput[] | MessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomInput | MessageCreateOrConnectWithoutChatRoomInput[]
    createMany?: MessageCreateManyChatRoomInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput> | MessageCreateWithoutChatRoomInput[] | MessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomInput | MessageCreateOrConnectWithoutChatRoomInput[]
    createMany?: MessageCreateManyChatRoomInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type PatientUpdateOneRequiredWithoutChatRoomsNestedInput = {
    create?: XOR<PatientCreateWithoutChatRoomsInput, PatientUncheckedCreateWithoutChatRoomsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutChatRoomsInput
    upsert?: PatientUpsertWithoutChatRoomsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutChatRoomsInput, PatientUpdateWithoutChatRoomsInput>, PatientUncheckedUpdateWithoutChatRoomsInput>
  }

  export type DoctorUpdateOneRequiredWithoutChatRoomsNestedInput = {
    create?: XOR<DoctorCreateWithoutChatRoomsInput, DoctorUncheckedCreateWithoutChatRoomsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutChatRoomsInput
    upsert?: DoctorUpsertWithoutChatRoomsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutChatRoomsInput, DoctorUpdateWithoutChatRoomsInput>, DoctorUncheckedUpdateWithoutChatRoomsInput>
  }

  export type MessageUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput> | MessageCreateWithoutChatRoomInput[] | MessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomInput | MessageCreateOrConnectWithoutChatRoomInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomInput | MessageUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: MessageCreateManyChatRoomInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatRoomInput | MessageUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatRoomInput | MessageUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput> | MessageCreateWithoutChatRoomInput[] | MessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomInput | MessageCreateOrConnectWithoutChatRoomInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomInput | MessageUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: MessageCreateManyChatRoomInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatRoomInput | MessageUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatRoomInput | MessageUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NurseCreateNestedOneWithoutNurseChatsInput = {
    create?: XOR<NurseCreateWithoutNurseChatsInput, NurseUncheckedCreateWithoutNurseChatsInput>
    connectOrCreate?: NurseCreateOrConnectWithoutNurseChatsInput
    connect?: NurseWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutChatRoomPatientsInput = {
    create?: XOR<PatientCreateWithoutChatRoomPatientsInput, PatientUncheckedCreateWithoutChatRoomPatientsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutChatRoomPatientsInput
    connect?: PatientWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutChatRoomPatientNurseInput = {
    create?: XOR<MessageCreateWithoutChatRoomPatientNurseInput, MessageUncheckedCreateWithoutChatRoomPatientNurseInput> | MessageCreateWithoutChatRoomPatientNurseInput[] | MessageUncheckedCreateWithoutChatRoomPatientNurseInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomPatientNurseInput | MessageCreateOrConnectWithoutChatRoomPatientNurseInput[]
    createMany?: MessageCreateManyChatRoomPatientNurseInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChatRoomPatientNurseInput = {
    create?: XOR<MessageCreateWithoutChatRoomPatientNurseInput, MessageUncheckedCreateWithoutChatRoomPatientNurseInput> | MessageCreateWithoutChatRoomPatientNurseInput[] | MessageUncheckedCreateWithoutChatRoomPatientNurseInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomPatientNurseInput | MessageCreateOrConnectWithoutChatRoomPatientNurseInput[]
    createMany?: MessageCreateManyChatRoomPatientNurseInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NurseUpdateOneRequiredWithoutNurseChatsNestedInput = {
    create?: XOR<NurseCreateWithoutNurseChatsInput, NurseUncheckedCreateWithoutNurseChatsInput>
    connectOrCreate?: NurseCreateOrConnectWithoutNurseChatsInput
    upsert?: NurseUpsertWithoutNurseChatsInput
    connect?: NurseWhereUniqueInput
    update?: XOR<XOR<NurseUpdateToOneWithWhereWithoutNurseChatsInput, NurseUpdateWithoutNurseChatsInput>, NurseUncheckedUpdateWithoutNurseChatsInput>
  }

  export type PatientUpdateOneRequiredWithoutChatRoomPatientsNestedInput = {
    create?: XOR<PatientCreateWithoutChatRoomPatientsInput, PatientUncheckedCreateWithoutChatRoomPatientsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutChatRoomPatientsInput
    upsert?: PatientUpsertWithoutChatRoomPatientsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutChatRoomPatientsInput, PatientUpdateWithoutChatRoomPatientsInput>, PatientUncheckedUpdateWithoutChatRoomPatientsInput>
  }

  export type MessageUpdateManyWithoutChatRoomPatientNurseNestedInput = {
    create?: XOR<MessageCreateWithoutChatRoomPatientNurseInput, MessageUncheckedCreateWithoutChatRoomPatientNurseInput> | MessageCreateWithoutChatRoomPatientNurseInput[] | MessageUncheckedCreateWithoutChatRoomPatientNurseInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomPatientNurseInput | MessageCreateOrConnectWithoutChatRoomPatientNurseInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomPatientNurseInput | MessageUpsertWithWhereUniqueWithoutChatRoomPatientNurseInput[]
    createMany?: MessageCreateManyChatRoomPatientNurseInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatRoomPatientNurseInput | MessageUpdateWithWhereUniqueWithoutChatRoomPatientNurseInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatRoomPatientNurseInput | MessageUpdateManyWithWhereWithoutChatRoomPatientNurseInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChatRoomPatientNurseNestedInput = {
    create?: XOR<MessageCreateWithoutChatRoomPatientNurseInput, MessageUncheckedCreateWithoutChatRoomPatientNurseInput> | MessageCreateWithoutChatRoomPatientNurseInput[] | MessageUncheckedCreateWithoutChatRoomPatientNurseInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomPatientNurseInput | MessageCreateOrConnectWithoutChatRoomPatientNurseInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomPatientNurseInput | MessageUpsertWithWhereUniqueWithoutChatRoomPatientNurseInput[]
    createMany?: MessageCreateManyChatRoomPatientNurseInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatRoomPatientNurseInput | MessageUpdateWithWhereUniqueWithoutChatRoomPatientNurseInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatRoomPatientNurseInput | MessageUpdateManyWithWhereWithoutChatRoomPatientNurseInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutChatRoomDoctorNursePatientInput = {
    create?: XOR<DoctorCreateWithoutChatRoomDoctorNursePatientInput, DoctorUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutChatRoomDoctorNursePatientInput
    connect?: DoctorWhereUniqueInput
  }

  export type NurseCreateNestedOneWithoutChatRoomDoctorNursePatientInput = {
    create?: XOR<NurseCreateWithoutChatRoomDoctorNursePatientInput, NurseUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
    connectOrCreate?: NurseCreateOrConnectWithoutChatRoomDoctorNursePatientInput
    connect?: NurseWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutChatRoomDoctorNursePatientInput = {
    create?: XOR<PatientCreateWithoutChatRoomDoctorNursePatientInput, PatientUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
    connectOrCreate?: PatientCreateOrConnectWithoutChatRoomDoctorNursePatientInput
    connect?: PatientWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutChatRoomDoctorNursePatientInput = {
    create?: XOR<MessageCreateWithoutChatRoomDoctorNursePatientInput, MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput> | MessageCreateWithoutChatRoomDoctorNursePatientInput[] | MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomDoctorNursePatientInput | MessageCreateOrConnectWithoutChatRoomDoctorNursePatientInput[]
    createMany?: MessageCreateManyChatRoomDoctorNursePatientInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChatRoomDoctorNursePatientInput = {
    create?: XOR<MessageCreateWithoutChatRoomDoctorNursePatientInput, MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput> | MessageCreateWithoutChatRoomDoctorNursePatientInput[] | MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomDoctorNursePatientInput | MessageCreateOrConnectWithoutChatRoomDoctorNursePatientInput[]
    createMany?: MessageCreateManyChatRoomDoctorNursePatientInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type DoctorUpdateOneWithoutChatRoomDoctorNursePatientNestedInput = {
    create?: XOR<DoctorCreateWithoutChatRoomDoctorNursePatientInput, DoctorUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutChatRoomDoctorNursePatientInput
    upsert?: DoctorUpsertWithoutChatRoomDoctorNursePatientInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutChatRoomDoctorNursePatientInput, DoctorUpdateWithoutChatRoomDoctorNursePatientInput>, DoctorUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
  }

  export type NurseUpdateOneWithoutChatRoomDoctorNursePatientNestedInput = {
    create?: XOR<NurseCreateWithoutChatRoomDoctorNursePatientInput, NurseUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
    connectOrCreate?: NurseCreateOrConnectWithoutChatRoomDoctorNursePatientInput
    upsert?: NurseUpsertWithoutChatRoomDoctorNursePatientInput
    disconnect?: NurseWhereInput | boolean
    delete?: NurseWhereInput | boolean
    connect?: NurseWhereUniqueInput
    update?: XOR<XOR<NurseUpdateToOneWithWhereWithoutChatRoomDoctorNursePatientInput, NurseUpdateWithoutChatRoomDoctorNursePatientInput>, NurseUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
  }

  export type PatientUpdateOneWithoutChatRoomDoctorNursePatientNestedInput = {
    create?: XOR<PatientCreateWithoutChatRoomDoctorNursePatientInput, PatientUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
    connectOrCreate?: PatientCreateOrConnectWithoutChatRoomDoctorNursePatientInput
    upsert?: PatientUpsertWithoutChatRoomDoctorNursePatientInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutChatRoomDoctorNursePatientInput, PatientUpdateWithoutChatRoomDoctorNursePatientInput>, PatientUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
  }

  export type MessageUpdateManyWithoutChatRoomDoctorNursePatientNestedInput = {
    create?: XOR<MessageCreateWithoutChatRoomDoctorNursePatientInput, MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput> | MessageCreateWithoutChatRoomDoctorNursePatientInput[] | MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomDoctorNursePatientInput | MessageCreateOrConnectWithoutChatRoomDoctorNursePatientInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomDoctorNursePatientInput | MessageUpsertWithWhereUniqueWithoutChatRoomDoctorNursePatientInput[]
    createMany?: MessageCreateManyChatRoomDoctorNursePatientInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatRoomDoctorNursePatientInput | MessageUpdateWithWhereUniqueWithoutChatRoomDoctorNursePatientInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatRoomDoctorNursePatientInput | MessageUpdateManyWithWhereWithoutChatRoomDoctorNursePatientInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChatRoomDoctorNursePatientNestedInput = {
    create?: XOR<MessageCreateWithoutChatRoomDoctorNursePatientInput, MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput> | MessageCreateWithoutChatRoomDoctorNursePatientInput[] | MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomDoctorNursePatientInput | MessageCreateOrConnectWithoutChatRoomDoctorNursePatientInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomDoctorNursePatientInput | MessageUpsertWithWhereUniqueWithoutChatRoomDoctorNursePatientInput[]
    createMany?: MessageCreateManyChatRoomDoctorNursePatientInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatRoomDoctorNursePatientInput | MessageUpdateWithWhereUniqueWithoutChatRoomDoctorNursePatientInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatRoomDoctorNursePatientInput | MessageUpdateManyWithWhereWithoutChatRoomDoctorNursePatientInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChatRoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type ChatRoomPatientNurseCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutMessagesInput, ChatRoomPatientNurseUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutMessagesInput
    connect?: ChatRoomPatientNurseWhereUniqueInput
  }

  export type ChatRoomDoctorNursePatientCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutMessagesInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutMessagesInput
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput
  }

  export type ChatRoomUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    upsert?: ChatRoomUpsertWithoutMessagesInput
    disconnect?: ChatRoomWhereInput | boolean
    delete?: ChatRoomWhereInput | boolean
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutMessagesInput, ChatRoomUpdateWithoutMessagesInput>, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomPatientNurseUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<ChatRoomPatientNurseCreateWithoutMessagesInput, ChatRoomPatientNurseUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomPatientNurseCreateOrConnectWithoutMessagesInput
    upsert?: ChatRoomPatientNurseUpsertWithoutMessagesInput
    disconnect?: ChatRoomPatientNurseWhereInput | boolean
    delete?: ChatRoomPatientNurseWhereInput | boolean
    connect?: ChatRoomPatientNurseWhereUniqueInput
    update?: XOR<XOR<ChatRoomPatientNurseUpdateToOneWithWhereWithoutMessagesInput, ChatRoomPatientNurseUpdateWithoutMessagesInput>, ChatRoomPatientNurseUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomDoctorNursePatientUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<ChatRoomDoctorNursePatientCreateWithoutMessagesInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomDoctorNursePatientCreateOrConnectWithoutMessagesInput
    upsert?: ChatRoomDoctorNursePatientUpsertWithoutMessagesInput
    disconnect?: ChatRoomDoctorNursePatientWhereInput | boolean
    delete?: ChatRoomDoctorNursePatientWhereInput | boolean
    connect?: ChatRoomDoctorNursePatientWhereUniqueInput
    update?: XOR<XOR<ChatRoomDoctorNursePatientUpdateToOneWithWhereWithoutMessagesInput, ChatRoomDoctorNursePatientUpdateWithoutMessagesInput>, ChatRoomDoctorNursePatientUncheckedUpdateWithoutMessagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedEnumServiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceStatus | EnumServiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceStatus[] | ListEnumServiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceStatus[] | ListEnumServiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceStatusFilter<$PrismaModel> | $Enums.ServiceStatus
  }

  export type NestedEnumServiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceStatus | EnumServiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceStatus[] | ListEnumServiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceStatus[] | ListEnumServiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.ServiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceStatusFilter<$PrismaModel>
    _max?: NestedEnumServiceStatusFilter<$PrismaModel>
  }

  export type NestedEnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PatientCreateWithoutUserInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutUserInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutUserInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type NurseCreateWithoutUserInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutUserInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutUserInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutUserInput, NurseUncheckedCreateWithoutUserInput>
  }

  export type DoctorCreateWithoutUserInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutUserInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutUserInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
  }

  export type PharmacyCreateWithoutUserInput = {
    id?: string
    pharmacyName?: string | null
    pharmacyLicenseNumber?: string | null
    pharmacyAddress?: string | null
    contactName?: string | null
    openingHours?: string | null
    deliveryOptions?: string | null
    prescriptions?: PrescriptionCreateNestedManyWithoutPharmacyInput
    medicines?: MedicineCreateNestedManyWithoutPharmaciesInput
  }

  export type PharmacyUncheckedCreateWithoutUserInput = {
    id?: string
    pharmacyName?: string | null
    pharmacyLicenseNumber?: string | null
    pharmacyAddress?: string | null
    contactName?: string | null
    openingHours?: string | null
    deliveryOptions?: string | null
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPharmacyInput
    medicines?: MedicineUncheckedCreateNestedManyWithoutPharmaciesInput
  }

  export type PharmacyCreateOrConnectWithoutUserInput = {
    where: PharmacyWhereUniqueInput
    create: XOR<PharmacyCreateWithoutUserInput, PharmacyUncheckedCreateWithoutUserInput>
  }

  export type AdminCreateWithoutUserInput = {
    id?: string
    reports?: ReportCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutUserInput = {
    id?: string
    reports?: ReportUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    message: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    readBy?: NotificationReadCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    message: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    readBy?: NotificationReadUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationReadCreateWithoutUserInput = {
    id?: string
    readAt?: Date | string
    notification: NotificationCreateNestedOneWithoutReadByInput
  }

  export type NotificationReadUncheckedCreateWithoutUserInput = {
    id?: string
    notificationId: string
    readAt?: Date | string
  }

  export type NotificationReadCreateOrConnectWithoutUserInput = {
    where: NotificationReadWhereUniqueInput
    create: XOR<NotificationReadCreateWithoutUserInput, NotificationReadUncheckedCreateWithoutUserInput>
  }

  export type PatientUpsertWithoutUserInput = {
    update: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutUserInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
  }

  export type PatientUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type NurseUpsertWithoutUserInput = {
    update: XOR<NurseUpdateWithoutUserInput, NurseUncheckedUpdateWithoutUserInput>
    create: XOR<NurseCreateWithoutUserInput, NurseUncheckedCreateWithoutUserInput>
    where?: NurseWhereInput
  }

  export type NurseUpdateToOneWithWhereWithoutUserInput = {
    where?: NurseWhereInput
    data: XOR<NurseUpdateWithoutUserInput, NurseUncheckedUpdateWithoutUserInput>
  }

  export type NurseUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type DoctorUpsertWithoutUserInput = {
    update: XOR<DoctorUpdateWithoutUserInput, DoctorUncheckedUpdateWithoutUserInput>
    create: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutUserInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutUserInput, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type PharmacyUpsertWithoutUserInput = {
    update: XOR<PharmacyUpdateWithoutUserInput, PharmacyUncheckedUpdateWithoutUserInput>
    create: XOR<PharmacyCreateWithoutUserInput, PharmacyUncheckedCreateWithoutUserInput>
    where?: PharmacyWhereInput
  }

  export type PharmacyUpdateToOneWithWhereWithoutUserInput = {
    where?: PharmacyWhereInput
    data: XOR<PharmacyUpdateWithoutUserInput, PharmacyUncheckedUpdateWithoutUserInput>
  }

  export type PharmacyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
    prescriptions?: PrescriptionUpdateManyWithoutPharmacyNestedInput
    medicines?: MedicineUpdateManyWithoutPharmaciesNestedInput
  }

  export type PharmacyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPharmacyNestedInput
    medicines?: MedicineUncheckedUpdateManyWithoutPharmaciesNestedInput
  }

  export type AdminUpsertWithoutUserInput = {
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reports?: ReportUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reports?: ReportUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type NotificationUpsertWithoutUserInput = {
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutUserInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readBy?: NotificationReadUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readBy?: NotificationReadUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationReadUpsertWithoutUserInput = {
    update: XOR<NotificationReadUpdateWithoutUserInput, NotificationReadUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationReadCreateWithoutUserInput, NotificationReadUncheckedCreateWithoutUserInput>
    where?: NotificationReadWhereInput
  }

  export type NotificationReadUpdateToOneWithWhereWithoutUserInput = {
    where?: NotificationReadWhereInput
    data: XOR<NotificationReadUpdateWithoutUserInput, NotificationReadUncheckedUpdateWithoutUserInput>
  }

  export type NotificationReadUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notification?: NotificationUpdateOneRequiredWithoutReadByNestedInput
  }

  export type NotificationReadUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPatientInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    nurse?: NurseCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    nurse?: NurseUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
  }

  export type MedicalRecordCreateWithoutPatientInput = {
    id?: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nurses?: NurseCreateNestedManyWithoutMedicalRecordsInput
    doctors?: DoctorCreateNestedManyWithoutMedicalRecordsInput
  }

  export type MedicalRecordUncheckedCreateWithoutPatientInput = {
    id?: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nurses?: NurseUncheckedCreateNestedManyWithoutMedicalRecordsInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutMedicalRecordsInput
  }

  export type MedicalRecordCreateOrConnectWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput>
  }

  export type MedicalRecordCreateManyPatientInputEnvelope = {
    data: MedicalRecordCreateManyPatientInput | MedicalRecordCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PrescriptionCreateWithoutPatientInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    doctor: DoctorCreateNestedOneWithoutPrescriptionsInput
    pharmacy?: PharmacyCreateNestedOneWithoutPrescriptionsInput
    prescription_medicines?: MedicineCreateNestedOneWithoutPrescriptionsInput
  }

  export type PrescriptionUncheckedCreateWithoutPatientInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    doctorId: string
    medicines_id?: string | null
    pharmacyId?: string | null
  }

  export type PrescriptionCreateOrConnectWithoutPatientInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput>
  }

  export type PrescriptionCreateManyPatientInputEnvelope = {
    data: PrescriptionCreateManyPatientInput | PrescriptionCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type NurseVisitCreateWithoutPatientInput = {
    id?: string
    date?: Date | string
    notes?: string | null
    nurse: NurseCreateNestedOneWithoutNurseVisitsInput
  }

  export type NurseVisitUncheckedCreateWithoutPatientInput = {
    id?: string
    date?: Date | string
    notes?: string | null
    nurseId: string
  }

  export type NurseVisitCreateOrConnectWithoutPatientInput = {
    where: NurseVisitWhereUniqueInput
    create: XOR<NurseVisitCreateWithoutPatientInput, NurseVisitUncheckedCreateWithoutPatientInput>
  }

  export type NurseVisitCreateManyPatientInputEnvelope = {
    data: NurseVisitCreateManyPatientInput | NurseVisitCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type DoctorPatientRequestCreateWithoutPatientInput = {
    id?: string
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    message?: string | null
    doctor: DoctorCreateNestedOneWithoutPatientRequestsInput
  }

  export type DoctorPatientRequestUncheckedCreateWithoutPatientInput = {
    id?: string
    doctorId: string
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    message?: string | null
  }

  export type DoctorPatientRequestCreateOrConnectWithoutPatientInput = {
    where: DoctorPatientRequestWhereUniqueInput
    create: XOR<DoctorPatientRequestCreateWithoutPatientInput, DoctorPatientRequestUncheckedCreateWithoutPatientInput>
  }

  export type DoctorPatientRequestCreateManyPatientInputEnvelope = {
    data: DoctorPatientRequestCreateManyPatientInput | DoctorPatientRequestCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type DoctorPatientCreateWithoutPatientInput = {
    id?: string
    startDate?: Date | string
    endDate?: Date | string | null
    active?: boolean
    doctor: DoctorCreateNestedOneWithoutPatientsInput
  }

  export type DoctorPatientUncheckedCreateWithoutPatientInput = {
    id?: string
    doctorId: string
    startDate?: Date | string
    endDate?: Date | string | null
    active?: boolean
  }

  export type DoctorPatientCreateOrConnectWithoutPatientInput = {
    where: DoctorPatientWhereUniqueInput
    create: XOR<DoctorPatientCreateWithoutPatientInput, DoctorPatientUncheckedCreateWithoutPatientInput>
  }

  export type DoctorPatientCreateManyPatientInputEnvelope = {
    data: DoctorPatientCreateManyPatientInput | DoctorPatientCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type NurseServiceRequestCreateWithoutPatientInput = {
    id?: string
    status?: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date | string
    urgency: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    feedback?: string | null
    nurse?: NurseCreateNestedOneWithoutServiceRequestsInput
  }

  export type NurseServiceRequestUncheckedCreateWithoutPatientInput = {
    id?: string
    nurseId?: string | null
    status?: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date | string
    urgency: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type NurseServiceRequestCreateOrConnectWithoutPatientInput = {
    where: NurseServiceRequestWhereUniqueInput
    create: XOR<NurseServiceRequestCreateWithoutPatientInput, NurseServiceRequestUncheckedCreateWithoutPatientInput>
  }

  export type NurseServiceRequestCreateManyPatientInputEnvelope = {
    data: NurseServiceRequestCreateManyPatientInput | NurseServiceRequestCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomCreateWithoutPatientInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutChatRoomsInput
    messages?: MessageCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutPatientInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId: string
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutPatientInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutPatientInput, ChatRoomUncheckedCreateWithoutPatientInput>
  }

  export type ChatRoomCreateManyPatientInputEnvelope = {
    data: ChatRoomCreateManyPatientInput | ChatRoomCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutPatientInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: DoctorCreateNestedOneWithoutScheduledTasksInput
    nurse?: NurseCreateNestedOneWithoutScheduledTasksInput
    task?: TaskCreateNestedOneWithoutScheduledTasksInput
  }

  export type ScheduleUncheckedCreateWithoutPatientInput = {
    id?: string
    doctorId?: string | null
    nurseId?: string | null
    taskId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutPatientInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutPatientInput, ScheduleUncheckedCreateWithoutPatientInput>
  }

  export type ScheduleCreateManyPatientInputEnvelope = {
    data: ScheduleCreateManyPatientInput | ScheduleCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomDoctorNursePatientCreateWithoutPatientInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: DoctorCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    nurse?: NurseCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    messages?: MessageCreateNestedManyWithoutChatRoomDoctorNursePatientInput
  }

  export type ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: string | null
    nurseId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomDoctorNursePatientInput
  }

  export type ChatRoomDoctorNursePatientCreateOrConnectWithoutPatientInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    create: XOR<ChatRoomDoctorNursePatientCreateWithoutPatientInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput>
  }

  export type ChatRoomDoctorNursePatientCreateManyPatientInputEnvelope = {
    data: ChatRoomDoctorNursePatientCreateManyPatientInput | ChatRoomDoctorNursePatientCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomPatientNurseCreateWithoutPatientInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurse: NurseCreateNestedOneWithoutNurseChatsInput
    messages?: MessageCreateNestedManyWithoutChatRoomPatientNurseInput
  }

  export type ChatRoomPatientNurseUncheckedCreateWithoutPatientInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurseId: string
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomPatientNurseInput
  }

  export type ChatRoomPatientNurseCreateOrConnectWithoutPatientInput = {
    where: ChatRoomPatientNurseWhereUniqueInput
    create: XOR<ChatRoomPatientNurseCreateWithoutPatientInput, ChatRoomPatientNurseUncheckedCreateWithoutPatientInput>
  }

  export type ChatRoomPatientNurseCreateManyPatientInputEnvelope = {
    data: ChatRoomPatientNurseCreateManyPatientInput | ChatRoomPatientNurseCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatientInput = {
    update: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
  }

  export type UserUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nurse?: NurseUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nurse?: NurseUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUncheckedUpdateOneWithoutUserNestedInput
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutPatientInput, MedicalRecordUncheckedUpdateWithoutPatientInput>
    create: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutPatientInput, MedicalRecordUncheckedUpdateWithoutPatientInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutPatientInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutPatientInput>
  }

  export type MedicalRecordScalarWhereInput = {
    AND?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
    OR?: MedicalRecordScalarWhereInput[]
    NOT?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
    id?: StringFilter<"MedicalRecord"> | string
    patientId?: StringFilter<"MedicalRecord"> | string
    diagnosis?: StringFilter<"MedicalRecord"> | string
    treatment?: StringFilter<"MedicalRecord"> | string
    notes?: StringNullableFilter<"MedicalRecord"> | string | null
    createdAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalRecord"> | Date | string
  }

  export type PrescriptionUpsertWithWhereUniqueWithoutPatientInput = {
    where: PrescriptionWhereUniqueInput
    update: XOR<PrescriptionUpdateWithoutPatientInput, PrescriptionUncheckedUpdateWithoutPatientInput>
    create: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput>
  }

  export type PrescriptionUpdateWithWhereUniqueWithoutPatientInput = {
    where: PrescriptionWhereUniqueInput
    data: XOR<PrescriptionUpdateWithoutPatientInput, PrescriptionUncheckedUpdateWithoutPatientInput>
  }

  export type PrescriptionUpdateManyWithWhereWithoutPatientInput = {
    where: PrescriptionScalarWhereInput
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyWithoutPatientInput>
  }

  export type PrescriptionScalarWhereInput = {
    AND?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
    OR?: PrescriptionScalarWhereInput[]
    NOT?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
    id?: StringFilter<"Prescription"> | string
    date?: DateTimeFilter<"Prescription"> | Date | string
    details?: StringFilter<"Prescription"> | string
    approved?: BoolFilter<"Prescription"> | boolean
    patientId?: StringFilter<"Prescription"> | string
    doctorId?: StringFilter<"Prescription"> | string
    medicines_id?: StringNullableFilter<"Prescription"> | string | null
    pharmacyId?: StringNullableFilter<"Prescription"> | string | null
  }

  export type NurseVisitUpsertWithWhereUniqueWithoutPatientInput = {
    where: NurseVisitWhereUniqueInput
    update: XOR<NurseVisitUpdateWithoutPatientInput, NurseVisitUncheckedUpdateWithoutPatientInput>
    create: XOR<NurseVisitCreateWithoutPatientInput, NurseVisitUncheckedCreateWithoutPatientInput>
  }

  export type NurseVisitUpdateWithWhereUniqueWithoutPatientInput = {
    where: NurseVisitWhereUniqueInput
    data: XOR<NurseVisitUpdateWithoutPatientInput, NurseVisitUncheckedUpdateWithoutPatientInput>
  }

  export type NurseVisitUpdateManyWithWhereWithoutPatientInput = {
    where: NurseVisitScalarWhereInput
    data: XOR<NurseVisitUpdateManyMutationInput, NurseVisitUncheckedUpdateManyWithoutPatientInput>
  }

  export type NurseVisitScalarWhereInput = {
    AND?: NurseVisitScalarWhereInput | NurseVisitScalarWhereInput[]
    OR?: NurseVisitScalarWhereInput[]
    NOT?: NurseVisitScalarWhereInput | NurseVisitScalarWhereInput[]
    id?: StringFilter<"NurseVisit"> | string
    date?: DateTimeFilter<"NurseVisit"> | Date | string
    notes?: StringNullableFilter<"NurseVisit"> | string | null
    nurseId?: StringFilter<"NurseVisit"> | string
    patientId?: StringFilter<"NurseVisit"> | string
  }

  export type DoctorPatientRequestUpsertWithWhereUniqueWithoutPatientInput = {
    where: DoctorPatientRequestWhereUniqueInput
    update: XOR<DoctorPatientRequestUpdateWithoutPatientInput, DoctorPatientRequestUncheckedUpdateWithoutPatientInput>
    create: XOR<DoctorPatientRequestCreateWithoutPatientInput, DoctorPatientRequestUncheckedCreateWithoutPatientInput>
  }

  export type DoctorPatientRequestUpdateWithWhereUniqueWithoutPatientInput = {
    where: DoctorPatientRequestWhereUniqueInput
    data: XOR<DoctorPatientRequestUpdateWithoutPatientInput, DoctorPatientRequestUncheckedUpdateWithoutPatientInput>
  }

  export type DoctorPatientRequestUpdateManyWithWhereWithoutPatientInput = {
    where: DoctorPatientRequestScalarWhereInput
    data: XOR<DoctorPatientRequestUpdateManyMutationInput, DoctorPatientRequestUncheckedUpdateManyWithoutPatientInput>
  }

  export type DoctorPatientRequestScalarWhereInput = {
    AND?: DoctorPatientRequestScalarWhereInput | DoctorPatientRequestScalarWhereInput[]
    OR?: DoctorPatientRequestScalarWhereInput[]
    NOT?: DoctorPatientRequestScalarWhereInput | DoctorPatientRequestScalarWhereInput[]
    id?: StringFilter<"DoctorPatientRequest"> | string
    patientId?: StringFilter<"DoctorPatientRequest"> | string
    doctorId?: StringFilter<"DoctorPatientRequest"> | string
    status?: EnumRequestStatusFilter<"DoctorPatientRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"DoctorPatientRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorPatientRequest"> | Date | string
    message?: StringNullableFilter<"DoctorPatientRequest"> | string | null
  }

  export type DoctorPatientUpsertWithWhereUniqueWithoutPatientInput = {
    where: DoctorPatientWhereUniqueInput
    update: XOR<DoctorPatientUpdateWithoutPatientInput, DoctorPatientUncheckedUpdateWithoutPatientInput>
    create: XOR<DoctorPatientCreateWithoutPatientInput, DoctorPatientUncheckedCreateWithoutPatientInput>
  }

  export type DoctorPatientUpdateWithWhereUniqueWithoutPatientInput = {
    where: DoctorPatientWhereUniqueInput
    data: XOR<DoctorPatientUpdateWithoutPatientInput, DoctorPatientUncheckedUpdateWithoutPatientInput>
  }

  export type DoctorPatientUpdateManyWithWhereWithoutPatientInput = {
    where: DoctorPatientScalarWhereInput
    data: XOR<DoctorPatientUpdateManyMutationInput, DoctorPatientUncheckedUpdateManyWithoutPatientInput>
  }

  export type DoctorPatientScalarWhereInput = {
    AND?: DoctorPatientScalarWhereInput | DoctorPatientScalarWhereInput[]
    OR?: DoctorPatientScalarWhereInput[]
    NOT?: DoctorPatientScalarWhereInput | DoctorPatientScalarWhereInput[]
    id?: StringFilter<"DoctorPatient"> | string
    patientId?: StringFilter<"DoctorPatient"> | string
    doctorId?: StringFilter<"DoctorPatient"> | string
    startDate?: DateTimeFilter<"DoctorPatient"> | Date | string
    endDate?: DateTimeNullableFilter<"DoctorPatient"> | Date | string | null
    active?: BoolFilter<"DoctorPatient"> | boolean
  }

  export type NurseServiceRequestUpsertWithWhereUniqueWithoutPatientInput = {
    where: NurseServiceRequestWhereUniqueInput
    update: XOR<NurseServiceRequestUpdateWithoutPatientInput, NurseServiceRequestUncheckedUpdateWithoutPatientInput>
    create: XOR<NurseServiceRequestCreateWithoutPatientInput, NurseServiceRequestUncheckedCreateWithoutPatientInput>
  }

  export type NurseServiceRequestUpdateWithWhereUniqueWithoutPatientInput = {
    where: NurseServiceRequestWhereUniqueInput
    data: XOR<NurseServiceRequestUpdateWithoutPatientInput, NurseServiceRequestUncheckedUpdateWithoutPatientInput>
  }

  export type NurseServiceRequestUpdateManyWithWhereWithoutPatientInput = {
    where: NurseServiceRequestScalarWhereInput
    data: XOR<NurseServiceRequestUpdateManyMutationInput, NurseServiceRequestUncheckedUpdateManyWithoutPatientInput>
  }

  export type NurseServiceRequestScalarWhereInput = {
    AND?: NurseServiceRequestScalarWhereInput | NurseServiceRequestScalarWhereInput[]
    OR?: NurseServiceRequestScalarWhereInput[]
    NOT?: NurseServiceRequestScalarWhereInput | NurseServiceRequestScalarWhereInput[]
    id?: StringFilter<"NurseServiceRequest"> | string
    patientId?: StringFilter<"NurseServiceRequest"> | string
    nurseId?: StringNullableFilter<"NurseServiceRequest"> | string | null
    status?: EnumServiceStatusFilter<"NurseServiceRequest"> | $Enums.ServiceStatus
    serviceType?: StringFilter<"NurseServiceRequest"> | string
    description?: StringFilter<"NurseServiceRequest"> | string
    preferredDate?: DateTimeFilter<"NurseServiceRequest"> | Date | string
    urgency?: StringFilter<"NurseServiceRequest"> | string
    location?: StringFilter<"NurseServiceRequest"> | string
    createdAt?: DateTimeFilter<"NurseServiceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"NurseServiceRequest"> | Date | string
    completedAt?: DateTimeNullableFilter<"NurseServiceRequest"> | Date | string | null
    notes?: StringNullableFilter<"NurseServiceRequest"> | string | null
    rating?: IntNullableFilter<"NurseServiceRequest"> | number | null
    feedback?: StringNullableFilter<"NurseServiceRequest"> | string | null
  }

  export type ChatRoomUpsertWithWhereUniqueWithoutPatientInput = {
    where: ChatRoomWhereUniqueInput
    update: XOR<ChatRoomUpdateWithoutPatientInput, ChatRoomUncheckedUpdateWithoutPatientInput>
    create: XOR<ChatRoomCreateWithoutPatientInput, ChatRoomUncheckedCreateWithoutPatientInput>
  }

  export type ChatRoomUpdateWithWhereUniqueWithoutPatientInput = {
    where: ChatRoomWhereUniqueInput
    data: XOR<ChatRoomUpdateWithoutPatientInput, ChatRoomUncheckedUpdateWithoutPatientInput>
  }

  export type ChatRoomUpdateManyWithWhereWithoutPatientInput = {
    where: ChatRoomScalarWhereInput
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyWithoutPatientInput>
  }

  export type ChatRoomScalarWhereInput = {
    AND?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
    OR?: ChatRoomScalarWhereInput[]
    NOT?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
    id?: StringFilter<"ChatRoom"> | string
    status?: StringFilter<"ChatRoom"> | string
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
    patientId?: StringFilter<"ChatRoom"> | string
    doctorId?: StringFilter<"ChatRoom"> | string
  }

  export type ScheduleUpsertWithWhereUniqueWithoutPatientInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutPatientInput, ScheduleUncheckedUpdateWithoutPatientInput>
    create: XOR<ScheduleCreateWithoutPatientInput, ScheduleUncheckedCreateWithoutPatientInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutPatientInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutPatientInput, ScheduleUncheckedUpdateWithoutPatientInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutPatientInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutPatientInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: StringFilter<"Schedule"> | string
    doctorId?: StringNullableFilter<"Schedule"> | string | null
    nurseId?: StringNullableFilter<"Schedule"> | string | null
    patientId?: StringNullableFilter<"Schedule"> | string | null
    taskId?: StringNullableFilter<"Schedule"> | string | null
    title?: StringFilter<"Schedule"> | string
    description?: StringNullableFilter<"Schedule"> | string | null
    startTime?: DateTimeFilter<"Schedule"> | Date | string
    endTime?: DateTimeFilter<"Schedule"> | Date | string
    status?: StringFilter<"Schedule"> | string
    location?: StringNullableFilter<"Schedule"> | string | null
    isRecurring?: BoolFilter<"Schedule"> | boolean
    recurrencePattern?: StringNullableFilter<"Schedule"> | string | null
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
  }

  export type ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutPatientInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    update: XOR<ChatRoomDoctorNursePatientUpdateWithoutPatientInput, ChatRoomDoctorNursePatientUncheckedUpdateWithoutPatientInput>
    create: XOR<ChatRoomDoctorNursePatientCreateWithoutPatientInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutPatientInput>
  }

  export type ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutPatientInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    data: XOR<ChatRoomDoctorNursePatientUpdateWithoutPatientInput, ChatRoomDoctorNursePatientUncheckedUpdateWithoutPatientInput>
  }

  export type ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutPatientInput = {
    where: ChatRoomDoctorNursePatientScalarWhereInput
    data: XOR<ChatRoomDoctorNursePatientUpdateManyMutationInput, ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientInput>
  }

  export type ChatRoomDoctorNursePatientScalarWhereInput = {
    AND?: ChatRoomDoctorNursePatientScalarWhereInput | ChatRoomDoctorNursePatientScalarWhereInput[]
    OR?: ChatRoomDoctorNursePatientScalarWhereInput[]
    NOT?: ChatRoomDoctorNursePatientScalarWhereInput | ChatRoomDoctorNursePatientScalarWhereInput[]
    id?: StringFilter<"ChatRoomDoctorNursePatient"> | string
    status?: StringFilter<"ChatRoomDoctorNursePatient"> | string
    createdAt?: DateTimeFilter<"ChatRoomDoctorNursePatient"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoomDoctorNursePatient"> | Date | string
    doctorId?: StringNullableFilter<"ChatRoomDoctorNursePatient"> | string | null
    nurseId?: StringNullableFilter<"ChatRoomDoctorNursePatient"> | string | null
    patientId?: StringNullableFilter<"ChatRoomDoctorNursePatient"> | string | null
  }

  export type ChatRoomPatientNurseUpsertWithWhereUniqueWithoutPatientInput = {
    where: ChatRoomPatientNurseWhereUniqueInput
    update: XOR<ChatRoomPatientNurseUpdateWithoutPatientInput, ChatRoomPatientNurseUncheckedUpdateWithoutPatientInput>
    create: XOR<ChatRoomPatientNurseCreateWithoutPatientInput, ChatRoomPatientNurseUncheckedCreateWithoutPatientInput>
  }

  export type ChatRoomPatientNurseUpdateWithWhereUniqueWithoutPatientInput = {
    where: ChatRoomPatientNurseWhereUniqueInput
    data: XOR<ChatRoomPatientNurseUpdateWithoutPatientInput, ChatRoomPatientNurseUncheckedUpdateWithoutPatientInput>
  }

  export type ChatRoomPatientNurseUpdateManyWithWhereWithoutPatientInput = {
    where: ChatRoomPatientNurseScalarWhereInput
    data: XOR<ChatRoomPatientNurseUpdateManyMutationInput, ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientInput>
  }

  export type ChatRoomPatientNurseScalarWhereInput = {
    AND?: ChatRoomPatientNurseScalarWhereInput | ChatRoomPatientNurseScalarWhereInput[]
    OR?: ChatRoomPatientNurseScalarWhereInput[]
    NOT?: ChatRoomPatientNurseScalarWhereInput | ChatRoomPatientNurseScalarWhereInput[]
    id?: StringFilter<"ChatRoomPatientNurse"> | string
    status?: StringFilter<"ChatRoomPatientNurse"> | string
    createdAt?: DateTimeFilter<"ChatRoomPatientNurse"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoomPatientNurse"> | Date | string
    nurseId?: StringFilter<"ChatRoomPatientNurse"> | string
    patientId?: StringFilter<"ChatRoomPatientNurse"> | string
  }

  export type UserCreateWithoutNurseInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNurseInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNurseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNurseInput, UserUncheckedCreateWithoutNurseInput>
  }

  export type NurseVisitCreateWithoutNurseInput = {
    id?: string
    date?: Date | string
    notes?: string | null
    patient: PatientCreateNestedOneWithoutNurseVisitsInput
  }

  export type NurseVisitUncheckedCreateWithoutNurseInput = {
    id?: string
    date?: Date | string
    notes?: string | null
    patientId: string
  }

  export type NurseVisitCreateOrConnectWithoutNurseInput = {
    where: NurseVisitWhereUniqueInput
    create: XOR<NurseVisitCreateWithoutNurseInput, NurseVisitUncheckedCreateWithoutNurseInput>
  }

  export type NurseVisitCreateManyNurseInputEnvelope = {
    data: NurseVisitCreateManyNurseInput | NurseVisitCreateManyNurseInput[]
    skipDuplicates?: boolean
  }

  export type MedicalRecordCreateWithoutNursesInput = {
    id?: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutMedicalRecordInput
    doctors?: DoctorCreateNestedManyWithoutMedicalRecordsInput
  }

  export type MedicalRecordUncheckedCreateWithoutNursesInput = {
    id?: string
    patientId: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctors?: DoctorUncheckedCreateNestedManyWithoutMedicalRecordsInput
  }

  export type MedicalRecordCreateOrConnectWithoutNursesInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutNursesInput, MedicalRecordUncheckedCreateWithoutNursesInput>
  }

  export type NurseServiceRequestCreateWithoutNurseInput = {
    id?: string
    status?: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date | string
    urgency: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    feedback?: string | null
    patient: PatientCreateNestedOneWithoutNurseServiceRequestsInput
  }

  export type NurseServiceRequestUncheckedCreateWithoutNurseInput = {
    id?: string
    patientId: string
    status?: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date | string
    urgency: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type NurseServiceRequestCreateOrConnectWithoutNurseInput = {
    where: NurseServiceRequestWhereUniqueInput
    create: XOR<NurseServiceRequestCreateWithoutNurseInput, NurseServiceRequestUncheckedCreateWithoutNurseInput>
  }

  export type NurseServiceRequestCreateManyNurseInputEnvelope = {
    data: NurseServiceRequestCreateManyNurseInput | NurseServiceRequestCreateManyNurseInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomPatientNurseCreateWithoutNurseInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutChatRoomPatientsInput
    messages?: MessageCreateNestedManyWithoutChatRoomPatientNurseInput
  }

  export type ChatRoomPatientNurseUncheckedCreateWithoutNurseInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomPatientNurseInput
  }

  export type ChatRoomPatientNurseCreateOrConnectWithoutNurseInput = {
    where: ChatRoomPatientNurseWhereUniqueInput
    create: XOR<ChatRoomPatientNurseCreateWithoutNurseInput, ChatRoomPatientNurseUncheckedCreateWithoutNurseInput>
  }

  export type ChatRoomPatientNurseCreateManyNurseInputEnvelope = {
    data: ChatRoomPatientNurseCreateManyNurseInput | ChatRoomPatientNurseCreateManyNurseInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomDoctorNursePatientCreateWithoutNurseInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: DoctorCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    patient?: PatientCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    messages?: MessageCreateNestedManyWithoutChatRoomDoctorNursePatientInput
  }

  export type ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: string | null
    patientId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomDoctorNursePatientInput
  }

  export type ChatRoomDoctorNursePatientCreateOrConnectWithoutNurseInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    create: XOR<ChatRoomDoctorNursePatientCreateWithoutNurseInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput>
  }

  export type ChatRoomDoctorNursePatientCreateManyNurseInputEnvelope = {
    data: ChatRoomDoctorNursePatientCreateManyNurseInput | ChatRoomDoctorNursePatientCreateManyNurseInput[]
    skipDuplicates?: boolean
  }

  export type DoctorCreateWithoutNursesInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutNursesInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutNursesInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutNursesInput, DoctorUncheckedCreateWithoutNursesInput>
  }

  export type DoctorNurseCreateWithoutNurseInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutDoctorNursesInput
  }

  export type DoctorNurseUncheckedCreateWithoutNurseInput = {
    id?: string
    doctorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorNurseCreateOrConnectWithoutNurseInput = {
    where: DoctorNurseWhereUniqueInput
    create: XOR<DoctorNurseCreateWithoutNurseInput, DoctorNurseUncheckedCreateWithoutNurseInput>
  }

  export type DoctorNurseCreateManyNurseInputEnvelope = {
    data: DoctorNurseCreateManyNurseInput | DoctorNurseCreateManyNurseInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutNurseInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: DoctorCreateNestedOneWithoutScheduledTasksInput
    patient?: PatientCreateNestedOneWithoutScheduledTasksInput
    task?: TaskCreateNestedOneWithoutScheduledTasksInput
  }

  export type ScheduleUncheckedCreateWithoutNurseInput = {
    id?: string
    doctorId?: string | null
    patientId?: string | null
    taskId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutNurseInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutNurseInput, ScheduleUncheckedCreateWithoutNurseInput>
  }

  export type ScheduleCreateManyNurseInputEnvelope = {
    data: ScheduleCreateManyNurseInput | ScheduleCreateManyNurseInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutNurseInput = {
    id?: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    doctor: DoctorCreateNestedOneWithoutTasksInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutNurseInput = {
    id?: string
    doctorId: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutNurseInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutNurseInput, TaskUncheckedCreateWithoutNurseInput>
  }

  export type TaskCreateManyNurseInputEnvelope = {
    data: TaskCreateManyNurseInput | TaskCreateManyNurseInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutNurseInput = {
    update: XOR<UserUpdateWithoutNurseInput, UserUncheckedUpdateWithoutNurseInput>
    create: XOR<UserCreateWithoutNurseInput, UserUncheckedCreateWithoutNurseInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNurseInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNurseInput, UserUncheckedUpdateWithoutNurseInput>
  }

  export type UserUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUncheckedUpdateOneWithoutUserNestedInput
  }

  export type NurseVisitUpsertWithWhereUniqueWithoutNurseInput = {
    where: NurseVisitWhereUniqueInput
    update: XOR<NurseVisitUpdateWithoutNurseInput, NurseVisitUncheckedUpdateWithoutNurseInput>
    create: XOR<NurseVisitCreateWithoutNurseInput, NurseVisitUncheckedCreateWithoutNurseInput>
  }

  export type NurseVisitUpdateWithWhereUniqueWithoutNurseInput = {
    where: NurseVisitWhereUniqueInput
    data: XOR<NurseVisitUpdateWithoutNurseInput, NurseVisitUncheckedUpdateWithoutNurseInput>
  }

  export type NurseVisitUpdateManyWithWhereWithoutNurseInput = {
    where: NurseVisitScalarWhereInput
    data: XOR<NurseVisitUpdateManyMutationInput, NurseVisitUncheckedUpdateManyWithoutNurseInput>
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutNursesInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutNursesInput, MedicalRecordUncheckedUpdateWithoutNursesInput>
    create: XOR<MedicalRecordCreateWithoutNursesInput, MedicalRecordUncheckedCreateWithoutNursesInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutNursesInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutNursesInput, MedicalRecordUncheckedUpdateWithoutNursesInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutNursesInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutNursesInput>
  }

  export type NurseServiceRequestUpsertWithWhereUniqueWithoutNurseInput = {
    where: NurseServiceRequestWhereUniqueInput
    update: XOR<NurseServiceRequestUpdateWithoutNurseInput, NurseServiceRequestUncheckedUpdateWithoutNurseInput>
    create: XOR<NurseServiceRequestCreateWithoutNurseInput, NurseServiceRequestUncheckedCreateWithoutNurseInput>
  }

  export type NurseServiceRequestUpdateWithWhereUniqueWithoutNurseInput = {
    where: NurseServiceRequestWhereUniqueInput
    data: XOR<NurseServiceRequestUpdateWithoutNurseInput, NurseServiceRequestUncheckedUpdateWithoutNurseInput>
  }

  export type NurseServiceRequestUpdateManyWithWhereWithoutNurseInput = {
    where: NurseServiceRequestScalarWhereInput
    data: XOR<NurseServiceRequestUpdateManyMutationInput, NurseServiceRequestUncheckedUpdateManyWithoutNurseInput>
  }

  export type ChatRoomPatientNurseUpsertWithWhereUniqueWithoutNurseInput = {
    where: ChatRoomPatientNurseWhereUniqueInput
    update: XOR<ChatRoomPatientNurseUpdateWithoutNurseInput, ChatRoomPatientNurseUncheckedUpdateWithoutNurseInput>
    create: XOR<ChatRoomPatientNurseCreateWithoutNurseInput, ChatRoomPatientNurseUncheckedCreateWithoutNurseInput>
  }

  export type ChatRoomPatientNurseUpdateWithWhereUniqueWithoutNurseInput = {
    where: ChatRoomPatientNurseWhereUniqueInput
    data: XOR<ChatRoomPatientNurseUpdateWithoutNurseInput, ChatRoomPatientNurseUncheckedUpdateWithoutNurseInput>
  }

  export type ChatRoomPatientNurseUpdateManyWithWhereWithoutNurseInput = {
    where: ChatRoomPatientNurseScalarWhereInput
    data: XOR<ChatRoomPatientNurseUpdateManyMutationInput, ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseInput>
  }

  export type ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutNurseInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    update: XOR<ChatRoomDoctorNursePatientUpdateWithoutNurseInput, ChatRoomDoctorNursePatientUncheckedUpdateWithoutNurseInput>
    create: XOR<ChatRoomDoctorNursePatientCreateWithoutNurseInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutNurseInput>
  }

  export type ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutNurseInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    data: XOR<ChatRoomDoctorNursePatientUpdateWithoutNurseInput, ChatRoomDoctorNursePatientUncheckedUpdateWithoutNurseInput>
  }

  export type ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutNurseInput = {
    where: ChatRoomDoctorNursePatientScalarWhereInput
    data: XOR<ChatRoomDoctorNursePatientUpdateManyMutationInput, ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseInput>
  }

  export type DoctorUpsertWithWhereUniqueWithoutNursesInput = {
    where: DoctorWhereUniqueInput
    update: XOR<DoctorUpdateWithoutNursesInput, DoctorUncheckedUpdateWithoutNursesInput>
    create: XOR<DoctorCreateWithoutNursesInput, DoctorUncheckedCreateWithoutNursesInput>
  }

  export type DoctorUpdateWithWhereUniqueWithoutNursesInput = {
    where: DoctorWhereUniqueInput
    data: XOR<DoctorUpdateWithoutNursesInput, DoctorUncheckedUpdateWithoutNursesInput>
  }

  export type DoctorUpdateManyWithWhereWithoutNursesInput = {
    where: DoctorScalarWhereInput
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyWithoutNursesInput>
  }

  export type DoctorScalarWhereInput = {
    AND?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    OR?: DoctorScalarWhereInput[]
    NOT?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    id?: StringFilter<"Doctor"> | string
    specialization?: StringNullableFilter<"Doctor"> | string | null
    availability?: BoolFilter<"Doctor"> | boolean
    rating?: FloatFilter<"Doctor"> | number
    professionalLicenseNumber?: StringNullableFilter<"Doctor"> | string | null
    medicalDiploma?: StringNullableFilter<"Doctor"> | string | null
    hospitalAffiliation?: StringNullableFilter<"Doctor"> | string | null
    experience?: StringNullableFilter<"Doctor"> | string | null
    userId?: StringFilter<"Doctor"> | string
    deletedAt?: DateTimeNullableFilter<"Doctor"> | Date | string | null
    isDeleted?: BoolFilter<"Doctor"> | boolean
  }

  export type DoctorNurseUpsertWithWhereUniqueWithoutNurseInput = {
    where: DoctorNurseWhereUniqueInput
    update: XOR<DoctorNurseUpdateWithoutNurseInput, DoctorNurseUncheckedUpdateWithoutNurseInput>
    create: XOR<DoctorNurseCreateWithoutNurseInput, DoctorNurseUncheckedCreateWithoutNurseInput>
  }

  export type DoctorNurseUpdateWithWhereUniqueWithoutNurseInput = {
    where: DoctorNurseWhereUniqueInput
    data: XOR<DoctorNurseUpdateWithoutNurseInput, DoctorNurseUncheckedUpdateWithoutNurseInput>
  }

  export type DoctorNurseUpdateManyWithWhereWithoutNurseInput = {
    where: DoctorNurseScalarWhereInput
    data: XOR<DoctorNurseUpdateManyMutationInput, DoctorNurseUncheckedUpdateManyWithoutNurseInput>
  }

  export type DoctorNurseScalarWhereInput = {
    AND?: DoctorNurseScalarWhereInput | DoctorNurseScalarWhereInput[]
    OR?: DoctorNurseScalarWhereInput[]
    NOT?: DoctorNurseScalarWhereInput | DoctorNurseScalarWhereInput[]
    id?: StringFilter<"DoctorNurse"> | string
    doctorId?: StringFilter<"DoctorNurse"> | string
    nurseId?: StringFilter<"DoctorNurse"> | string
    createdAt?: DateTimeFilter<"DoctorNurse"> | Date | string
    updatedAt?: DateTimeFilter<"DoctorNurse"> | Date | string
  }

  export type ScheduleUpsertWithWhereUniqueWithoutNurseInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutNurseInput, ScheduleUncheckedUpdateWithoutNurseInput>
    create: XOR<ScheduleCreateWithoutNurseInput, ScheduleUncheckedCreateWithoutNurseInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutNurseInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutNurseInput, ScheduleUncheckedUpdateWithoutNurseInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutNurseInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutNurseInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutNurseInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutNurseInput, TaskUncheckedUpdateWithoutNurseInput>
    create: XOR<TaskCreateWithoutNurseInput, TaskUncheckedCreateWithoutNurseInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutNurseInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutNurseInput, TaskUncheckedUpdateWithoutNurseInput>
  }

  export type TaskUpdateManyWithWhereWithoutNurseInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutNurseInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    doctorId?: StringFilter<"Task"> | string
    nurseId?: StringFilter<"Task"> | string
    details?: StringFilter<"Task"> | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
  }

  export type UserCreateWithoutDoctorInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    nurse?: NurseCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDoctorInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    nurse?: NurseUncheckedCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDoctorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorPatientCreateWithoutDoctorInput = {
    id?: string
    startDate?: Date | string
    endDate?: Date | string | null
    active?: boolean
    patient: PatientCreateNestedOneWithoutDoctorsInput
  }

  export type DoctorPatientUncheckedCreateWithoutDoctorInput = {
    id?: string
    patientId: string
    startDate?: Date | string
    endDate?: Date | string | null
    active?: boolean
  }

  export type DoctorPatientCreateOrConnectWithoutDoctorInput = {
    where: DoctorPatientWhereUniqueInput
    create: XOR<DoctorPatientCreateWithoutDoctorInput, DoctorPatientUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorPatientCreateManyDoctorInputEnvelope = {
    data: DoctorPatientCreateManyDoctorInput | DoctorPatientCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type DoctorPatientRequestCreateWithoutDoctorInput = {
    id?: string
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    message?: string | null
    patient: PatientCreateNestedOneWithoutDoctorRequestsInput
  }

  export type DoctorPatientRequestUncheckedCreateWithoutDoctorInput = {
    id?: string
    patientId: string
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    message?: string | null
  }

  export type DoctorPatientRequestCreateOrConnectWithoutDoctorInput = {
    where: DoctorPatientRequestWhereUniqueInput
    create: XOR<DoctorPatientRequestCreateWithoutDoctorInput, DoctorPatientRequestUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorPatientRequestCreateManyDoctorInputEnvelope = {
    data: DoctorPatientRequestCreateManyDoctorInput | DoctorPatientRequestCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type MedicalRecordCreateWithoutDoctorsInput = {
    id?: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutMedicalRecordInput
    nurses?: NurseCreateNestedManyWithoutMedicalRecordsInput
  }

  export type MedicalRecordUncheckedCreateWithoutDoctorsInput = {
    id?: string
    patientId: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nurses?: NurseUncheckedCreateNestedManyWithoutMedicalRecordsInput
  }

  export type MedicalRecordCreateOrConnectWithoutDoctorsInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutDoctorsInput, MedicalRecordUncheckedCreateWithoutDoctorsInput>
  }

  export type PrescriptionCreateWithoutDoctorInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patient: PatientCreateNestedOneWithoutPrescriptionsInput
    pharmacy?: PharmacyCreateNestedOneWithoutPrescriptionsInput
    prescription_medicines?: MedicineCreateNestedOneWithoutPrescriptionsInput
  }

  export type PrescriptionUncheckedCreateWithoutDoctorInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patientId: string
    medicines_id?: string | null
    pharmacyId?: string | null
  }

  export type PrescriptionCreateOrConnectWithoutDoctorInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput>
  }

  export type PrescriptionCreateManyDoctorInputEnvelope = {
    data: PrescriptionCreateManyDoctorInput | PrescriptionCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomCreateWithoutDoctorInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutChatRoomsInput
    messages?: MessageCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutDoctorInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutDoctorInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutDoctorInput, ChatRoomUncheckedCreateWithoutDoctorInput>
  }

  export type ChatRoomCreateManyDoctorInputEnvelope = {
    data: ChatRoomCreateManyDoctorInput | ChatRoomCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomDoctorNursePatientCreateWithoutDoctorInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurse?: NurseCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    patient?: PatientCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    messages?: MessageCreateNestedManyWithoutChatRoomDoctorNursePatientInput
  }

  export type ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurseId?: string | null
    patientId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomDoctorNursePatientInput
  }

  export type ChatRoomDoctorNursePatientCreateOrConnectWithoutDoctorInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    create: XOR<ChatRoomDoctorNursePatientCreateWithoutDoctorInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput>
  }

  export type ChatRoomDoctorNursePatientCreateManyDoctorInputEnvelope = {
    data: ChatRoomDoctorNursePatientCreateManyDoctorInput | ChatRoomDoctorNursePatientCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type NurseCreateWithoutDoctorsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutDoctorsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutDoctorsInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutDoctorsInput, NurseUncheckedCreateWithoutDoctorsInput>
  }

  export type DoctorNurseCreateWithoutDoctorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurse: NurseCreateNestedOneWithoutDoctorNursesInput
  }

  export type DoctorNurseUncheckedCreateWithoutDoctorInput = {
    id?: string
    nurseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorNurseCreateOrConnectWithoutDoctorInput = {
    where: DoctorNurseWhereUniqueInput
    create: XOR<DoctorNurseCreateWithoutDoctorInput, DoctorNurseUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorNurseCreateManyDoctorInputEnvelope = {
    data: DoctorNurseCreateManyDoctorInput | DoctorNurseCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutDoctorInput = {
    id?: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    nurse: NurseCreateNestedOneWithoutTasksInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutDoctorInput = {
    id?: string
    nurseId: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutDoctorInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutDoctorInput, TaskUncheckedCreateWithoutDoctorInput>
  }

  export type TaskCreateManyDoctorInputEnvelope = {
    data: TaskCreateManyDoctorInput | TaskCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutDoctorInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nurse?: NurseCreateNestedOneWithoutScheduledTasksInput
    patient?: PatientCreateNestedOneWithoutScheduledTasksInput
    task?: TaskCreateNestedOneWithoutScheduledTasksInput
  }

  export type ScheduleUncheckedCreateWithoutDoctorInput = {
    id?: string
    nurseId?: string | null
    patientId?: string | null
    taskId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutDoctorInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutDoctorInput, ScheduleUncheckedCreateWithoutDoctorInput>
  }

  export type ScheduleCreateManyDoctorInputEnvelope = {
    data: ScheduleCreateManyDoctorInput | ScheduleCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDoctorInput = {
    update: XOR<UserUpdateWithoutDoctorInput, UserUncheckedUpdateWithoutDoctorInput>
    create: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDoctorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDoctorInput, UserUncheckedUpdateWithoutDoctorInput>
  }

  export type UserUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    nurse?: NurseUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    nurse?: NurseUncheckedUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUncheckedUpdateOneWithoutUserNestedInput
  }

  export type DoctorPatientUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorPatientWhereUniqueInput
    update: XOR<DoctorPatientUpdateWithoutDoctorInput, DoctorPatientUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorPatientCreateWithoutDoctorInput, DoctorPatientUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorPatientUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorPatientWhereUniqueInput
    data: XOR<DoctorPatientUpdateWithoutDoctorInput, DoctorPatientUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorPatientUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorPatientScalarWhereInput
    data: XOR<DoctorPatientUpdateManyMutationInput, DoctorPatientUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorPatientRequestUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorPatientRequestWhereUniqueInput
    update: XOR<DoctorPatientRequestUpdateWithoutDoctorInput, DoctorPatientRequestUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorPatientRequestCreateWithoutDoctorInput, DoctorPatientRequestUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorPatientRequestUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorPatientRequestWhereUniqueInput
    data: XOR<DoctorPatientRequestUpdateWithoutDoctorInput, DoctorPatientRequestUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorPatientRequestUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorPatientRequestScalarWhereInput
    data: XOR<DoctorPatientRequestUpdateManyMutationInput, DoctorPatientRequestUncheckedUpdateManyWithoutDoctorInput>
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutDoctorsInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutDoctorsInput, MedicalRecordUncheckedUpdateWithoutDoctorsInput>
    create: XOR<MedicalRecordCreateWithoutDoctorsInput, MedicalRecordUncheckedCreateWithoutDoctorsInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutDoctorsInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutDoctorsInput, MedicalRecordUncheckedUpdateWithoutDoctorsInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutDoctorsInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutDoctorsInput>
  }

  export type PrescriptionUpsertWithWhereUniqueWithoutDoctorInput = {
    where: PrescriptionWhereUniqueInput
    update: XOR<PrescriptionUpdateWithoutDoctorInput, PrescriptionUncheckedUpdateWithoutDoctorInput>
    create: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput>
  }

  export type PrescriptionUpdateWithWhereUniqueWithoutDoctorInput = {
    where: PrescriptionWhereUniqueInput
    data: XOR<PrescriptionUpdateWithoutDoctorInput, PrescriptionUncheckedUpdateWithoutDoctorInput>
  }

  export type PrescriptionUpdateManyWithWhereWithoutDoctorInput = {
    where: PrescriptionScalarWhereInput
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyWithoutDoctorInput>
  }

  export type ChatRoomUpsertWithWhereUniqueWithoutDoctorInput = {
    where: ChatRoomWhereUniqueInput
    update: XOR<ChatRoomUpdateWithoutDoctorInput, ChatRoomUncheckedUpdateWithoutDoctorInput>
    create: XOR<ChatRoomCreateWithoutDoctorInput, ChatRoomUncheckedCreateWithoutDoctorInput>
  }

  export type ChatRoomUpdateWithWhereUniqueWithoutDoctorInput = {
    where: ChatRoomWhereUniqueInput
    data: XOR<ChatRoomUpdateWithoutDoctorInput, ChatRoomUncheckedUpdateWithoutDoctorInput>
  }

  export type ChatRoomUpdateManyWithWhereWithoutDoctorInput = {
    where: ChatRoomScalarWhereInput
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyWithoutDoctorInput>
  }

  export type ChatRoomDoctorNursePatientUpsertWithWhereUniqueWithoutDoctorInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    update: XOR<ChatRoomDoctorNursePatientUpdateWithoutDoctorInput, ChatRoomDoctorNursePatientUncheckedUpdateWithoutDoctorInput>
    create: XOR<ChatRoomDoctorNursePatientCreateWithoutDoctorInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutDoctorInput>
  }

  export type ChatRoomDoctorNursePatientUpdateWithWhereUniqueWithoutDoctorInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    data: XOR<ChatRoomDoctorNursePatientUpdateWithoutDoctorInput, ChatRoomDoctorNursePatientUncheckedUpdateWithoutDoctorInput>
  }

  export type ChatRoomDoctorNursePatientUpdateManyWithWhereWithoutDoctorInput = {
    where: ChatRoomDoctorNursePatientScalarWhereInput
    data: XOR<ChatRoomDoctorNursePatientUpdateManyMutationInput, ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorInput>
  }

  export type NurseUpsertWithWhereUniqueWithoutDoctorsInput = {
    where: NurseWhereUniqueInput
    update: XOR<NurseUpdateWithoutDoctorsInput, NurseUncheckedUpdateWithoutDoctorsInput>
    create: XOR<NurseCreateWithoutDoctorsInput, NurseUncheckedCreateWithoutDoctorsInput>
  }

  export type NurseUpdateWithWhereUniqueWithoutDoctorsInput = {
    where: NurseWhereUniqueInput
    data: XOR<NurseUpdateWithoutDoctorsInput, NurseUncheckedUpdateWithoutDoctorsInput>
  }

  export type NurseUpdateManyWithWhereWithoutDoctorsInput = {
    where: NurseScalarWhereInput
    data: XOR<NurseUpdateManyMutationInput, NurseUncheckedUpdateManyWithoutDoctorsInput>
  }

  export type NurseScalarWhereInput = {
    AND?: NurseScalarWhereInput | NurseScalarWhereInput[]
    OR?: NurseScalarWhereInput[]
    NOT?: NurseScalarWhereInput | NurseScalarWhereInput[]
    id?: StringFilter<"Nurse"> | string
    availability?: BoolFilter<"Nurse"> | boolean
    rating?: FloatFilter<"Nurse"> | number
    professionalLicenseNumber?: StringNullableFilter<"Nurse"> | string | null
    nursingCertification?: StringNullableFilter<"Nurse"> | string | null
    hospitalAffiliation?: StringNullableFilter<"Nurse"> | string | null
    yearsOfExperience?: IntNullableFilter<"Nurse"> | number | null
    userId?: StringFilter<"Nurse"> | string
  }

  export type DoctorNurseUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorNurseWhereUniqueInput
    update: XOR<DoctorNurseUpdateWithoutDoctorInput, DoctorNurseUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorNurseCreateWithoutDoctorInput, DoctorNurseUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorNurseUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorNurseWhereUniqueInput
    data: XOR<DoctorNurseUpdateWithoutDoctorInput, DoctorNurseUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorNurseUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorNurseScalarWhereInput
    data: XOR<DoctorNurseUpdateManyMutationInput, DoctorNurseUncheckedUpdateManyWithoutDoctorInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutDoctorInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutDoctorInput, TaskUncheckedUpdateWithoutDoctorInput>
    create: XOR<TaskCreateWithoutDoctorInput, TaskUncheckedCreateWithoutDoctorInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutDoctorInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutDoctorInput, TaskUncheckedUpdateWithoutDoctorInput>
  }

  export type TaskUpdateManyWithWhereWithoutDoctorInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutDoctorInput>
  }

  export type ScheduleUpsertWithWhereUniqueWithoutDoctorInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutDoctorInput, ScheduleUncheckedUpdateWithoutDoctorInput>
    create: XOR<ScheduleCreateWithoutDoctorInput, ScheduleUncheckedCreateWithoutDoctorInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutDoctorInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutDoctorInput, ScheduleUncheckedUpdateWithoutDoctorInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutDoctorInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorCreateWithoutDoctorNursesInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutDoctorNursesInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutDoctorNursesInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutDoctorNursesInput, DoctorUncheckedCreateWithoutDoctorNursesInput>
  }

  export type NurseCreateWithoutDoctorNursesInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutDoctorNursesInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutDoctorNursesInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutDoctorNursesInput, NurseUncheckedCreateWithoutDoctorNursesInput>
  }

  export type DoctorUpsertWithoutDoctorNursesInput = {
    update: XOR<DoctorUpdateWithoutDoctorNursesInput, DoctorUncheckedUpdateWithoutDoctorNursesInput>
    create: XOR<DoctorCreateWithoutDoctorNursesInput, DoctorUncheckedCreateWithoutDoctorNursesInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutDoctorNursesInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutDoctorNursesInput, DoctorUncheckedUpdateWithoutDoctorNursesInput>
  }

  export type DoctorUpdateWithoutDoctorNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutDoctorNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type NurseUpsertWithoutDoctorNursesInput = {
    update: XOR<NurseUpdateWithoutDoctorNursesInput, NurseUncheckedUpdateWithoutDoctorNursesInput>
    create: XOR<NurseCreateWithoutDoctorNursesInput, NurseUncheckedCreateWithoutDoctorNursesInput>
    where?: NurseWhereInput
  }

  export type NurseUpdateToOneWithWhereWithoutDoctorNursesInput = {
    where?: NurseWhereInput
    data: XOR<NurseUpdateWithoutDoctorNursesInput, NurseUncheckedUpdateWithoutDoctorNursesInput>
  }

  export type NurseUpdateWithoutDoctorNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutDoctorNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type DoctorCreateWithoutTasksInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutTasksInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutTasksInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutTasksInput, DoctorUncheckedCreateWithoutTasksInput>
  }

  export type NurseCreateWithoutTasksInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutTasksInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutTasksInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutTasksInput, NurseUncheckedCreateWithoutTasksInput>
  }

  export type ScheduleCreateWithoutTaskInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: DoctorCreateNestedOneWithoutScheduledTasksInput
    nurse?: NurseCreateNestedOneWithoutScheduledTasksInput
    patient?: PatientCreateNestedOneWithoutScheduledTasksInput
  }

  export type ScheduleUncheckedCreateWithoutTaskInput = {
    id?: string
    doctorId?: string | null
    nurseId?: string | null
    patientId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutTaskInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutTaskInput, ScheduleUncheckedCreateWithoutTaskInput>
  }

  export type ScheduleCreateManyTaskInputEnvelope = {
    data: ScheduleCreateManyTaskInput | ScheduleCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type DoctorUpsertWithoutTasksInput = {
    update: XOR<DoctorUpdateWithoutTasksInput, DoctorUncheckedUpdateWithoutTasksInput>
    create: XOR<DoctorCreateWithoutTasksInput, DoctorUncheckedCreateWithoutTasksInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutTasksInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutTasksInput, DoctorUncheckedUpdateWithoutTasksInput>
  }

  export type DoctorUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type NurseUpsertWithoutTasksInput = {
    update: XOR<NurseUpdateWithoutTasksInput, NurseUncheckedUpdateWithoutTasksInput>
    create: XOR<NurseCreateWithoutTasksInput, NurseUncheckedCreateWithoutTasksInput>
    where?: NurseWhereInput
  }

  export type NurseUpdateToOneWithWhereWithoutTasksInput = {
    where?: NurseWhereInput
    data: XOR<NurseUpdateWithoutTasksInput, NurseUncheckedUpdateWithoutTasksInput>
  }

  export type NurseUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type ScheduleUpsertWithWhereUniqueWithoutTaskInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutTaskInput, ScheduleUncheckedUpdateWithoutTaskInput>
    create: XOR<ScheduleCreateWithoutTaskInput, ScheduleUncheckedCreateWithoutTaskInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutTaskInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutTaskInput, ScheduleUncheckedUpdateWithoutTaskInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutTaskInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutTaskInput>
  }

  export type DoctorCreateWithoutScheduledTasksInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutScheduledTasksInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutScheduledTasksInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutScheduledTasksInput, DoctorUncheckedCreateWithoutScheduledTasksInput>
  }

  export type NurseCreateWithoutScheduledTasksInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutScheduledTasksInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutScheduledTasksInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutScheduledTasksInput, NurseUncheckedCreateWithoutScheduledTasksInput>
  }

  export type PatientCreateWithoutScheduledTasksInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutScheduledTasksInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutScheduledTasksInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutScheduledTasksInput, PatientUncheckedCreateWithoutScheduledTasksInput>
  }

  export type TaskCreateWithoutScheduledTasksInput = {
    id?: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    doctor: DoctorCreateNestedOneWithoutTasksInput
    nurse: NurseCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutScheduledTasksInput = {
    id?: string
    doctorId: string
    nurseId: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type TaskCreateOrConnectWithoutScheduledTasksInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutScheduledTasksInput, TaskUncheckedCreateWithoutScheduledTasksInput>
  }

  export type DoctorUpsertWithoutScheduledTasksInput = {
    update: XOR<DoctorUpdateWithoutScheduledTasksInput, DoctorUncheckedUpdateWithoutScheduledTasksInput>
    create: XOR<DoctorCreateWithoutScheduledTasksInput, DoctorUncheckedCreateWithoutScheduledTasksInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutScheduledTasksInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutScheduledTasksInput, DoctorUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type DoctorUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type NurseUpsertWithoutScheduledTasksInput = {
    update: XOR<NurseUpdateWithoutScheduledTasksInput, NurseUncheckedUpdateWithoutScheduledTasksInput>
    create: XOR<NurseCreateWithoutScheduledTasksInput, NurseUncheckedCreateWithoutScheduledTasksInput>
    where?: NurseWhereInput
  }

  export type NurseUpdateToOneWithWhereWithoutScheduledTasksInput = {
    where?: NurseWhereInput
    data: XOR<NurseUpdateWithoutScheduledTasksInput, NurseUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type NurseUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type PatientUpsertWithoutScheduledTasksInput = {
    update: XOR<PatientUpdateWithoutScheduledTasksInput, PatientUncheckedUpdateWithoutScheduledTasksInput>
    create: XOR<PatientCreateWithoutScheduledTasksInput, PatientUncheckedCreateWithoutScheduledTasksInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutScheduledTasksInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutScheduledTasksInput, PatientUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type PatientUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type TaskUpsertWithoutScheduledTasksInput = {
    update: XOR<TaskUpdateWithoutScheduledTasksInput, TaskUncheckedUpdateWithoutScheduledTasksInput>
    create: XOR<TaskCreateWithoutScheduledTasksInput, TaskUncheckedCreateWithoutScheduledTasksInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutScheduledTasksInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutScheduledTasksInput, TaskUncheckedUpdateWithoutScheduledTasksInput>
  }

  export type TaskUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doctor?: DoctorUpdateOneRequiredWithoutTasksNestedInput
    nurse?: NurseUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutScheduledTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nurseId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientCreateWithoutNurseServiceRequestsInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutNurseServiceRequestsInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutNurseServiceRequestsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutNurseServiceRequestsInput, PatientUncheckedCreateWithoutNurseServiceRequestsInput>
  }

  export type NurseCreateWithoutServiceRequestsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutServiceRequestsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutServiceRequestsInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutServiceRequestsInput, NurseUncheckedCreateWithoutServiceRequestsInput>
  }

  export type PatientUpsertWithoutNurseServiceRequestsInput = {
    update: XOR<PatientUpdateWithoutNurseServiceRequestsInput, PatientUncheckedUpdateWithoutNurseServiceRequestsInput>
    create: XOR<PatientCreateWithoutNurseServiceRequestsInput, PatientUncheckedCreateWithoutNurseServiceRequestsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutNurseServiceRequestsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutNurseServiceRequestsInput, PatientUncheckedUpdateWithoutNurseServiceRequestsInput>
  }

  export type PatientUpdateWithoutNurseServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutNurseServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type NurseUpsertWithoutServiceRequestsInput = {
    update: XOR<NurseUpdateWithoutServiceRequestsInput, NurseUncheckedUpdateWithoutServiceRequestsInput>
    create: XOR<NurseCreateWithoutServiceRequestsInput, NurseUncheckedCreateWithoutServiceRequestsInput>
    where?: NurseWhereInput
  }

  export type NurseUpdateToOneWithWhereWithoutServiceRequestsInput = {
    where?: NurseWhereInput
    data: XOR<NurseUpdateWithoutServiceRequestsInput, NurseUncheckedUpdateWithoutServiceRequestsInput>
  }

  export type NurseUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type PatientCreateWithoutDoctorRequestsInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutDoctorRequestsInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutDoctorRequestsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutDoctorRequestsInput, PatientUncheckedCreateWithoutDoctorRequestsInput>
  }

  export type DoctorCreateWithoutPatientRequestsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutPatientRequestsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutPatientRequestsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutPatientRequestsInput, DoctorUncheckedCreateWithoutPatientRequestsInput>
  }

  export type PatientUpsertWithoutDoctorRequestsInput = {
    update: XOR<PatientUpdateWithoutDoctorRequestsInput, PatientUncheckedUpdateWithoutDoctorRequestsInput>
    create: XOR<PatientCreateWithoutDoctorRequestsInput, PatientUncheckedCreateWithoutDoctorRequestsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutDoctorRequestsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutDoctorRequestsInput, PatientUncheckedUpdateWithoutDoctorRequestsInput>
  }

  export type PatientUpdateWithoutDoctorRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutDoctorRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type DoctorUpsertWithoutPatientRequestsInput = {
    update: XOR<DoctorUpdateWithoutPatientRequestsInput, DoctorUncheckedUpdateWithoutPatientRequestsInput>
    create: XOR<DoctorCreateWithoutPatientRequestsInput, DoctorUncheckedCreateWithoutPatientRequestsInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutPatientRequestsInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutPatientRequestsInput, DoctorUncheckedUpdateWithoutPatientRequestsInput>
  }

  export type DoctorUpdateWithoutPatientRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutPatientRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type PatientCreateWithoutDoctorsInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutDoctorsInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutDoctorsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput>
  }

  export type DoctorCreateWithoutPatientsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutPatientsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutPatientsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutPatientsInput, DoctorUncheckedCreateWithoutPatientsInput>
  }

  export type PatientUpsertWithoutDoctorsInput = {
    update: XOR<PatientUpdateWithoutDoctorsInput, PatientUncheckedUpdateWithoutDoctorsInput>
    create: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutDoctorsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutDoctorsInput, PatientUncheckedUpdateWithoutDoctorsInput>
  }

  export type PatientUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type DoctorUpsertWithoutPatientsInput = {
    update: XOR<DoctorUpdateWithoutPatientsInput, DoctorUncheckedUpdateWithoutPatientsInput>
    create: XOR<DoctorCreateWithoutPatientsInput, DoctorUncheckedCreateWithoutPatientsInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutPatientsInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutPatientsInput, DoctorUncheckedUpdateWithoutPatientsInput>
  }

  export type DoctorUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type UserCreateWithoutPharmacyInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    nurse?: NurseCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPharmacyInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    nurse?: NurseUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPharmacyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPharmacyInput, UserUncheckedCreateWithoutPharmacyInput>
  }

  export type PrescriptionCreateWithoutPharmacyInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patient: PatientCreateNestedOneWithoutPrescriptionsInput
    doctor: DoctorCreateNestedOneWithoutPrescriptionsInput
    prescription_medicines?: MedicineCreateNestedOneWithoutPrescriptionsInput
  }

  export type PrescriptionUncheckedCreateWithoutPharmacyInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patientId: string
    doctorId: string
    medicines_id?: string | null
  }

  export type PrescriptionCreateOrConnectWithoutPharmacyInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutPharmacyInput, PrescriptionUncheckedCreateWithoutPharmacyInput>
  }

  export type PrescriptionCreateManyPharmacyInputEnvelope = {
    data: PrescriptionCreateManyPharmacyInput | PrescriptionCreateManyPharmacyInput[]
    skipDuplicates?: boolean
  }

  export type MedicineCreateWithoutPharmaciesInput = {
    id?: string
    name: string
    description?: string | null
    stock?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    prescriptions?: PrescriptionCreateNestedManyWithoutPrescription_medicinesInput
  }

  export type MedicineUncheckedCreateWithoutPharmaciesInput = {
    id?: string
    name: string
    description?: string | null
    stock?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPrescription_medicinesInput
  }

  export type MedicineCreateOrConnectWithoutPharmaciesInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutPharmaciesInput, MedicineUncheckedCreateWithoutPharmaciesInput>
  }

  export type UserUpsertWithoutPharmacyInput = {
    update: XOR<UserUpdateWithoutPharmacyInput, UserUncheckedUpdateWithoutPharmacyInput>
    create: XOR<UserCreateWithoutPharmacyInput, UserUncheckedCreateWithoutPharmacyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPharmacyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPharmacyInput, UserUncheckedUpdateWithoutPharmacyInput>
  }

  export type UserUpdateWithoutPharmacyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    nurse?: NurseUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPharmacyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    nurse?: NurseUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PrescriptionUpsertWithWhereUniqueWithoutPharmacyInput = {
    where: PrescriptionWhereUniqueInput
    update: XOR<PrescriptionUpdateWithoutPharmacyInput, PrescriptionUncheckedUpdateWithoutPharmacyInput>
    create: XOR<PrescriptionCreateWithoutPharmacyInput, PrescriptionUncheckedCreateWithoutPharmacyInput>
  }

  export type PrescriptionUpdateWithWhereUniqueWithoutPharmacyInput = {
    where: PrescriptionWhereUniqueInput
    data: XOR<PrescriptionUpdateWithoutPharmacyInput, PrescriptionUncheckedUpdateWithoutPharmacyInput>
  }

  export type PrescriptionUpdateManyWithWhereWithoutPharmacyInput = {
    where: PrescriptionScalarWhereInput
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyWithoutPharmacyInput>
  }

  export type MedicineUpsertWithWhereUniqueWithoutPharmaciesInput = {
    where: MedicineWhereUniqueInput
    update: XOR<MedicineUpdateWithoutPharmaciesInput, MedicineUncheckedUpdateWithoutPharmaciesInput>
    create: XOR<MedicineCreateWithoutPharmaciesInput, MedicineUncheckedCreateWithoutPharmaciesInput>
  }

  export type MedicineUpdateWithWhereUniqueWithoutPharmaciesInput = {
    where: MedicineWhereUniqueInput
    data: XOR<MedicineUpdateWithoutPharmaciesInput, MedicineUncheckedUpdateWithoutPharmaciesInput>
  }

  export type MedicineUpdateManyWithWhereWithoutPharmaciesInput = {
    where: MedicineScalarWhereInput
    data: XOR<MedicineUpdateManyMutationInput, MedicineUncheckedUpdateManyWithoutPharmaciesInput>
  }

  export type MedicineScalarWhereInput = {
    AND?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
    OR?: MedicineScalarWhereInput[]
    NOT?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
    id?: StringFilter<"Medicine"> | string
    name?: StringFilter<"Medicine"> | string
    description?: StringNullableFilter<"Medicine"> | string | null
    stock?: IntFilter<"Medicine"> | number
    price?: FloatFilter<"Medicine"> | number
    createdAt?: DateTimeFilter<"Medicine"> | Date | string
    updatedAt?: DateTimeFilter<"Medicine"> | Date | string
  }

  export type PrescriptionCreateWithoutPrescription_medicinesInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patient: PatientCreateNestedOneWithoutPrescriptionsInput
    doctor: DoctorCreateNestedOneWithoutPrescriptionsInput
    pharmacy?: PharmacyCreateNestedOneWithoutPrescriptionsInput
  }

  export type PrescriptionUncheckedCreateWithoutPrescription_medicinesInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patientId: string
    doctorId: string
    pharmacyId?: string | null
  }

  export type PrescriptionCreateOrConnectWithoutPrescription_medicinesInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutPrescription_medicinesInput, PrescriptionUncheckedCreateWithoutPrescription_medicinesInput>
  }

  export type PrescriptionCreateManyPrescription_medicinesInputEnvelope = {
    data: PrescriptionCreateManyPrescription_medicinesInput | PrescriptionCreateManyPrescription_medicinesInput[]
    skipDuplicates?: boolean
  }

  export type PharmacyCreateWithoutMedicinesInput = {
    id?: string
    pharmacyName?: string | null
    pharmacyLicenseNumber?: string | null
    pharmacyAddress?: string | null
    contactName?: string | null
    openingHours?: string | null
    deliveryOptions?: string | null
    user: UserCreateNestedOneWithoutPharmacyInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPharmacyInput
  }

  export type PharmacyUncheckedCreateWithoutMedicinesInput = {
    id?: string
    userId: string
    pharmacyName?: string | null
    pharmacyLicenseNumber?: string | null
    pharmacyAddress?: string | null
    contactName?: string | null
    openingHours?: string | null
    deliveryOptions?: string | null
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPharmacyInput
  }

  export type PharmacyCreateOrConnectWithoutMedicinesInput = {
    where: PharmacyWhereUniqueInput
    create: XOR<PharmacyCreateWithoutMedicinesInput, PharmacyUncheckedCreateWithoutMedicinesInput>
  }

  export type PrescriptionUpsertWithWhereUniqueWithoutPrescription_medicinesInput = {
    where: PrescriptionWhereUniqueInput
    update: XOR<PrescriptionUpdateWithoutPrescription_medicinesInput, PrescriptionUncheckedUpdateWithoutPrescription_medicinesInput>
    create: XOR<PrescriptionCreateWithoutPrescription_medicinesInput, PrescriptionUncheckedCreateWithoutPrescription_medicinesInput>
  }

  export type PrescriptionUpdateWithWhereUniqueWithoutPrescription_medicinesInput = {
    where: PrescriptionWhereUniqueInput
    data: XOR<PrescriptionUpdateWithoutPrescription_medicinesInput, PrescriptionUncheckedUpdateWithoutPrescription_medicinesInput>
  }

  export type PrescriptionUpdateManyWithWhereWithoutPrescription_medicinesInput = {
    where: PrescriptionScalarWhereInput
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyWithoutPrescription_medicinesInput>
  }

  export type PharmacyUpsertWithWhereUniqueWithoutMedicinesInput = {
    where: PharmacyWhereUniqueInput
    update: XOR<PharmacyUpdateWithoutMedicinesInput, PharmacyUncheckedUpdateWithoutMedicinesInput>
    create: XOR<PharmacyCreateWithoutMedicinesInput, PharmacyUncheckedCreateWithoutMedicinesInput>
  }

  export type PharmacyUpdateWithWhereUniqueWithoutMedicinesInput = {
    where: PharmacyWhereUniqueInput
    data: XOR<PharmacyUpdateWithoutMedicinesInput, PharmacyUncheckedUpdateWithoutMedicinesInput>
  }

  export type PharmacyUpdateManyWithWhereWithoutMedicinesInput = {
    where: PharmacyScalarWhereInput
    data: XOR<PharmacyUpdateManyMutationInput, PharmacyUncheckedUpdateManyWithoutMedicinesInput>
  }

  export type PharmacyScalarWhereInput = {
    AND?: PharmacyScalarWhereInput | PharmacyScalarWhereInput[]
    OR?: PharmacyScalarWhereInput[]
    NOT?: PharmacyScalarWhereInput | PharmacyScalarWhereInput[]
    id?: StringFilter<"Pharmacy"> | string
    userId?: StringFilter<"Pharmacy"> | string
    pharmacyName?: StringNullableFilter<"Pharmacy"> | string | null
    pharmacyLicenseNumber?: StringNullableFilter<"Pharmacy"> | string | null
    pharmacyAddress?: StringNullableFilter<"Pharmacy"> | string | null
    contactName?: StringNullableFilter<"Pharmacy"> | string | null
    openingHours?: StringNullableFilter<"Pharmacy"> | string | null
    deliveryOptions?: StringNullableFilter<"Pharmacy"> | string | null
  }

  export type UserCreateWithoutAdminInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    nurse?: NurseCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    nurse?: NurseUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type ReportCreateWithoutAdminInput = {
    id?: string
    details: string
    dateGenerated?: Date | string
  }

  export type ReportUncheckedCreateWithoutAdminInput = {
    id?: string
    details: string
    dateGenerated?: Date | string
  }

  export type ReportCreateOrConnectWithoutAdminInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutAdminInput, ReportUncheckedCreateWithoutAdminInput>
  }

  export type ReportCreateManyAdminInputEnvelope = {
    data: ReportCreateManyAdminInput | ReportCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAdminInput = {
    update: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    nurse?: NurseUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    nurse?: NurseUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ReportUpsertWithWhereUniqueWithoutAdminInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutAdminInput, ReportUncheckedUpdateWithoutAdminInput>
    create: XOR<ReportCreateWithoutAdminInput, ReportUncheckedCreateWithoutAdminInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutAdminInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutAdminInput, ReportUncheckedUpdateWithoutAdminInput>
  }

  export type ReportUpdateManyWithWhereWithoutAdminInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutAdminInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: StringFilter<"Report"> | string
    details?: StringFilter<"Report"> | string
    dateGenerated?: DateTimeFilter<"Report"> | Date | string
    adminId?: StringFilter<"Report"> | string
  }

  export type PatientCreateWithoutPrescriptionsInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPrescriptionsInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPrescriptionsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPrescriptionsInput, PatientUncheckedCreateWithoutPrescriptionsInput>
  }

  export type DoctorCreateWithoutPrescriptionsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutPrescriptionsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutPrescriptionsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutPrescriptionsInput, DoctorUncheckedCreateWithoutPrescriptionsInput>
  }

  export type PharmacyCreateWithoutPrescriptionsInput = {
    id?: string
    pharmacyName?: string | null
    pharmacyLicenseNumber?: string | null
    pharmacyAddress?: string | null
    contactName?: string | null
    openingHours?: string | null
    deliveryOptions?: string | null
    user: UserCreateNestedOneWithoutPharmacyInput
    medicines?: MedicineCreateNestedManyWithoutPharmaciesInput
  }

  export type PharmacyUncheckedCreateWithoutPrescriptionsInput = {
    id?: string
    userId: string
    pharmacyName?: string | null
    pharmacyLicenseNumber?: string | null
    pharmacyAddress?: string | null
    contactName?: string | null
    openingHours?: string | null
    deliveryOptions?: string | null
    medicines?: MedicineUncheckedCreateNestedManyWithoutPharmaciesInput
  }

  export type PharmacyCreateOrConnectWithoutPrescriptionsInput = {
    where: PharmacyWhereUniqueInput
    create: XOR<PharmacyCreateWithoutPrescriptionsInput, PharmacyUncheckedCreateWithoutPrescriptionsInput>
  }

  export type MedicineCreateWithoutPrescriptionsInput = {
    id?: string
    name: string
    description?: string | null
    stock?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    pharmacies?: PharmacyCreateNestedManyWithoutMedicinesInput
  }

  export type MedicineUncheckedCreateWithoutPrescriptionsInput = {
    id?: string
    name: string
    description?: string | null
    stock?: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    pharmacies?: PharmacyUncheckedCreateNestedManyWithoutMedicinesInput
  }

  export type MedicineCreateOrConnectWithoutPrescriptionsInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutPrescriptionsInput, MedicineUncheckedCreateWithoutPrescriptionsInput>
  }

  export type PatientUpsertWithoutPrescriptionsInput = {
    update: XOR<PatientUpdateWithoutPrescriptionsInput, PatientUncheckedUpdateWithoutPrescriptionsInput>
    create: XOR<PatientCreateWithoutPrescriptionsInput, PatientUncheckedCreateWithoutPrescriptionsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPrescriptionsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPrescriptionsInput, PatientUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type PatientUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type DoctorUpsertWithoutPrescriptionsInput = {
    update: XOR<DoctorUpdateWithoutPrescriptionsInput, DoctorUncheckedUpdateWithoutPrescriptionsInput>
    create: XOR<DoctorCreateWithoutPrescriptionsInput, DoctorUncheckedCreateWithoutPrescriptionsInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutPrescriptionsInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutPrescriptionsInput, DoctorUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type DoctorUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type PharmacyUpsertWithoutPrescriptionsInput = {
    update: XOR<PharmacyUpdateWithoutPrescriptionsInput, PharmacyUncheckedUpdateWithoutPrescriptionsInput>
    create: XOR<PharmacyCreateWithoutPrescriptionsInput, PharmacyUncheckedCreateWithoutPrescriptionsInput>
    where?: PharmacyWhereInput
  }

  export type PharmacyUpdateToOneWithWhereWithoutPrescriptionsInput = {
    where?: PharmacyWhereInput
    data: XOR<PharmacyUpdateWithoutPrescriptionsInput, PharmacyUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type PharmacyUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPharmacyNestedInput
    medicines?: MedicineUpdateManyWithoutPharmaciesNestedInput
  }

  export type PharmacyUncheckedUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
    medicines?: MedicineUncheckedUpdateManyWithoutPharmaciesNestedInput
  }

  export type MedicineUpsertWithoutPrescriptionsInput = {
    update: XOR<MedicineUpdateWithoutPrescriptionsInput, MedicineUncheckedUpdateWithoutPrescriptionsInput>
    create: XOR<MedicineCreateWithoutPrescriptionsInput, MedicineUncheckedCreateWithoutPrescriptionsInput>
    where?: MedicineWhereInput
  }

  export type MedicineUpdateToOneWithWhereWithoutPrescriptionsInput = {
    where?: MedicineWhereInput
    data: XOR<MedicineUpdateWithoutPrescriptionsInput, MedicineUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type MedicineUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pharmacies?: PharmacyUpdateManyWithoutMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pharmacies?: PharmacyUncheckedUpdateManyWithoutMedicinesNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    nurse?: NurseCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    nurse?: NurseUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notificationReads?: NotificationReadUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type NotificationReadCreateWithoutNotificationInput = {
    id?: string
    readAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationReadsInput
  }

  export type NotificationReadUncheckedCreateWithoutNotificationInput = {
    id?: string
    userId: string
    readAt?: Date | string
  }

  export type NotificationReadCreateOrConnectWithoutNotificationInput = {
    where: NotificationReadWhereUniqueInput
    create: XOR<NotificationReadCreateWithoutNotificationInput, NotificationReadUncheckedCreateWithoutNotificationInput>
  }

  export type NotificationReadCreateManyNotificationInputEnvelope = {
    data: NotificationReadCreateManyNotificationInput | NotificationReadCreateManyNotificationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    nurse?: NurseUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    nurse?: NurseUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notificationReads?: NotificationReadUncheckedUpdateOneWithoutUserNestedInput
  }

  export type NotificationReadUpsertWithWhereUniqueWithoutNotificationInput = {
    where: NotificationReadWhereUniqueInput
    update: XOR<NotificationReadUpdateWithoutNotificationInput, NotificationReadUncheckedUpdateWithoutNotificationInput>
    create: XOR<NotificationReadCreateWithoutNotificationInput, NotificationReadUncheckedCreateWithoutNotificationInput>
  }

  export type NotificationReadUpdateWithWhereUniqueWithoutNotificationInput = {
    where: NotificationReadWhereUniqueInput
    data: XOR<NotificationReadUpdateWithoutNotificationInput, NotificationReadUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationReadUpdateManyWithWhereWithoutNotificationInput = {
    where: NotificationReadScalarWhereInput
    data: XOR<NotificationReadUpdateManyMutationInput, NotificationReadUncheckedUpdateManyWithoutNotificationInput>
  }

  export type NotificationReadScalarWhereInput = {
    AND?: NotificationReadScalarWhereInput | NotificationReadScalarWhereInput[]
    OR?: NotificationReadScalarWhereInput[]
    NOT?: NotificationReadScalarWhereInput | NotificationReadScalarWhereInput[]
    id?: StringFilter<"NotificationRead"> | string
    notificationId?: StringFilter<"NotificationRead"> | string
    userId?: StringFilter<"NotificationRead"> | string
    readAt?: DateTimeFilter<"NotificationRead"> | Date | string
  }

  export type NotificationCreateWithoutReadByInput = {
    id?: string
    type: string
    title: string
    message: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutReadByInput = {
    id?: string
    userId: string
    type: string
    title: string
    message: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutReadByInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutReadByInput, NotificationUncheckedCreateWithoutReadByInput>
  }

  export type UserCreateWithoutNotificationReadsInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    nurse?: NurseCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationReadsInput = {
    id?: string
    email: string
    firstname: string
    lastname: string
    password: string
    role: $Enums.Role
    telephoneNumber?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    address?: string | null
    profilePhoto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    nurse?: NurseUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    pharmacy?: PharmacyUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationReadsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationReadsInput, UserUncheckedCreateWithoutNotificationReadsInput>
  }

  export type NotificationUpsertWithoutReadByInput = {
    update: XOR<NotificationUpdateWithoutReadByInput, NotificationUncheckedUpdateWithoutReadByInput>
    create: XOR<NotificationCreateWithoutReadByInput, NotificationUncheckedCreateWithoutReadByInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutReadByInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutReadByInput, NotificationUncheckedUpdateWithoutReadByInput>
  }

  export type NotificationUpdateWithoutReadByInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutReadByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutNotificationReadsInput = {
    update: XOR<UserUpdateWithoutNotificationReadsInput, UserUncheckedUpdateWithoutNotificationReadsInput>
    create: XOR<UserCreateWithoutNotificationReadsInput, UserUncheckedCreateWithoutNotificationReadsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationReadsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationReadsInput, UserUncheckedUpdateWithoutNotificationReadsInput>
  }

  export type UserUpdateWithoutNotificationReadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    nurse?: NurseUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationReadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    telephoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    nurse?: NurseUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    pharmacy?: PharmacyUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PatientCreateWithoutMedicalRecordInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMedicalRecordInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMedicalRecordInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
  }

  export type NurseCreateWithoutMedicalRecordsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutMedicalRecordsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutMedicalRecordsInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutMedicalRecordsInput, NurseUncheckedCreateWithoutMedicalRecordsInput>
  }

  export type DoctorCreateWithoutMedicalRecordsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutMedicalRecordsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutMedicalRecordsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutMedicalRecordsInput, DoctorUncheckedCreateWithoutMedicalRecordsInput>
  }

  export type PatientUpsertWithoutMedicalRecordInput = {
    update: XOR<PatientUpdateWithoutMedicalRecordInput, PatientUncheckedUpdateWithoutMedicalRecordInput>
    create: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutMedicalRecordInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutMedicalRecordInput, PatientUncheckedUpdateWithoutMedicalRecordInput>
  }

  export type PatientUpdateWithoutMedicalRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMedicalRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type NurseUpsertWithWhereUniqueWithoutMedicalRecordsInput = {
    where: NurseWhereUniqueInput
    update: XOR<NurseUpdateWithoutMedicalRecordsInput, NurseUncheckedUpdateWithoutMedicalRecordsInput>
    create: XOR<NurseCreateWithoutMedicalRecordsInput, NurseUncheckedCreateWithoutMedicalRecordsInput>
  }

  export type NurseUpdateWithWhereUniqueWithoutMedicalRecordsInput = {
    where: NurseWhereUniqueInput
    data: XOR<NurseUpdateWithoutMedicalRecordsInput, NurseUncheckedUpdateWithoutMedicalRecordsInput>
  }

  export type NurseUpdateManyWithWhereWithoutMedicalRecordsInput = {
    where: NurseScalarWhereInput
    data: XOR<NurseUpdateManyMutationInput, NurseUncheckedUpdateManyWithoutMedicalRecordsInput>
  }

  export type DoctorUpsertWithWhereUniqueWithoutMedicalRecordsInput = {
    where: DoctorWhereUniqueInput
    update: XOR<DoctorUpdateWithoutMedicalRecordsInput, DoctorUncheckedUpdateWithoutMedicalRecordsInput>
    create: XOR<DoctorCreateWithoutMedicalRecordsInput, DoctorUncheckedCreateWithoutMedicalRecordsInput>
  }

  export type DoctorUpdateWithWhereUniqueWithoutMedicalRecordsInput = {
    where: DoctorWhereUniqueInput
    data: XOR<DoctorUpdateWithoutMedicalRecordsInput, DoctorUncheckedUpdateWithoutMedicalRecordsInput>
  }

  export type DoctorUpdateManyWithWhereWithoutMedicalRecordsInput = {
    where: DoctorScalarWhereInput
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyWithoutMedicalRecordsInput>
  }

  export type AdminCreateWithoutReportsInput = {
    id?: string
    user: UserCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutReportsInput = {
    id?: string
    userId: string
  }

  export type AdminCreateOrConnectWithoutReportsInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutReportsInput, AdminUncheckedCreateWithoutReportsInput>
  }

  export type AdminUpsertWithoutReportsInput = {
    update: XOR<AdminUpdateWithoutReportsInput, AdminUncheckedUpdateWithoutReportsInput>
    create: XOR<AdminCreateWithoutReportsInput, AdminUncheckedCreateWithoutReportsInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutReportsInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutReportsInput, AdminUncheckedUpdateWithoutReportsInput>
  }

  export type AdminUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NurseCreateWithoutNurseVisitsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutNurseVisitsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutNurseVisitsInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutNurseVisitsInput, NurseUncheckedCreateWithoutNurseVisitsInput>
  }

  export type PatientCreateWithoutNurseVisitsInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutNurseVisitsInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutNurseVisitsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutNurseVisitsInput, PatientUncheckedCreateWithoutNurseVisitsInput>
  }

  export type NurseUpsertWithoutNurseVisitsInput = {
    update: XOR<NurseUpdateWithoutNurseVisitsInput, NurseUncheckedUpdateWithoutNurseVisitsInput>
    create: XOR<NurseCreateWithoutNurseVisitsInput, NurseUncheckedCreateWithoutNurseVisitsInput>
    where?: NurseWhereInput
  }

  export type NurseUpdateToOneWithWhereWithoutNurseVisitsInput = {
    where?: NurseWhereInput
    data: XOR<NurseUpdateWithoutNurseVisitsInput, NurseUncheckedUpdateWithoutNurseVisitsInput>
  }

  export type NurseUpdateWithoutNurseVisitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutNurseVisitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type PatientUpsertWithoutNurseVisitsInput = {
    update: XOR<PatientUpdateWithoutNurseVisitsInput, PatientUncheckedUpdateWithoutNurseVisitsInput>
    create: XOR<PatientCreateWithoutNurseVisitsInput, PatientUncheckedCreateWithoutNurseVisitsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutNurseVisitsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutNurseVisitsInput, PatientUncheckedUpdateWithoutNurseVisitsInput>
  }

  export type PatientUpdateWithoutNurseVisitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutNurseVisitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateWithoutChatRoomsInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutChatRoomsInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutChatRoomsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutChatRoomsInput, PatientUncheckedCreateWithoutChatRoomsInput>
  }

  export type DoctorCreateWithoutChatRoomsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutChatRoomsInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutChatRoomsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutChatRoomsInput, DoctorUncheckedCreateWithoutChatRoomsInput>
  }

  export type MessageCreateWithoutChatRoomInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoomPatientNurse?: ChatRoomPatientNurseCreateNestedOneWithoutMessagesInput
    chatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutChatRoomInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoomPatientNurseId?: string | null
    chatRoomDoctorNursePatientId?: string | null
  }

  export type MessageCreateOrConnectWithoutChatRoomInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput>
  }

  export type MessageCreateManyChatRoomInputEnvelope = {
    data: MessageCreateManyChatRoomInput | MessageCreateManyChatRoomInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutChatRoomsInput = {
    update: XOR<PatientUpdateWithoutChatRoomsInput, PatientUncheckedUpdateWithoutChatRoomsInput>
    create: XOR<PatientCreateWithoutChatRoomsInput, PatientUncheckedCreateWithoutChatRoomsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutChatRoomsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutChatRoomsInput, PatientUncheckedUpdateWithoutChatRoomsInput>
  }

  export type PatientUpdateWithoutChatRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutChatRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type DoctorUpsertWithoutChatRoomsInput = {
    update: XOR<DoctorUpdateWithoutChatRoomsInput, DoctorUncheckedUpdateWithoutChatRoomsInput>
    create: XOR<DoctorCreateWithoutChatRoomsInput, DoctorUncheckedCreateWithoutChatRoomsInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutChatRoomsInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutChatRoomsInput, DoctorUncheckedUpdateWithoutChatRoomsInput>
  }

  export type DoctorUpdateWithoutChatRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutChatRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutChatRoomInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatRoomInput, MessageUncheckedUpdateWithoutChatRoomInput>
    create: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatRoomInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatRoomInput, MessageUncheckedUpdateWithoutChatRoomInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatRoomInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChatRoomInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    senderId?: StringFilter<"Message"> | string
    isRead?: BoolFilter<"Message"> | boolean
    readAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    senderRole?: EnumRoleFilter<"Message"> | $Enums.Role
    chatRoomId?: StringNullableFilter<"Message"> | string | null
    chatRoomPatientNurseId?: StringNullableFilter<"Message"> | string | null
    chatRoomDoctorNursePatientId?: StringNullableFilter<"Message"> | string | null
  }

  export type NurseCreateWithoutNurseChatsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutNurseChatsInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutNurseChatsInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutNurseChatsInput, NurseUncheckedCreateWithoutNurseChatsInput>
  }

  export type PatientCreateWithoutChatRoomPatientsInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutChatRoomPatientsInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutChatRoomPatientsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutChatRoomPatientsInput, PatientUncheckedCreateWithoutChatRoomPatientsInput>
  }

  export type MessageCreateWithoutChatRoomPatientNurseInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoom?: ChatRoomCreateNestedOneWithoutMessagesInput
    chatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutChatRoomPatientNurseInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoomId?: string | null
    chatRoomDoctorNursePatientId?: string | null
  }

  export type MessageCreateOrConnectWithoutChatRoomPatientNurseInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatRoomPatientNurseInput, MessageUncheckedCreateWithoutChatRoomPatientNurseInput>
  }

  export type MessageCreateManyChatRoomPatientNurseInputEnvelope = {
    data: MessageCreateManyChatRoomPatientNurseInput | MessageCreateManyChatRoomPatientNurseInput[]
    skipDuplicates?: boolean
  }

  export type NurseUpsertWithoutNurseChatsInput = {
    update: XOR<NurseUpdateWithoutNurseChatsInput, NurseUncheckedUpdateWithoutNurseChatsInput>
    create: XOR<NurseCreateWithoutNurseChatsInput, NurseUncheckedCreateWithoutNurseChatsInput>
    where?: NurseWhereInput
  }

  export type NurseUpdateToOneWithWhereWithoutNurseChatsInput = {
    where?: NurseWhereInput
    data: XOR<NurseUpdateWithoutNurseChatsInput, NurseUncheckedUpdateWithoutNurseChatsInput>
  }

  export type NurseUpdateWithoutNurseChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutNurseChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type PatientUpsertWithoutChatRoomPatientsInput = {
    update: XOR<PatientUpdateWithoutChatRoomPatientsInput, PatientUncheckedUpdateWithoutChatRoomPatientsInput>
    create: XOR<PatientCreateWithoutChatRoomPatientsInput, PatientUncheckedCreateWithoutChatRoomPatientsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutChatRoomPatientsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutChatRoomPatientsInput, PatientUncheckedUpdateWithoutChatRoomPatientsInput>
  }

  export type PatientUpdateWithoutChatRoomPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutChatRoomPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutChatRoomPatientNurseInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatRoomPatientNurseInput, MessageUncheckedUpdateWithoutChatRoomPatientNurseInput>
    create: XOR<MessageCreateWithoutChatRoomPatientNurseInput, MessageUncheckedCreateWithoutChatRoomPatientNurseInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatRoomPatientNurseInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatRoomPatientNurseInput, MessageUncheckedUpdateWithoutChatRoomPatientNurseInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatRoomPatientNurseInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChatRoomPatientNurseInput>
  }

  export type DoctorCreateWithoutChatRoomDoctorNursePatientInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    deletedAt?: Date | string | null
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    patients?: DoctorPatientCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomCreateNestedManyWithoutDoctorInput
    nurses?: NurseCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutDoctorInput
    tasks?: TaskCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutChatRoomDoctorNursePatientInput = {
    id?: string
    specialization?: string | null
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    medicalDiploma?: string | null
    hospitalAffiliation?: string | null
    experience?: string | null
    userId: string
    deletedAt?: Date | string | null
    isDeleted?: boolean
    patients?: DoctorPatientUncheckedCreateNestedManyWithoutDoctorInput
    patientRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorsInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutDoctorInput
    nurses?: NurseUncheckedCreateNestedManyWithoutDoctorsInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutDoctorInput
    tasks?: TaskUncheckedCreateNestedManyWithoutDoctorInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutChatRoomDoctorNursePatientInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutChatRoomDoctorNursePatientInput, DoctorUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
  }

  export type NurseCreateWithoutChatRoomDoctorNursePatientInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    user: UserCreateNestedOneWithoutNurseInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseCreateNestedManyWithoutNurseInput
    doctors?: DoctorCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutNurseInput
    tasks?: TaskCreateNestedManyWithoutNurseInput
  }

  export type NurseUncheckedCreateWithoutChatRoomDoctorNursePatientInput = {
    id?: string
    availability?: boolean
    rating?: number
    professionalLicenseNumber?: string | null
    nursingCertification?: string | null
    hospitalAffiliation?: string | null
    yearsOfExperience?: number | null
    userId: string
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutNurseInput
    medicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutNursesInput
    serviceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutNurseInput
    nurseChats?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutNurseInput
    doctors?: DoctorUncheckedCreateNestedManyWithoutNursesInput
    doctorNurses?: DoctorNurseUncheckedCreateNestedManyWithoutNurseInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutNurseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutNurseInput
  }

  export type NurseCreateOrConnectWithoutChatRoomDoctorNursePatientInput = {
    where: NurseWhereUniqueInput
    create: XOR<NurseCreateWithoutChatRoomDoctorNursePatientInput, NurseUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
  }

  export type PatientCreateWithoutChatRoomDoctorNursePatientInput = {
    id?: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    user: UserCreateNestedOneWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutChatRoomDoctorNursePatientInput = {
    id?: string
    userId: string
    allergies?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactRelationship?: string | null
    insuranceInfo?: string | null
    preferredPharmacy?: string | null
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
    nurseVisits?: NurseVisitUncheckedCreateNestedManyWithoutPatientInput
    doctorRequests?: DoctorPatientRequestUncheckedCreateNestedManyWithoutPatientInput
    doctors?: DoctorPatientUncheckedCreateNestedManyWithoutPatientInput
    nurseServiceRequests?: NurseServiceRequestUncheckedCreateNestedManyWithoutPatientInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutPatientInput
    scheduledTasks?: ScheduleUncheckedCreateNestedManyWithoutPatientInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutChatRoomDoctorNursePatientInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutChatRoomDoctorNursePatientInput, PatientUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
  }

  export type MessageCreateWithoutChatRoomDoctorNursePatientInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoom?: ChatRoomCreateNestedOneWithoutMessagesInput
    chatRoomPatientNurse?: ChatRoomPatientNurseCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoomId?: string | null
    chatRoomPatientNurseId?: string | null
  }

  export type MessageCreateOrConnectWithoutChatRoomDoctorNursePatientInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatRoomDoctorNursePatientInput, MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
  }

  export type MessageCreateManyChatRoomDoctorNursePatientInputEnvelope = {
    data: MessageCreateManyChatRoomDoctorNursePatientInput | MessageCreateManyChatRoomDoctorNursePatientInput[]
    skipDuplicates?: boolean
  }

  export type DoctorUpsertWithoutChatRoomDoctorNursePatientInput = {
    update: XOR<DoctorUpdateWithoutChatRoomDoctorNursePatientInput, DoctorUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
    create: XOR<DoctorCreateWithoutChatRoomDoctorNursePatientInput, DoctorUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutChatRoomDoctorNursePatientInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutChatRoomDoctorNursePatientInput, DoctorUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
  }

  export type DoctorUpdateWithoutChatRoomDoctorNursePatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutChatRoomDoctorNursePatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type NurseUpsertWithoutChatRoomDoctorNursePatientInput = {
    update: XOR<NurseUpdateWithoutChatRoomDoctorNursePatientInput, NurseUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
    create: XOR<NurseCreateWithoutChatRoomDoctorNursePatientInput, NurseUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
    where?: NurseWhereInput
  }

  export type NurseUpdateToOneWithWhereWithoutChatRoomDoctorNursePatientInput = {
    where?: NurseWhereInput
    data: XOR<NurseUpdateWithoutChatRoomDoctorNursePatientInput, NurseUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
  }

  export type NurseUpdateWithoutChatRoomDoctorNursePatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutChatRoomDoctorNursePatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type PatientUpsertWithoutChatRoomDoctorNursePatientInput = {
    update: XOR<PatientUpdateWithoutChatRoomDoctorNursePatientInput, PatientUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
    create: XOR<PatientCreateWithoutChatRoomDoctorNursePatientInput, PatientUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutChatRoomDoctorNursePatientInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutChatRoomDoctorNursePatientInput, PatientUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
  }

  export type PatientUpdateWithoutChatRoomDoctorNursePatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutChatRoomDoctorNursePatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPharmacy?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutPatientNestedInput
    doctorRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutPatientNestedInput
    doctors?: DoctorPatientUncheckedUpdateManyWithoutPatientNestedInput
    nurseServiceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutPatientNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutPatientNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutPatientNestedInput
    chatRoomPatients?: ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutChatRoomDoctorNursePatientInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatRoomDoctorNursePatientInput, MessageUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
    create: XOR<MessageCreateWithoutChatRoomDoctorNursePatientInput, MessageUncheckedCreateWithoutChatRoomDoctorNursePatientInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatRoomDoctorNursePatientInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatRoomDoctorNursePatientInput, MessageUncheckedUpdateWithoutChatRoomDoctorNursePatientInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatRoomDoctorNursePatientInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChatRoomDoctorNursePatientInput>
  }

  export type ChatRoomCreateWithoutMessagesInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutChatRoomsInput
    doctor: DoctorCreateNestedOneWithoutChatRoomsInput
  }

  export type ChatRoomUncheckedCreateWithoutMessagesInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
    doctorId: string
  }

  export type ChatRoomCreateOrConnectWithoutMessagesInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type ChatRoomPatientNurseCreateWithoutMessagesInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurse: NurseCreateNestedOneWithoutNurseChatsInput
    patient: PatientCreateNestedOneWithoutChatRoomPatientsInput
  }

  export type ChatRoomPatientNurseUncheckedCreateWithoutMessagesInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurseId: string
    patientId: string
  }

  export type ChatRoomPatientNurseCreateOrConnectWithoutMessagesInput = {
    where: ChatRoomPatientNurseWhereUniqueInput
    create: XOR<ChatRoomPatientNurseCreateWithoutMessagesInput, ChatRoomPatientNurseUncheckedCreateWithoutMessagesInput>
  }

  export type ChatRoomDoctorNursePatientCreateWithoutMessagesInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: DoctorCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    nurse?: NurseCreateNestedOneWithoutChatRoomDoctorNursePatientInput
    patient?: PatientCreateNestedOneWithoutChatRoomDoctorNursePatientInput
  }

  export type ChatRoomDoctorNursePatientUncheckedCreateWithoutMessagesInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: string | null
    nurseId?: string | null
    patientId?: string | null
  }

  export type ChatRoomDoctorNursePatientCreateOrConnectWithoutMessagesInput = {
    where: ChatRoomDoctorNursePatientWhereUniqueInput
    create: XOR<ChatRoomDoctorNursePatientCreateWithoutMessagesInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutMessagesInput>
  }

  export type ChatRoomUpsertWithoutMessagesInput = {
    update: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutChatRoomsNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutChatRoomsNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatRoomPatientNurseUpsertWithoutMessagesInput = {
    update: XOR<ChatRoomPatientNurseUpdateWithoutMessagesInput, ChatRoomPatientNurseUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatRoomPatientNurseCreateWithoutMessagesInput, ChatRoomPatientNurseUncheckedCreateWithoutMessagesInput>
    where?: ChatRoomPatientNurseWhereInput
  }

  export type ChatRoomPatientNurseUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatRoomPatientNurseWhereInput
    data: XOR<ChatRoomPatientNurseUpdateWithoutMessagesInput, ChatRoomPatientNurseUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomPatientNurseUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurse?: NurseUpdateOneRequiredWithoutNurseChatsNestedInput
    patient?: PatientUpdateOneRequiredWithoutChatRoomPatientsNestedInput
  }

  export type ChatRoomPatientNurseUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurseId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatRoomDoctorNursePatientUpsertWithoutMessagesInput = {
    update: XOR<ChatRoomDoctorNursePatientUpdateWithoutMessagesInput, ChatRoomDoctorNursePatientUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatRoomDoctorNursePatientCreateWithoutMessagesInput, ChatRoomDoctorNursePatientUncheckedCreateWithoutMessagesInput>
    where?: ChatRoomDoctorNursePatientWhereInput
  }

  export type ChatRoomDoctorNursePatientUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatRoomDoctorNursePatientWhereInput
    data: XOR<ChatRoomDoctorNursePatientUpdateWithoutMessagesInput, ChatRoomDoctorNursePatientUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomDoctorNursePatientUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    nurse?: NurseUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    patient?: PatientUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MedicalRecordCreateManyPatientInput = {
    id?: string
    diagnosis: string
    treatment: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionCreateManyPatientInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    doctorId: string
    medicines_id?: string | null
    pharmacyId?: string | null
  }

  export type NurseVisitCreateManyPatientInput = {
    id?: string
    date?: Date | string
    notes?: string | null
    nurseId: string
  }

  export type DoctorPatientRequestCreateManyPatientInput = {
    id?: string
    doctorId: string
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    message?: string | null
  }

  export type DoctorPatientCreateManyPatientInput = {
    id?: string
    doctorId: string
    startDate?: Date | string
    endDate?: Date | string | null
    active?: boolean
  }

  export type NurseServiceRequestCreateManyPatientInput = {
    id?: string
    nurseId?: string | null
    status?: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date | string
    urgency: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type ChatRoomCreateManyPatientInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId: string
  }

  export type ScheduleCreateManyPatientInput = {
    id?: string
    doctorId?: string | null
    nurseId?: string | null
    taskId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatRoomDoctorNursePatientCreateManyPatientInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: string | null
    nurseId?: string | null
  }

  export type ChatRoomPatientNurseCreateManyPatientInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurseId: string
  }

  export type MedicalRecordUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurses?: NurseUpdateManyWithoutMedicalRecordsNestedInput
    doctors?: DoctorUpdateManyWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurses?: NurseUncheckedUpdateManyWithoutMedicalRecordsNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    doctor?: DoctorUpdateOneRequiredWithoutPrescriptionsNestedInput
    pharmacy?: PharmacyUpdateOneWithoutPrescriptionsNestedInput
    prescription_medicines?: MedicineUpdateOneWithoutPrescriptionsNestedInput
  }

  export type PrescriptionUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    doctorId?: StringFieldUpdateOperationsInput | string
    medicines_id?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PrescriptionUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    doctorId?: StringFieldUpdateOperationsInput | string
    medicines_id?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NurseVisitUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    nurse?: NurseUpdateOneRequiredWithoutNurseVisitsNestedInput
  }

  export type NurseVisitUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: StringFieldUpdateOperationsInput | string
  }

  export type NurseVisitUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorPatientRequestUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    doctor?: DoctorUpdateOneRequiredWithoutPatientRequestsNestedInput
  }

  export type DoctorPatientRequestUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorPatientRequestUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorPatientUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    doctor?: DoctorUpdateOneRequiredWithoutPatientsNestedInput
  }

  export type DoctorPatientUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorPatientUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NurseServiceRequestUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    nurse?: NurseUpdateOneWithoutServiceRequestsNestedInput
  }

  export type NurseServiceRequestUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NurseServiceRequestUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatRoomUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutChatRoomsNestedInput
    messages?: MessageUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: StringFieldUpdateOperationsInput | string
  }

  export type ScheduleUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneWithoutScheduledTasksNestedInput
    nurse?: NurseUpdateOneWithoutScheduledTasksNestedInput
    task?: TaskUpdateOneWithoutScheduledTasksNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomDoctorNursePatientUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    nurse?: NurseUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    messages?: MessageUpdateManyWithoutChatRoomDoctorNursePatientNestedInput
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutChatRoomDoctorNursePatientNestedInput
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatRoomPatientNurseUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurse?: NurseUpdateOneRequiredWithoutNurseChatsNestedInput
    messages?: MessageUpdateManyWithoutChatRoomPatientNurseNestedInput
  }

  export type ChatRoomPatientNurseUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurseId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutChatRoomPatientNurseNestedInput
  }

  export type ChatRoomPatientNurseUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurseId?: StringFieldUpdateOperationsInput | string
  }

  export type NurseVisitCreateManyNurseInput = {
    id?: string
    date?: Date | string
    notes?: string | null
    patientId: string
  }

  export type NurseServiceRequestCreateManyNurseInput = {
    id?: string
    patientId: string
    status?: $Enums.ServiceStatus
    serviceType: string
    description: string
    preferredDate: Date | string
    urgency: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type ChatRoomPatientNurseCreateManyNurseInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
  }

  export type ChatRoomDoctorNursePatientCreateManyNurseInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: string | null
    patientId?: string | null
  }

  export type DoctorNurseCreateManyNurseInput = {
    id?: string
    doctorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateManyNurseInput = {
    id?: string
    doctorId?: string | null
    patientId?: string | null
    taskId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateManyNurseInput = {
    id?: string
    doctorId: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type NurseVisitUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneRequiredWithoutNurseVisitsNestedInput
  }

  export type NurseVisitUncheckedUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type NurseVisitUncheckedUpdateManyWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type MedicalRecordUpdateWithoutNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutMedicalRecordNestedInput
    doctors?: DoctorUpdateManyWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctors?: DoctorUncheckedUpdateManyWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateManyWithoutNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NurseServiceRequestUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneRequiredWithoutNurseServiceRequestsNestedInput
  }

  export type NurseServiceRequestUncheckedUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NurseServiceRequestUncheckedUpdateManyWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    status?: EnumServiceStatusFieldUpdateOperationsInput | $Enums.ServiceStatus
    serviceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preferredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    urgency?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatRoomPatientNurseUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutChatRoomPatientsNestedInput
    messages?: MessageUpdateManyWithoutChatRoomPatientNurseNestedInput
  }

  export type ChatRoomPatientNurseUncheckedUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutChatRoomPatientNurseNestedInput
  }

  export type ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatRoomDoctorNursePatientUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    patient?: PatientUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    messages?: MessageUpdateManyWithoutChatRoomDoctorNursePatientNestedInput
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutChatRoomDoctorNursePatientNestedInput
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorUpdateWithoutNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutDoctorsNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateManyWithoutNursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorNurseUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutDoctorNursesNestedInput
  }

  export type DoctorNurseUncheckedUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNurseUncheckedUpdateManyWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneWithoutScheduledTasksNestedInput
    patient?: PatientUpdateOneWithoutScheduledTasksNestedInput
    task?: TaskUpdateOneWithoutScheduledTasksNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doctor?: DoctorUpdateOneRequiredWithoutTasksNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoctorPatientCreateManyDoctorInput = {
    id?: string
    patientId: string
    startDate?: Date | string
    endDate?: Date | string | null
    active?: boolean
  }

  export type DoctorPatientRequestCreateManyDoctorInput = {
    id?: string
    patientId: string
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    message?: string | null
  }

  export type PrescriptionCreateManyDoctorInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patientId: string
    medicines_id?: string | null
    pharmacyId?: string | null
  }

  export type ChatRoomCreateManyDoctorInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
  }

  export type ChatRoomDoctorNursePatientCreateManyDoctorInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nurseId?: string | null
    patientId?: string | null
  }

  export type DoctorNurseCreateManyDoctorInput = {
    id?: string
    nurseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateManyDoctorInput = {
    id?: string
    nurseId: string
    details: string
    status?: $Enums.TaskStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ScheduleCreateManyDoctorInput = {
    id?: string
    nurseId?: string | null
    patientId?: string | null
    taskId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorPatientUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    patient?: PatientUpdateOneRequiredWithoutDoctorsNestedInput
  }

  export type DoctorPatientUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorPatientUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorPatientRequestUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneRequiredWithoutDoctorRequestsNestedInput
  }

  export type DoctorPatientRequestUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorPatientRequestUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MedicalRecordUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutMedicalRecordNestedInput
    nurses?: NurseUpdateManyWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurses?: NurseUncheckedUpdateManyWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateManyWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatment?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patient?: PatientUpdateOneRequiredWithoutPrescriptionsNestedInput
    pharmacy?: PharmacyUpdateOneWithoutPrescriptionsNestedInput
    prescription_medicines?: MedicineUpdateOneWithoutPrescriptionsNestedInput
  }

  export type PrescriptionUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patientId?: StringFieldUpdateOperationsInput | string
    medicines_id?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PrescriptionUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patientId?: StringFieldUpdateOperationsInput | string
    medicines_id?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatRoomUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutChatRoomsNestedInput
    messages?: MessageUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatRoomDoctorNursePatientUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurse?: NurseUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    patient?: PatientUpdateOneWithoutChatRoomDoctorNursePatientNestedInput
    messages?: MessageUpdateManyWithoutChatRoomDoctorNursePatientNestedInput
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutChatRoomDoctorNursePatientNestedInput
  }

  export type ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NurseUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    medicalRecords?: MedicalRecordUncheckedUpdateManyWithoutNursesNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateManyWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorNurseUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurse?: NurseUpdateOneRequiredWithoutDoctorNursesNestedInput
  }

  export type DoctorNurseUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nurseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorNurseUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nurseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nurse?: NurseUpdateOneRequiredWithoutTasksNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nurseId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nurseId?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScheduleUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nurse?: NurseUpdateOneWithoutScheduledTasksNestedInput
    patient?: PatientUpdateOneWithoutScheduledTasksNestedInput
    task?: TaskUpdateOneWithoutScheduledTasksNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateManyTaskInput = {
    id?: string
    doctorId?: string | null
    nurseId?: string | null
    patientId?: string | null
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    status?: string
    location?: string | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneWithoutScheduledTasksNestedInput
    nurse?: NurseUpdateOneWithoutScheduledTasksNestedInput
    patient?: PatientUpdateOneWithoutScheduledTasksNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    nurseId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionCreateManyPharmacyInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patientId: string
    doctorId: string
    medicines_id?: string | null
  }

  export type PrescriptionUpdateWithoutPharmacyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patient?: PatientUpdateOneRequiredWithoutPrescriptionsNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutPrescriptionsNestedInput
    prescription_medicines?: MedicineUpdateOneWithoutPrescriptionsNestedInput
  }

  export type PrescriptionUncheckedUpdateWithoutPharmacyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    medicines_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PrescriptionUncheckedUpdateManyWithoutPharmacyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    medicines_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MedicineUpdateWithoutPharmaciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prescriptions?: PrescriptionUpdateManyWithoutPrescription_medicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutPharmaciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPrescription_medicinesNestedInput
  }

  export type MedicineUncheckedUpdateManyWithoutPharmaciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionCreateManyPrescription_medicinesInput = {
    id?: string
    date?: Date | string
    details: string
    approved?: boolean
    patientId: string
    doctorId: string
    pharmacyId?: string | null
  }

  export type PrescriptionUpdateWithoutPrescription_medicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patient?: PatientUpdateOneRequiredWithoutPrescriptionsNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutPrescriptionsNestedInput
    pharmacy?: PharmacyUpdateOneWithoutPrescriptionsNestedInput
  }

  export type PrescriptionUncheckedUpdateWithoutPrescription_medicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    pharmacyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PrescriptionUncheckedUpdateManyWithoutPrescription_medicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    pharmacyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PharmacyUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPharmacyNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutPharmacyNestedInput
  }

  export type PharmacyUncheckedUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutPharmacyNestedInput
  }

  export type PharmacyUncheckedUpdateManyWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pharmacyName?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    pharmacyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    openingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryOptions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportCreateManyAdminInput = {
    id?: string
    details: string
    dateGenerated?: Date | string
  }

  export type ReportUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    dateGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    dateGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    dateGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationReadCreateManyNotificationInput = {
    id?: string
    userId: string
    readAt?: Date | string
  }

  export type NotificationReadUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationReadsNestedInput
  }

  export type NotificationReadUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationReadUncheckedUpdateManyWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NurseUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutNurseNestedInput
    nurseVisits?: NurseVisitUpdateManyWithoutNurseNestedInput
    serviceRequests?: NurseServiceRequestUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutNurseNestedInput
    tasks?: TaskUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    nurseVisits?: NurseVisitUncheckedUpdateManyWithoutNurseNestedInput
    serviceRequests?: NurseServiceRequestUncheckedUpdateManyWithoutNurseNestedInput
    nurseChats?: ChatRoomPatientNurseUncheckedUpdateManyWithoutNurseNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutNurseNestedInput
    doctors?: DoctorUncheckedUpdateManyWithoutNursesNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutNurseNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutNurseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutNurseNestedInput
  }

  export type NurseUncheckedUpdateManyWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nursingCertification?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    patients?: DoctorPatientUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUpdateManyWithoutDoctorNestedInput
    prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    patients?: DoctorPatientUncheckedUpdateManyWithoutDoctorNestedInput
    patientRequests?: DoctorPatientRequestUncheckedUpdateManyWithoutDoctorNestedInput
    prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutDoctorNestedInput
    ChatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUncheckedUpdateManyWithoutDoctorNestedInput
    nurses?: NurseUncheckedUpdateManyWithoutDoctorsNestedInput
    doctorNurses?: DoctorNurseUncheckedUpdateManyWithoutDoctorNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutDoctorNestedInput
    scheduledTasks?: ScheduleUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateManyWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    rating?: FloatFieldUpdateOperationsInput | number
    professionalLicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDiploma?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageCreateManyChatRoomInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoomPatientNurseId?: string | null
    chatRoomDoctorNursePatientId?: string | null
  }

  export type MessageUpdateWithoutChatRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoomPatientNurse?: ChatRoomPatientNurseUpdateOneWithoutMessagesNestedInput
    chatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutChatRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoomPatientNurseId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomDoctorNursePatientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateManyWithoutChatRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoomPatientNurseId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomDoctorNursePatientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateManyChatRoomPatientNurseInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoomId?: string | null
    chatRoomDoctorNursePatientId?: string | null
  }

  export type MessageUpdateWithoutChatRoomPatientNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoom?: ChatRoomUpdateOneWithoutMessagesNestedInput
    chatRoomDoctorNursePatient?: ChatRoomDoctorNursePatientUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutChatRoomPatientNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomDoctorNursePatientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateManyWithoutChatRoomPatientNurseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomDoctorNursePatientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateManyChatRoomDoctorNursePatientInput = {
    id?: string
    content: string
    createdAt?: Date | string
    senderId: string
    isRead?: boolean
    readAt?: Date | string | null
    senderRole: $Enums.Role
    chatRoomId?: string | null
    chatRoomPatientNurseId?: string | null
  }

  export type MessageUpdateWithoutChatRoomDoctorNursePatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoom?: ChatRoomUpdateOneWithoutMessagesNestedInput
    chatRoomPatientNurse?: ChatRoomPatientNurseUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutChatRoomDoctorNursePatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomPatientNurseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateManyWithoutChatRoomDoctorNursePatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderRole?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    chatRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    chatRoomPatientNurseId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PatientCountOutputTypeDefaultArgs instead
     */
    export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NurseCountOutputTypeDefaultArgs instead
     */
    export type NurseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NurseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorCountOutputTypeDefaultArgs instead
     */
    export type DoctorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskCountOutputTypeDefaultArgs instead
     */
    export type TaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PharmacyCountOutputTypeDefaultArgs instead
     */
    export type PharmacyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PharmacyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicineCountOutputTypeDefaultArgs instead
     */
    export type MedicineCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicineCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminCountOutputTypeDefaultArgs instead
     */
    export type AdminCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationCountOutputTypeDefaultArgs instead
     */
    export type NotificationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicalRecordCountOutputTypeDefaultArgs instead
     */
    export type MedicalRecordCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicalRecordCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomCountOutputTypeDefaultArgs instead
     */
    export type ChatRoomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomPatientNurseCountOutputTypeDefaultArgs instead
     */
    export type ChatRoomPatientNurseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomPatientNurseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomDoctorNursePatientCountOutputTypeDefaultArgs instead
     */
    export type ChatRoomDoctorNursePatientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomDoctorNursePatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDefaultArgs instead
     */
    export type PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NurseDefaultArgs instead
     */
    export type NurseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NurseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorDefaultArgs instead
     */
    export type DoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorNurseDefaultArgs instead
     */
    export type DoctorNurseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorNurseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskDefaultArgs instead
     */
    export type TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDefaultArgs instead
     */
    export type ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NurseServiceRequestDefaultArgs instead
     */
    export type NurseServiceRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NurseServiceRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorPatientRequestDefaultArgs instead
     */
    export type DoctorPatientRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorPatientRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorPatientDefaultArgs instead
     */
    export type DoctorPatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorPatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PharmacyDefaultArgs instead
     */
    export type PharmacyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PharmacyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicineDefaultArgs instead
     */
    export type MedicineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrescriptionDefaultArgs instead
     */
    export type PrescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrescriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationReadDefaultArgs instead
     */
    export type NotificationReadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationReadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicalRecordDefaultArgs instead
     */
    export type MedicalRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicalRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDefaultArgs instead
     */
    export type ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NurseVisitDefaultArgs instead
     */
    export type NurseVisitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NurseVisitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomDefaultArgs instead
     */
    export type ChatRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomPatientNurseDefaultArgs instead
     */
    export type ChatRoomPatientNurseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomPatientNurseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomDoctorNursePatientDefaultArgs instead
     */
    export type ChatRoomDoctorNursePatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomDoctorNursePatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}