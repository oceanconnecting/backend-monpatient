// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  NURSE
  DOCTOR
  PHARMACY
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ServiceStatus {
  REQUESTED
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id                       Int               @id @default(autoincrement())
  email                    String            @unique
  firstname                String
  lastname                 String
  password                 String
  role                     Role
  telephoneNumber          String?
  dateOfBirth              DateTime?
  gender                   String?
  address                  String?
  profilePhoto             String?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  isEmailVerified          Boolean           @default(false)
  emailVerificationToken   String?           @unique
  emailVerificationExpires DateTime?
  patient                  Patient?
  nurse                    Nurse?
  doctor                   Doctor?
  pharmacy                 Pharmacy?
  admin                    Admin?
  notifications            Notification?
  notificationReads        NotificationRead?
}

model Patient {
  id                           Int                          @id @default(autoincrement())
  user                         User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                       Int                          @unique
  allergies                    String?
  emergencyContactName         String?
  emergencyContactPhone        String?
  emergencyContactRelationship String?
  insuranceInfo                String?
  preferredPharmacy            String?
  medicalRecord                MedicalRecord?
  prescriptions                Prescription[]               @relation("PatientPrescriptions")
  nurseVisits                  NurseVisit[]
  doctorRequests               DoctorPatientRequest[]       @relation("PatientRequests")
  doctors                      DoctorPatient[]              @relation("PatientDoctors")
  nurseServiceRequests         NurseServiceRequest[]        @relation("PatientNurseRequests")
  chatRooms                    ChatRoom[]                   @relation("PatientChats")
  ChatRoomDoctorNursePatient   ChatRoomDoctorNursePatient[]
  chatRoomPatients             ChatRoomPatientNurse[]       @relation("PatientChats")
}

model Nurse {
  id                         Int                          @id @default(autoincrement())
  availability               Boolean                      @default(true)
  rating                     Float                        @default(0)
  professionalLicenseNumber  String?
  nursingCertification       String?
  hospitalAffiliation        String?
  yearsOfExperience          Int?
  user                       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     Int                          @unique
  nurseVisits                NurseVisit[]
  medicalRecords             MedicalRecord[]              @relation("NurseUpdates")
  serviceRequests            NurseServiceRequest[]        @relation("NurseServiceRequests")
  nurseChats                 ChatRoomPatientNurse[]       @relation("nurseChats")
  ChatRoomDoctorNursePatient ChatRoomDoctorNursePatient[]
  doctors                    Doctor[]                     @relation("DoctorNurses")
}

model Doctor {
  id                         Int                          @id @default(autoincrement())
  specialization             String?
  availability               Boolean                      @default(true)
  rating                     Float                        @default(0)
  professionalLicenseNumber  String?
  medicalDiploma             String?
  hospitalAffiliation        String?
  experience                 String?
  user                       User                         @relation(fields: [userId], references: [id])
  userId                     Int                          @unique
  patients                   DoctorPatient[]              @relation("DoctorPatients")
  patientRequests            DoctorPatientRequest[]       @relation("DoctorRequests")
  medicalRecords             MedicalRecord[]              @relation("DoctorViews")
  prescriptions              Prescription[]               @relation("DoctorPrescriptions")
  chatRooms                  ChatRoom[]                   @relation("DoctorChats")
  ChatRoomDoctorNursePatient ChatRoomDoctorNursePatient[]
  nurses                     Nurse[]                      @relation("DoctorNurses")
}

model NurseServiceRequest {
  id            Int           @id @default(autoincrement())
  patient       Patient       @relation("PatientNurseRequests", fields: [patientId], references: [id])
  patientId     Int
  nurse         Nurse?        @relation("NurseServiceRequests", fields: [nurseId], references: [id])
  nurseId       Int?
  status        ServiceStatus @default(REQUESTED)
  serviceType   String // e.g., "Blood Pressure Check", "Wound Care", etc.
  description   String
  preferredDate DateTime
  urgency       String // e.g., "Low", "Medium", "High"
  location      String // Patient's preferred location for service
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  completedAt   DateTime?
  notes         String? // Nurse's notes after service
  rating        Int? // Patient's rating of the service (1-5)
  feedback      String? // Patient's feedback
}

model DoctorPatientRequest {
  id        Int           @id @default(autoincrement())
  patient   Patient       @relation("PatientRequests", fields: [patientId], references: [id])
  patientId Int
  doctor    Doctor        @relation("DoctorRequests", fields: [doctorId], references: [id])
  doctorId  Int
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  message   String?

  @@unique([patientId, doctorId])
}

model DoctorPatient {
  id        Int       @id @default(autoincrement())
  patient   Patient   @relation("PatientDoctors", fields: [patientId], references: [id])
  patientId Int
  doctor    Doctor    @relation("DoctorPatients", fields: [doctorId], references: [id])
  doctorId  Int
  startDate DateTime  @default(now())
  endDate   DateTime?
  active    Boolean   @default(true)

  @@unique([patientId, doctorId])
}

model Pharmacy {
  id                    Int            @id @default(autoincrement())
  user                  User           @relation(fields: [userId], references: [id])
  userId                Int            @unique
  pharmacyName          String?
  pharmacyLicenseNumber String?
  pharmacyAddress       String?
  contactName           String?
  openingHours          String?
  deliveryOptions       String?
  prescriptions         Prescription[] @relation("PharmacyPrescriptions")
}

model Admin {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      @unique
  reports Report[]
}

model Prescription {
  id         Int       @id @default(autoincrement())
  date       DateTime  @default(now())
  details    String
  approved   Boolean   @default(false)
  patient    Patient   @relation("PatientPrescriptions", fields: [patientId], references: [id])
  patientId  Int
  doctor     Doctor    @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  doctorId   Int
  pharmacy   Pharmacy? @relation("PharmacyPrescriptions", fields: [pharmacyId], references: [id])
  pharmacyId Int?
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    Int                @unique
  type      String
  title     String
  message   String
  read      Boolean            @default(false)
  metadata  Json?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  readBy    NotificationRead[]
}

model NotificationRead {
  id             Int          @id @default(autoincrement())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int          @unique
  readAt         DateTime     @default(now())

  @@unique([notificationId, userId])
}

model MedicalRecord {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int      @unique
  diagnosis String
  treatment String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nurses    Nurse[]  @relation("NurseUpdates")
  doctors   Doctor[] @relation("DoctorViews")
}

model Report {
  id            Int      @id @default(autoincrement())
  details       String
  dateGenerated DateTime @default(now())
  admin         Admin    @relation(fields: [adminId], references: [id])
  adminId       Int
}

model NurseVisit {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  notes     String?
  nurse     Nurse    @relation(fields: [nurseId], references: [id])
  nurseId   Int
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
}

model ChatRoom {
  id        Int       @id @default(autoincrement())
  status    String // ACTIVE, ARCHIVED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  patient   Patient   @relation("PatientChats", fields: [patientId], references: [id])
  patientId Int
  doctor    Doctor    @relation("DoctorChats", fields: [doctorId], references: [id])
  doctorId  Int
  messages  Message[]

  @@unique([patientId, doctorId])
}

model ChatRoomPatientNurse {
  id        Int       @id @default(autoincrement())
  status    String // ACTIVE, ARCHIVED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  nurse     Nurse     @relation("nurseChats", fields: [nurseId], references: [id])
  nurseId   Int
  patient   Patient   @relation("PatientChats", fields: [patientId], references: [id])
  patientId Int
  messages  Message[]

  @@unique([patientId, nurseId])
}

model ChatRoomDoctorNursePatient {
  id        Int       @id @default(autoincrement())
  status    String // ACTIVE, ARCHIVED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  doctor    Doctor?   @relation(fields: [doctorId], references: [id])
  doctorId  Int?
  nurse     Nurse?    @relation(fields: [nurseId], references: [id])
  nurseId   Int?
  patient   Patient?  @relation(fields: [patientId], references: [id])
  patientId Int?
  messages  Message[]

  @@unique([doctorId, nurseId, patientId])
}

model Message {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  senderId   Int
  isRead     Boolean   @default(false)
  readAt     DateTime?
  senderRole Role

  // Polymorphic relationship: Message can belong to different chat rooms
  chatRoomId                   Int?
  chatRoom                     ChatRoom?                   @relation(fields: [chatRoomId], references: [id])
  chatRoomPatientNurseId       Int?
  chatRoomPatientNurse         ChatRoomPatientNurse?       @relation(fields: [chatRoomPatientNurseId], references: [id])
  chatRoomDoctorNursePatientId Int?
  chatRoomDoctorNursePatient   ChatRoomDoctorNursePatient? @relation(fields: [chatRoomDoctorNursePatientId], references: [id])

  // Ensure that a message belongs to only one chat type
}
